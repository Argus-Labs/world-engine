// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	runtime "github.com/heroiclabs/nakama-common/runtime"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// MockMatch is an autogenerated mock type for the Match type
type MockMatch struct {
	mock.Mock
}

// MatchInit provides a mock function with given fields: ctx, logger, db, nk, params
func (_m *MockMatch) MatchInit(ctx context.Context, logger runtime.Logger, db *sql.DB, nk runtime.NakamaModule, params map[string]interface{}) (interface{}, int, string) {
	ret := _m.Called(ctx, logger, db, nk, params)

	var r0 interface{}
	var r1 int
	var r2 string
	if rf, ok := ret.Get(0).(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, map[string]interface{}) (interface{}, int, string)); ok {
		return rf(ctx, logger, db, nk, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, map[string]interface{}) interface{}); ok {
		r0 = rf(ctx, logger, db, nk, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, map[string]interface{}) int); ok {
		r1 = rf(ctx, logger, db, nk, params)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, map[string]interface{}) string); ok {
		r2 = rf(ctx, logger, db, nk, params)
	} else {
		r2 = ret.Get(2).(string)
	}

	return r0, r1, r2
}

// MatchJoin provides a mock function with given fields: ctx, logger, db, nk, dispatcher, tick, state, presences
func (_m *MockMatch) MatchJoin(ctx context.Context, logger runtime.Logger, db *sql.DB, nk runtime.NakamaModule, dispatcher runtime.MatchDispatcher, tick int64, state interface{}, presences []runtime.Presence) interface{} {
	ret := _m.Called(ctx, logger, db, nk, dispatcher, tick, state, presences)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, runtime.MatchDispatcher, int64, interface{}, []runtime.Presence) interface{}); ok {
		r0 = rf(ctx, logger, db, nk, dispatcher, tick, state, presences)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MatchJoinAttempt provides a mock function with given fields: ctx, logger, db, nk, dispatcher, tick, state, presence, metadata
func (_m *MockMatch) MatchJoinAttempt(ctx context.Context, logger runtime.Logger, db *sql.DB, nk runtime.NakamaModule, dispatcher runtime.MatchDispatcher, tick int64, state interface{}, presence runtime.Presence, metadata map[string]string) (interface{}, bool, string) {
	ret := _m.Called(ctx, logger, db, nk, dispatcher, tick, state, presence, metadata)

	var r0 interface{}
	var r1 bool
	var r2 string
	if rf, ok := ret.Get(0).(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, runtime.MatchDispatcher, int64, interface{}, runtime.Presence, map[string]string) (interface{}, bool, string)); ok {
		return rf(ctx, logger, db, nk, dispatcher, tick, state, presence, metadata)
	}
	if rf, ok := ret.Get(0).(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, runtime.MatchDispatcher, int64, interface{}, runtime.Presence, map[string]string) interface{}); ok {
		r0 = rf(ctx, logger, db, nk, dispatcher, tick, state, presence, metadata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, runtime.MatchDispatcher, int64, interface{}, runtime.Presence, map[string]string) bool); ok {
		r1 = rf(ctx, logger, db, nk, dispatcher, tick, state, presence, metadata)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, runtime.MatchDispatcher, int64, interface{}, runtime.Presence, map[string]string) string); ok {
		r2 = rf(ctx, logger, db, nk, dispatcher, tick, state, presence, metadata)
	} else {
		r2 = ret.Get(2).(string)
	}

	return r0, r1, r2
}

// MatchLeave provides a mock function with given fields: ctx, logger, db, nk, dispatcher, tick, state, presences
func (_m *MockMatch) MatchLeave(ctx context.Context, logger runtime.Logger, db *sql.DB, nk runtime.NakamaModule, dispatcher runtime.MatchDispatcher, tick int64, state interface{}, presences []runtime.Presence) interface{} {
	ret := _m.Called(ctx, logger, db, nk, dispatcher, tick, state, presences)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, runtime.MatchDispatcher, int64, interface{}, []runtime.Presence) interface{}); ok {
		r0 = rf(ctx, logger, db, nk, dispatcher, tick, state, presences)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MatchLoop provides a mock function with given fields: ctx, logger, db, nk, dispatcher, tick, state, messages
func (_m *MockMatch) MatchLoop(ctx context.Context, logger runtime.Logger, db *sql.DB, nk runtime.NakamaModule, dispatcher runtime.MatchDispatcher, tick int64, state interface{}, messages []runtime.MatchData) interface{} {
	ret := _m.Called(ctx, logger, db, nk, dispatcher, tick, state, messages)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, runtime.MatchDispatcher, int64, interface{}, []runtime.MatchData) interface{}); ok {
		r0 = rf(ctx, logger, db, nk, dispatcher, tick, state, messages)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MatchSignal provides a mock function with given fields: ctx, logger, db, nk, dispatcher, tick, state, data
func (_m *MockMatch) MatchSignal(ctx context.Context, logger runtime.Logger, db *sql.DB, nk runtime.NakamaModule, dispatcher runtime.MatchDispatcher, tick int64, state interface{}, data string) (interface{}, string) {
	ret := _m.Called(ctx, logger, db, nk, dispatcher, tick, state, data)

	var r0 interface{}
	var r1 string
	if rf, ok := ret.Get(0).(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, runtime.MatchDispatcher, int64, interface{}, string) (interface{}, string)); ok {
		return rf(ctx, logger, db, nk, dispatcher, tick, state, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, runtime.MatchDispatcher, int64, interface{}, string) interface{}); ok {
		r0 = rf(ctx, logger, db, nk, dispatcher, tick, state, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, runtime.MatchDispatcher, int64, interface{}, string) string); ok {
		r1 = rf(ctx, logger, db, nk, dispatcher, tick, state, data)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// MatchTerminate provides a mock function with given fields: ctx, logger, db, nk, dispatcher, tick, state, graceSeconds
func (_m *MockMatch) MatchTerminate(ctx context.Context, logger runtime.Logger, db *sql.DB, nk runtime.NakamaModule, dispatcher runtime.MatchDispatcher, tick int64, state interface{}, graceSeconds int) interface{} {
	ret := _m.Called(ctx, logger, db, nk, dispatcher, tick, state, graceSeconds)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, runtime.MatchDispatcher, int64, interface{}, int) interface{}); ok {
		r0 = rf(ctx, logger, db, nk, dispatcher, tick, state, graceSeconds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

type mockConstructorTestingTNewMockMatch interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMatch creates a new instance of MockMatch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMatch(t mockConstructorTestingTNewMockMatch) *MockMatch {
	mock := &MockMatch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
