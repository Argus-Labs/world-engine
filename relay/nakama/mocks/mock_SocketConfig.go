// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockSocketConfig is an autogenerated mock type for the SocketConfig type
type MockSocketConfig struct {
	mock.Mock
}

type MockSocketConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSocketConfig) EXPECT() *MockSocketConfig_Expecter {
	return &MockSocketConfig_Expecter{mock: &_m.Mock}
}

// GetAddress provides a mock function with no fields
func (_m *MockSocketConfig) GetAddress() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAddress")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSocketConfig_GetAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddress'
type MockSocketConfig_GetAddress_Call struct {
	*mock.Call
}

// GetAddress is a helper method to define mock.On call
func (_e *MockSocketConfig_Expecter) GetAddress() *MockSocketConfig_GetAddress_Call {
	return &MockSocketConfig_GetAddress_Call{Call: _e.mock.On("GetAddress")}
}

func (_c *MockSocketConfig_GetAddress_Call) Run(run func()) *MockSocketConfig_GetAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSocketConfig_GetAddress_Call) Return(_a0 string) *MockSocketConfig_GetAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSocketConfig_GetAddress_Call) RunAndReturn(run func() string) *MockSocketConfig_GetAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetPort provides a mock function with no fields
func (_m *MockSocketConfig) GetPort() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPort")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockSocketConfig_GetPort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPort'
type MockSocketConfig_GetPort_Call struct {
	*mock.Call
}

// GetPort is a helper method to define mock.On call
func (_e *MockSocketConfig_Expecter) GetPort() *MockSocketConfig_GetPort_Call {
	return &MockSocketConfig_GetPort_Call{Call: _e.mock.On("GetPort")}
}

func (_c *MockSocketConfig_GetPort_Call) Run(run func()) *MockSocketConfig_GetPort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSocketConfig_GetPort_Call) Return(_a0 int) *MockSocketConfig_GetPort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSocketConfig_GetPort_Call) RunAndReturn(run func() int) *MockSocketConfig_GetPort_Call {
	_c.Call.Return(run)
	return _c
}

// GetProtocol provides a mock function with no fields
func (_m *MockSocketConfig) GetProtocol() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProtocol")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSocketConfig_GetProtocol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProtocol'
type MockSocketConfig_GetProtocol_Call struct {
	*mock.Call
}

// GetProtocol is a helper method to define mock.On call
func (_e *MockSocketConfig_Expecter) GetProtocol() *MockSocketConfig_GetProtocol_Call {
	return &MockSocketConfig_GetProtocol_Call{Call: _e.mock.On("GetProtocol")}
}

func (_c *MockSocketConfig_GetProtocol_Call) Run(run func()) *MockSocketConfig_GetProtocol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSocketConfig_GetProtocol_Call) Return(_a0 string) *MockSocketConfig_GetProtocol_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSocketConfig_GetProtocol_Call) RunAndReturn(run func() string) *MockSocketConfig_GetProtocol_Call {
	_c.Call.Return(run)
	return _c
}

// GetServerKey provides a mock function with no fields
func (_m *MockSocketConfig) GetServerKey() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServerKey")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSocketConfig_GetServerKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServerKey'
type MockSocketConfig_GetServerKey_Call struct {
	*mock.Call
}

// GetServerKey is a helper method to define mock.On call
func (_e *MockSocketConfig_Expecter) GetServerKey() *MockSocketConfig_GetServerKey_Call {
	return &MockSocketConfig_GetServerKey_Call{Call: _e.mock.On("GetServerKey")}
}

func (_c *MockSocketConfig_GetServerKey_Call) Run(run func()) *MockSocketConfig_GetServerKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSocketConfig_GetServerKey_Call) Return(_a0 string) *MockSocketConfig_GetServerKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSocketConfig_GetServerKey_Call) RunAndReturn(run func() string) *MockSocketConfig_GetServerKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSocketConfig creates a new instance of MockSocketConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSocketConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSocketConfig {
	mock := &MockSocketConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
