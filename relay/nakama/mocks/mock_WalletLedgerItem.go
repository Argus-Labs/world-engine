// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockWalletLedgerItem is an autogenerated mock type for the WalletLedgerItem type
type MockWalletLedgerItem struct {
	mock.Mock
}

// GetChangeset provides a mock function with given fields:
func (_m *MockWalletLedgerItem) GetChangeset() map[string]int64 {
	ret := _m.Called()

	var r0 map[string]int64
	if rf, ok := ret.Get(0).(func() map[string]int64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int64)
		}
	}

	return r0
}

// GetCreateTime provides a mock function with given fields:
func (_m *MockWalletLedgerItem) GetCreateTime() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetID provides a mock function with given fields:
func (_m *MockWalletLedgerItem) GetID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetMetadata provides a mock function with given fields:
func (_m *MockWalletLedgerItem) GetMetadata() map[string]interface{} {
	ret := _m.Called()

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// GetUpdateTime provides a mock function with given fields:
func (_m *MockWalletLedgerItem) GetUpdateTime() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetUserID provides a mock function with given fields:
func (_m *MockWalletLedgerItem) GetUserID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewMockWalletLedgerItem interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockWalletLedgerItem creates a new instance of MockWalletLedgerItem. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockWalletLedgerItem(t mockConstructorTestingTNewMockWalletLedgerItem) *MockWalletLedgerItem {
	mock := &MockWalletLedgerItem{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
