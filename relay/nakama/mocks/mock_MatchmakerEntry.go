// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	runtime "github.com/heroiclabs/nakama-common/runtime"
	mock "github.com/stretchr/testify/mock"
)

// MockMatchmakerEntry is an autogenerated mock type for the MatchmakerEntry type
type MockMatchmakerEntry struct {
	mock.Mock
}

type MockMatchmakerEntry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMatchmakerEntry) EXPECT() *MockMatchmakerEntry_Expecter {
	return &MockMatchmakerEntry_Expecter{mock: &_m.Mock}
}

// GetPartyId provides a mock function with no fields
func (_m *MockMatchmakerEntry) GetPartyId() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPartyId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMatchmakerEntry_GetPartyId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPartyId'
type MockMatchmakerEntry_GetPartyId_Call struct {
	*mock.Call
}

// GetPartyId is a helper method to define mock.On call
func (_e *MockMatchmakerEntry_Expecter) GetPartyId() *MockMatchmakerEntry_GetPartyId_Call {
	return &MockMatchmakerEntry_GetPartyId_Call{Call: _e.mock.On("GetPartyId")}
}

func (_c *MockMatchmakerEntry_GetPartyId_Call) Run(run func()) *MockMatchmakerEntry_GetPartyId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMatchmakerEntry_GetPartyId_Call) Return(_a0 string) *MockMatchmakerEntry_GetPartyId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMatchmakerEntry_GetPartyId_Call) RunAndReturn(run func() string) *MockMatchmakerEntry_GetPartyId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPresence provides a mock function with no fields
func (_m *MockMatchmakerEntry) GetPresence() runtime.Presence {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPresence")
	}

	var r0 runtime.Presence
	if rf, ok := ret.Get(0).(func() runtime.Presence); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtime.Presence)
		}
	}

	return r0
}

// MockMatchmakerEntry_GetPresence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPresence'
type MockMatchmakerEntry_GetPresence_Call struct {
	*mock.Call
}

// GetPresence is a helper method to define mock.On call
func (_e *MockMatchmakerEntry_Expecter) GetPresence() *MockMatchmakerEntry_GetPresence_Call {
	return &MockMatchmakerEntry_GetPresence_Call{Call: _e.mock.On("GetPresence")}
}

func (_c *MockMatchmakerEntry_GetPresence_Call) Run(run func()) *MockMatchmakerEntry_GetPresence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMatchmakerEntry_GetPresence_Call) Return(_a0 runtime.Presence) *MockMatchmakerEntry_GetPresence_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMatchmakerEntry_GetPresence_Call) RunAndReturn(run func() runtime.Presence) *MockMatchmakerEntry_GetPresence_Call {
	_c.Call.Return(run)
	return _c
}

// GetProperties provides a mock function with no fields
func (_m *MockMatchmakerEntry) GetProperties() map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProperties")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// MockMatchmakerEntry_GetProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProperties'
type MockMatchmakerEntry_GetProperties_Call struct {
	*mock.Call
}

// GetProperties is a helper method to define mock.On call
func (_e *MockMatchmakerEntry_Expecter) GetProperties() *MockMatchmakerEntry_GetProperties_Call {
	return &MockMatchmakerEntry_GetProperties_Call{Call: _e.mock.On("GetProperties")}
}

func (_c *MockMatchmakerEntry_GetProperties_Call) Run(run func()) *MockMatchmakerEntry_GetProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMatchmakerEntry_GetProperties_Call) Return(_a0 map[string]interface{}) *MockMatchmakerEntry_GetProperties_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMatchmakerEntry_GetProperties_Call) RunAndReturn(run func() map[string]interface{}) *MockMatchmakerEntry_GetProperties_Call {
	_c.Call.Return(run)
	return _c
}

// GetTicket provides a mock function with no fields
func (_m *MockMatchmakerEntry) GetTicket() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTicket")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMatchmakerEntry_GetTicket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTicket'
type MockMatchmakerEntry_GetTicket_Call struct {
	*mock.Call
}

// GetTicket is a helper method to define mock.On call
func (_e *MockMatchmakerEntry_Expecter) GetTicket() *MockMatchmakerEntry_GetTicket_Call {
	return &MockMatchmakerEntry_GetTicket_Call{Call: _e.mock.On("GetTicket")}
}

func (_c *MockMatchmakerEntry_GetTicket_Call) Run(run func()) *MockMatchmakerEntry_GetTicket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMatchmakerEntry_GetTicket_Call) Return(_a0 string) *MockMatchmakerEntry_GetTicket_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMatchmakerEntry_GetTicket_Call) RunAndReturn(run func() string) *MockMatchmakerEntry_GetTicket_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMatchmakerEntry creates a new instance of MockMatchmakerEntry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMatchmakerEntry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMatchmakerEntry {
	mock := &MockMatchmakerEntry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
