// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	runtime "github.com/heroiclabs/nakama-common/runtime"
	mock "github.com/stretchr/testify/mock"
)

// Satori is an autogenerated mock type for the Satori type
type Satori struct {
	mock.Mock
}

type Satori_Expecter struct {
	mock *mock.Mock
}

func (_m *Satori) EXPECT() *Satori_Expecter {
	return &Satori_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: ctx, id
func (_m *Satori) Authenticate(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Satori_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type Satori_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Satori_Expecter) Authenticate(ctx interface{}, id interface{}) *Satori_Authenticate_Call {
	return &Satori_Authenticate_Call{Call: _e.mock.On("Authenticate", ctx, id)}
}

func (_c *Satori_Authenticate_Call) Run(run func(ctx context.Context, id string)) *Satori_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Satori_Authenticate_Call) Return(_a0 error) *Satori_Authenticate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Satori_Authenticate_Call) RunAndReturn(run func(context.Context, string) error) *Satori_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// EventsPublish provides a mock function with given fields: ctx, id, events
func (_m *Satori) EventsPublish(ctx context.Context, id string, events []*runtime.Event) error {
	ret := _m.Called(ctx, id, events)

	if len(ret) == 0 {
		panic("no return value specified for EventsPublish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*runtime.Event) error); ok {
		r0 = rf(ctx, id, events)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Satori_EventsPublish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EventsPublish'
type Satori_EventsPublish_Call struct {
	*mock.Call
}

// EventsPublish is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - events []*runtime.Event
func (_e *Satori_Expecter) EventsPublish(ctx interface{}, id interface{}, events interface{}) *Satori_EventsPublish_Call {
	return &Satori_EventsPublish_Call{Call: _e.mock.On("EventsPublish", ctx, id, events)}
}

func (_c *Satori_EventsPublish_Call) Run(run func(ctx context.Context, id string, events []*runtime.Event)) *Satori_EventsPublish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]*runtime.Event))
	})
	return _c
}

func (_c *Satori_EventsPublish_Call) Return(_a0 error) *Satori_EventsPublish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Satori_EventsPublish_Call) RunAndReturn(run func(context.Context, string, []*runtime.Event) error) *Satori_EventsPublish_Call {
	_c.Call.Return(run)
	return _c
}

// ExperimentsList provides a mock function with given fields: ctx, id, names
func (_m *Satori) ExperimentsList(ctx context.Context, id string, names ...string) (*runtime.ExperimentList, error) {
	_va := make([]interface{}, len(names))
	for _i := range names {
		_va[_i] = names[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExperimentsList")
	}

	var r0 *runtime.ExperimentList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) (*runtime.ExperimentList, error)); ok {
		return rf(ctx, id, names...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *runtime.ExperimentList); ok {
		r0 = rf(ctx, id, names...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.ExperimentList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...string) error); ok {
		r1 = rf(ctx, id, names...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Satori_ExperimentsList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExperimentsList'
type Satori_ExperimentsList_Call struct {
	*mock.Call
}

// ExperimentsList is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - names ...string
func (_e *Satori_Expecter) ExperimentsList(ctx interface{}, id interface{}, names ...interface{}) *Satori_ExperimentsList_Call {
	return &Satori_ExperimentsList_Call{Call: _e.mock.On("ExperimentsList",
		append([]interface{}{ctx, id}, names...)...)}
}

func (_c *Satori_ExperimentsList_Call) Run(run func(ctx context.Context, id string, names ...string)) *Satori_ExperimentsList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Satori_ExperimentsList_Call) Return(_a0 *runtime.ExperimentList, _a1 error) *Satori_ExperimentsList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Satori_ExperimentsList_Call) RunAndReturn(run func(context.Context, string, ...string) (*runtime.ExperimentList, error)) *Satori_ExperimentsList_Call {
	_c.Call.Return(run)
	return _c
}

// FlagsList provides a mock function with given fields: ctx, id, names
func (_m *Satori) FlagsList(ctx context.Context, id string, names ...string) (*runtime.FlagList, error) {
	_va := make([]interface{}, len(names))
	for _i := range names {
		_va[_i] = names[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FlagsList")
	}

	var r0 *runtime.FlagList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) (*runtime.FlagList, error)); ok {
		return rf(ctx, id, names...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *runtime.FlagList); ok {
		r0 = rf(ctx, id, names...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.FlagList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...string) error); ok {
		r1 = rf(ctx, id, names...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Satori_FlagsList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlagsList'
type Satori_FlagsList_Call struct {
	*mock.Call
}

// FlagsList is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - names ...string
func (_e *Satori_Expecter) FlagsList(ctx interface{}, id interface{}, names ...interface{}) *Satori_FlagsList_Call {
	return &Satori_FlagsList_Call{Call: _e.mock.On("FlagsList",
		append([]interface{}{ctx, id}, names...)...)}
}

func (_c *Satori_FlagsList_Call) Run(run func(ctx context.Context, id string, names ...string)) *Satori_FlagsList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Satori_FlagsList_Call) Return(_a0 *runtime.FlagList, _a1 error) *Satori_FlagsList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Satori_FlagsList_Call) RunAndReturn(run func(context.Context, string, ...string) (*runtime.FlagList, error)) *Satori_FlagsList_Call {
	_c.Call.Return(run)
	return _c
}

// LiveEventsList provides a mock function with given fields: ctx, id, names
func (_m *Satori) LiveEventsList(ctx context.Context, id string, names ...string) (*runtime.LiveEventList, error) {
	_va := make([]interface{}, len(names))
	for _i := range names {
		_va[_i] = names[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LiveEventsList")
	}

	var r0 *runtime.LiveEventList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) (*runtime.LiveEventList, error)); ok {
		return rf(ctx, id, names...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *runtime.LiveEventList); ok {
		r0 = rf(ctx, id, names...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.LiveEventList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...string) error); ok {
		r1 = rf(ctx, id, names...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Satori_LiveEventsList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LiveEventsList'
type Satori_LiveEventsList_Call struct {
	*mock.Call
}

// LiveEventsList is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - names ...string
func (_e *Satori_Expecter) LiveEventsList(ctx interface{}, id interface{}, names ...interface{}) *Satori_LiveEventsList_Call {
	return &Satori_LiveEventsList_Call{Call: _e.mock.On("LiveEventsList",
		append([]interface{}{ctx, id}, names...)...)}
}

func (_c *Satori_LiveEventsList_Call) Run(run func(ctx context.Context, id string, names ...string)) *Satori_LiveEventsList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Satori_LiveEventsList_Call) Return(_a0 *runtime.LiveEventList, _a1 error) *Satori_LiveEventsList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Satori_LiveEventsList_Call) RunAndReturn(run func(context.Context, string, ...string) (*runtime.LiveEventList, error)) *Satori_LiveEventsList_Call {
	_c.Call.Return(run)
	return _c
}

// PropertiesGet provides a mock function with given fields: ctx, id
func (_m *Satori) PropertiesGet(ctx context.Context, id string) (*runtime.Properties, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for PropertiesGet")
	}

	var r0 *runtime.Properties
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*runtime.Properties, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *runtime.Properties); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.Properties)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Satori_PropertiesGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PropertiesGet'
type Satori_PropertiesGet_Call struct {
	*mock.Call
}

// PropertiesGet is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Satori_Expecter) PropertiesGet(ctx interface{}, id interface{}) *Satori_PropertiesGet_Call {
	return &Satori_PropertiesGet_Call{Call: _e.mock.On("PropertiesGet", ctx, id)}
}

func (_c *Satori_PropertiesGet_Call) Run(run func(ctx context.Context, id string)) *Satori_PropertiesGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Satori_PropertiesGet_Call) Return(_a0 *runtime.Properties, _a1 error) *Satori_PropertiesGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Satori_PropertiesGet_Call) RunAndReturn(run func(context.Context, string) (*runtime.Properties, error)) *Satori_PropertiesGet_Call {
	_c.Call.Return(run)
	return _c
}

// PropertiesUpdate provides a mock function with given fields: ctx, id, properties
func (_m *Satori) PropertiesUpdate(ctx context.Context, id string, properties *runtime.PropertiesUpdate) error {
	ret := _m.Called(ctx, id, properties)

	if len(ret) == 0 {
		panic("no return value specified for PropertiesUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *runtime.PropertiesUpdate) error); ok {
		r0 = rf(ctx, id, properties)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Satori_PropertiesUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PropertiesUpdate'
type Satori_PropertiesUpdate_Call struct {
	*mock.Call
}

// PropertiesUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - properties *runtime.PropertiesUpdate
func (_e *Satori_Expecter) PropertiesUpdate(ctx interface{}, id interface{}, properties interface{}) *Satori_PropertiesUpdate_Call {
	return &Satori_PropertiesUpdate_Call{Call: _e.mock.On("PropertiesUpdate", ctx, id, properties)}
}

func (_c *Satori_PropertiesUpdate_Call) Run(run func(ctx context.Context, id string, properties *runtime.PropertiesUpdate)) *Satori_PropertiesUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*runtime.PropertiesUpdate))
	})
	return _c
}

func (_c *Satori_PropertiesUpdate_Call) Return(_a0 error) *Satori_PropertiesUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Satori_PropertiesUpdate_Call) RunAndReturn(run func(context.Context, string, *runtime.PropertiesUpdate) error) *Satori_PropertiesUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NewSatori creates a new instance of Satori. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSatori(t interface {
	mock.TestingT
	Cleanup(func())
}) *Satori {
	mock := &Satori{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
