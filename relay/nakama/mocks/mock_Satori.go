// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	runtime "github.com/heroiclabs/nakama-common/runtime"
	mock "github.com/stretchr/testify/mock"
)

// MockSatori is an autogenerated mock type for the Satori type
type MockSatori struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: ctx, id, ipAddress
func (_m *MockSatori) Authenticate(ctx context.Context, id string, ipAddress ...string) error {
	_va := make([]interface{}, len(ipAddress))
	for _i := range ipAddress {
		_va[_i] = ipAddress[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) error); ok {
		r0 = rf(ctx, id, ipAddress...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventsPublish provides a mock function with given fields: ctx, id, events
func (_m *MockSatori) EventsPublish(ctx context.Context, id string, events []*runtime.Event) error {
	ret := _m.Called(ctx, id, events)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*runtime.Event) error); ok {
		r0 = rf(ctx, id, events)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExperimentsList provides a mock function with given fields: ctx, id, names
func (_m *MockSatori) ExperimentsList(ctx context.Context, id string, names ...string) (*runtime.ExperimentList, error) {
	_va := make([]interface{}, len(names))
	for _i := range names {
		_va[_i] = names[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *runtime.ExperimentList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) (*runtime.ExperimentList, error)); ok {
		return rf(ctx, id, names...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *runtime.ExperimentList); ok {
		r0 = rf(ctx, id, names...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.ExperimentList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...string) error); ok {
		r1 = rf(ctx, id, names...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlagsList provides a mock function with given fields: ctx, id, names
func (_m *MockSatori) FlagsList(ctx context.Context, id string, names ...string) (*runtime.FlagList, error) {
	_va := make([]interface{}, len(names))
	for _i := range names {
		_va[_i] = names[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *runtime.FlagList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) (*runtime.FlagList, error)); ok {
		return rf(ctx, id, names...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *runtime.FlagList); ok {
		r0 = rf(ctx, id, names...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.FlagList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...string) error); ok {
		r1 = rf(ctx, id, names...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LiveEventsList provides a mock function with given fields: ctx, id, names
func (_m *MockSatori) LiveEventsList(ctx context.Context, id string, names ...string) (*runtime.LiveEventList, error) {
	_va := make([]interface{}, len(names))
	for _i := range names {
		_va[_i] = names[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *runtime.LiveEventList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) (*runtime.LiveEventList, error)); ok {
		return rf(ctx, id, names...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *runtime.LiveEventList); ok {
		r0 = rf(ctx, id, names...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.LiveEventList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...string) error); ok {
		r1 = rf(ctx, id, names...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PropertiesGet provides a mock function with given fields: ctx, id
func (_m *MockSatori) PropertiesGet(ctx context.Context, id string) (*runtime.Properties, error) {
	ret := _m.Called(ctx, id)

	var r0 *runtime.Properties
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*runtime.Properties, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *runtime.Properties); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.Properties)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PropertiesUpdate provides a mock function with given fields: ctx, id, properties
func (_m *MockSatori) PropertiesUpdate(ctx context.Context, id string, properties *runtime.PropertiesUpdate) error {
	ret := _m.Called(ctx, id, properties)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *runtime.PropertiesUpdate) error); ok {
		r0 = rf(ctx, id, properties)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockSatori interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockSatori creates a new instance of MockSatori. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockSatori(t mockConstructorTestingTNewMockSatori) *MockSatori {
	mock := &MockSatori{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
