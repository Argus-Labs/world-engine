// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	runtime "github.com/heroiclabs/nakama-common/runtime"
	mock "github.com/stretchr/testify/mock"
)

// MockMatchDispatcher is an autogenerated mock type for the MatchDispatcher type
type MockMatchDispatcher struct {
	mock.Mock
}

// BroadcastMessage provides a mock function with given fields: opCode, data, presences, sender, reliable
func (_m *MockMatchDispatcher) BroadcastMessage(opCode int64, data []byte, presences []runtime.Presence, sender runtime.Presence, reliable bool) error {
	ret := _m.Called(opCode, data, presences, sender, reliable)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, []byte, []runtime.Presence, runtime.Presence, bool) error); ok {
		r0 = rf(opCode, data, presences, sender, reliable)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BroadcastMessageDeferred provides a mock function with given fields: opCode, data, presences, sender, reliable
func (_m *MockMatchDispatcher) BroadcastMessageDeferred(opCode int64, data []byte, presences []runtime.Presence, sender runtime.Presence, reliable bool) error {
	ret := _m.Called(opCode, data, presences, sender, reliable)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, []byte, []runtime.Presence, runtime.Presence, bool) error); ok {
		r0 = rf(opCode, data, presences, sender, reliable)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MatchKick provides a mock function with given fields: presences
func (_m *MockMatchDispatcher) MatchKick(presences []runtime.Presence) error {
	ret := _m.Called(presences)

	var r0 error
	if rf, ok := ret.Get(0).(func([]runtime.Presence) error); ok {
		r0 = rf(presences)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MatchLabelUpdate provides a mock function with given fields: label
func (_m *MockMatchDispatcher) MatchLabelUpdate(label string) error {
	ret := _m.Called(label)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(label)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockMatchDispatcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMatchDispatcher creates a new instance of MockMatchDispatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMatchDispatcher(t mockConstructorTestingTNewMockMatchDispatcher) *MockMatchDispatcher {
	mock := &MockMatchDispatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
