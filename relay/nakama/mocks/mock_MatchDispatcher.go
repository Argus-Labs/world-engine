// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	runtime "github.com/heroiclabs/nakama-common/runtime"
	mock "github.com/stretchr/testify/mock"
)

// MockMatchDispatcher is an autogenerated mock type for the MatchDispatcher type
type MockMatchDispatcher struct {
	mock.Mock
}

type MockMatchDispatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMatchDispatcher) EXPECT() *MockMatchDispatcher_Expecter {
	return &MockMatchDispatcher_Expecter{mock: &_m.Mock}
}

// BroadcastMessage provides a mock function with given fields: opCode, data, presences, sender, reliable
func (_m *MockMatchDispatcher) BroadcastMessage(opCode int64, data []byte, presences []runtime.Presence, sender runtime.Presence, reliable bool) error {
	ret := _m.Called(opCode, data, presences, sender, reliable)

	if len(ret) == 0 {
		panic("no return value specified for BroadcastMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, []byte, []runtime.Presence, runtime.Presence, bool) error); ok {
		r0 = rf(opCode, data, presences, sender, reliable)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMatchDispatcher_BroadcastMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BroadcastMessage'
type MockMatchDispatcher_BroadcastMessage_Call struct {
	*mock.Call
}

// BroadcastMessage is a helper method to define mock.On call
//   - opCode int64
//   - data []byte
//   - presences []runtime.Presence
//   - sender runtime.Presence
//   - reliable bool
func (_e *MockMatchDispatcher_Expecter) BroadcastMessage(opCode interface{}, data interface{}, presences interface{}, sender interface{}, reliable interface{}) *MockMatchDispatcher_BroadcastMessage_Call {
	return &MockMatchDispatcher_BroadcastMessage_Call{Call: _e.mock.On("BroadcastMessage", opCode, data, presences, sender, reliable)}
}

func (_c *MockMatchDispatcher_BroadcastMessage_Call) Run(run func(opCode int64, data []byte, presences []runtime.Presence, sender runtime.Presence, reliable bool)) *MockMatchDispatcher_BroadcastMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].([]byte), args[2].([]runtime.Presence), args[3].(runtime.Presence), args[4].(bool))
	})
	return _c
}

func (_c *MockMatchDispatcher_BroadcastMessage_Call) Return(_a0 error) *MockMatchDispatcher_BroadcastMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMatchDispatcher_BroadcastMessage_Call) RunAndReturn(run func(int64, []byte, []runtime.Presence, runtime.Presence, bool) error) *MockMatchDispatcher_BroadcastMessage_Call {
	_c.Call.Return(run)
	return _c
}

// BroadcastMessageDeferred provides a mock function with given fields: opCode, data, presences, sender, reliable
func (_m *MockMatchDispatcher) BroadcastMessageDeferred(opCode int64, data []byte, presences []runtime.Presence, sender runtime.Presence, reliable bool) error {
	ret := _m.Called(opCode, data, presences, sender, reliable)

	if len(ret) == 0 {
		panic("no return value specified for BroadcastMessageDeferred")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, []byte, []runtime.Presence, runtime.Presence, bool) error); ok {
		r0 = rf(opCode, data, presences, sender, reliable)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMatchDispatcher_BroadcastMessageDeferred_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BroadcastMessageDeferred'
type MockMatchDispatcher_BroadcastMessageDeferred_Call struct {
	*mock.Call
}

// BroadcastMessageDeferred is a helper method to define mock.On call
//   - opCode int64
//   - data []byte
//   - presences []runtime.Presence
//   - sender runtime.Presence
//   - reliable bool
func (_e *MockMatchDispatcher_Expecter) BroadcastMessageDeferred(opCode interface{}, data interface{}, presences interface{}, sender interface{}, reliable interface{}) *MockMatchDispatcher_BroadcastMessageDeferred_Call {
	return &MockMatchDispatcher_BroadcastMessageDeferred_Call{Call: _e.mock.On("BroadcastMessageDeferred", opCode, data, presences, sender, reliable)}
}

func (_c *MockMatchDispatcher_BroadcastMessageDeferred_Call) Run(run func(opCode int64, data []byte, presences []runtime.Presence, sender runtime.Presence, reliable bool)) *MockMatchDispatcher_BroadcastMessageDeferred_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].([]byte), args[2].([]runtime.Presence), args[3].(runtime.Presence), args[4].(bool))
	})
	return _c
}

func (_c *MockMatchDispatcher_BroadcastMessageDeferred_Call) Return(_a0 error) *MockMatchDispatcher_BroadcastMessageDeferred_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMatchDispatcher_BroadcastMessageDeferred_Call) RunAndReturn(run func(int64, []byte, []runtime.Presence, runtime.Presence, bool) error) *MockMatchDispatcher_BroadcastMessageDeferred_Call {
	_c.Call.Return(run)
	return _c
}

// MatchKick provides a mock function with given fields: presences
func (_m *MockMatchDispatcher) MatchKick(presences []runtime.Presence) error {
	ret := _m.Called(presences)

	if len(ret) == 0 {
		panic("no return value specified for MatchKick")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]runtime.Presence) error); ok {
		r0 = rf(presences)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMatchDispatcher_MatchKick_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MatchKick'
type MockMatchDispatcher_MatchKick_Call struct {
	*mock.Call
}

// MatchKick is a helper method to define mock.On call
//   - presences []runtime.Presence
func (_e *MockMatchDispatcher_Expecter) MatchKick(presences interface{}) *MockMatchDispatcher_MatchKick_Call {
	return &MockMatchDispatcher_MatchKick_Call{Call: _e.mock.On("MatchKick", presences)}
}

func (_c *MockMatchDispatcher_MatchKick_Call) Run(run func(presences []runtime.Presence)) *MockMatchDispatcher_MatchKick_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]runtime.Presence))
	})
	return _c
}

func (_c *MockMatchDispatcher_MatchKick_Call) Return(_a0 error) *MockMatchDispatcher_MatchKick_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMatchDispatcher_MatchKick_Call) RunAndReturn(run func([]runtime.Presence) error) *MockMatchDispatcher_MatchKick_Call {
	_c.Call.Return(run)
	return _c
}

// MatchLabelUpdate provides a mock function with given fields: label
func (_m *MockMatchDispatcher) MatchLabelUpdate(label string) error {
	ret := _m.Called(label)

	if len(ret) == 0 {
		panic("no return value specified for MatchLabelUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(label)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMatchDispatcher_MatchLabelUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MatchLabelUpdate'
type MockMatchDispatcher_MatchLabelUpdate_Call struct {
	*mock.Call
}

// MatchLabelUpdate is a helper method to define mock.On call
//   - label string
func (_e *MockMatchDispatcher_Expecter) MatchLabelUpdate(label interface{}) *MockMatchDispatcher_MatchLabelUpdate_Call {
	return &MockMatchDispatcher_MatchLabelUpdate_Call{Call: _e.mock.On("MatchLabelUpdate", label)}
}

func (_c *MockMatchDispatcher_MatchLabelUpdate_Call) Run(run func(label string)) *MockMatchDispatcher_MatchLabelUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMatchDispatcher_MatchLabelUpdate_Call) Return(_a0 error) *MockMatchDispatcher_MatchLabelUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMatchDispatcher_MatchLabelUpdate_Call) RunAndReturn(run func(string) error) *MockMatchDispatcher_MatchLabelUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMatchDispatcher creates a new instance of MockMatchDispatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMatchDispatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMatchDispatcher {
	mock := &MockMatchDispatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
