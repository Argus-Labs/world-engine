// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockSocialConfigApple is an autogenerated mock type for the SocialConfigApple type
type MockSocialConfigApple struct {
	mock.Mock
}

type MockSocialConfigApple_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSocialConfigApple) EXPECT() *MockSocialConfigApple_Expecter {
	return &MockSocialConfigApple_Expecter{mock: &_m.Mock}
}

// GetBundleId provides a mock function with no fields
func (_m *MockSocialConfigApple) GetBundleId() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBundleId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSocialConfigApple_GetBundleId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBundleId'
type MockSocialConfigApple_GetBundleId_Call struct {
	*mock.Call
}

// GetBundleId is a helper method to define mock.On call
func (_e *MockSocialConfigApple_Expecter) GetBundleId() *MockSocialConfigApple_GetBundleId_Call {
	return &MockSocialConfigApple_GetBundleId_Call{Call: _e.mock.On("GetBundleId")}
}

func (_c *MockSocialConfigApple_GetBundleId_Call) Run(run func()) *MockSocialConfigApple_GetBundleId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSocialConfigApple_GetBundleId_Call) Return(_a0 string) *MockSocialConfigApple_GetBundleId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSocialConfigApple_GetBundleId_Call) RunAndReturn(run func() string) *MockSocialConfigApple_GetBundleId_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSocialConfigApple creates a new instance of MockSocialConfigApple. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSocialConfigApple(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSocialConfigApple {
	mock := &MockSocialConfigApple{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
