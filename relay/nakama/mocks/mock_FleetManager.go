// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	runtime "github.com/heroiclabs/nakama-common/runtime"
	mock "github.com/stretchr/testify/mock"
)

// MockFleetManager is an autogenerated mock type for the FleetManager type
type MockFleetManager struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, maxPlayers, userIds, latencies, metadata, callback
func (_m *MockFleetManager) Create(ctx context.Context, maxPlayers int, userIds []string, latencies []runtime.FleetUserLatencies, metadata map[string]interface{}, callback runtime.FmCreateCallbackFn) error {
	ret := _m.Called(ctx, maxPlayers, userIds, latencies, metadata, callback)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []string, []runtime.FleetUserLatencies, map[string]interface{}, runtime.FmCreateCallbackFn) error); ok {
		r0 = rf(ctx, maxPlayers, userIds, latencies, metadata, callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockFleetManager) Get(ctx context.Context, id string) (*runtime.InstanceInfo, error) {
	ret := _m.Called(ctx, id)

	var r0 *runtime.InstanceInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*runtime.InstanceInfo, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *runtime.InstanceInfo); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.InstanceInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Join provides a mock function with given fields: ctx, id, userIds, metadata
func (_m *MockFleetManager) Join(ctx context.Context, id string, userIds []string, metadata map[string]string) (*runtime.JoinInfo, error) {
	ret := _m.Called(ctx, id, userIds, metadata)

	var r0 *runtime.JoinInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, map[string]string) (*runtime.JoinInfo, error)); ok {
		return rf(ctx, id, userIds, metadata)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, map[string]string) *runtime.JoinInfo); ok {
		r0 = rf(ctx, id, userIds, metadata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.JoinInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string, map[string]string) error); ok {
		r1 = rf(ctx, id, userIds, metadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, query, limit, previousCursor
func (_m *MockFleetManager) List(ctx context.Context, query string, limit int, previousCursor string) ([]*runtime.InstanceInfo, string, error) {
	ret := _m.Called(ctx, query, limit, previousCursor)

	var r0 []*runtime.InstanceInfo
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, string) ([]*runtime.InstanceInfo, string, error)); ok {
		return rf(ctx, query, limit, previousCursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, string) []*runtime.InstanceInfo); ok {
		r0 = rf(ctx, query, limit, previousCursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*runtime.InstanceInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, string) string); ok {
		r1 = rf(ctx, query, limit, previousCursor)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, string) error); ok {
		r2 = rf(ctx, query, limit, previousCursor)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewMockFleetManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockFleetManager creates a new instance of MockFleetManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockFleetManager(t mockConstructorTestingTNewMockFleetManager) *MockFleetManager {
	mock := &MockFleetManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
