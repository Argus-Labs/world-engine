// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	runtime "github.com/heroiclabs/nakama-common/runtime"
	mock "github.com/stretchr/testify/mock"
)

// MockFmCallbackHandler is an autogenerated mock type for the FmCallbackHandler type
type MockFmCallbackHandler struct {
	mock.Mock
}

type MockFmCallbackHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFmCallbackHandler) EXPECT() *MockFmCallbackHandler_Expecter {
	return &MockFmCallbackHandler_Expecter{mock: &_m.Mock}
}

// GenerateCallbackId provides a mock function with no fields
func (_m *MockFmCallbackHandler) GenerateCallbackId() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateCallbackId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockFmCallbackHandler_GenerateCallbackId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateCallbackId'
type MockFmCallbackHandler_GenerateCallbackId_Call struct {
	*mock.Call
}

// GenerateCallbackId is a helper method to define mock.On call
func (_e *MockFmCallbackHandler_Expecter) GenerateCallbackId() *MockFmCallbackHandler_GenerateCallbackId_Call {
	return &MockFmCallbackHandler_GenerateCallbackId_Call{Call: _e.mock.On("GenerateCallbackId")}
}

func (_c *MockFmCallbackHandler_GenerateCallbackId_Call) Run(run func()) *MockFmCallbackHandler_GenerateCallbackId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFmCallbackHandler_GenerateCallbackId_Call) Return(_a0 string) *MockFmCallbackHandler_GenerateCallbackId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFmCallbackHandler_GenerateCallbackId_Call) RunAndReturn(run func() string) *MockFmCallbackHandler_GenerateCallbackId_Call {
	_c.Call.Return(run)
	return _c
}

// InvokeCallback provides a mock function with given fields: callbackId, status, instanceInfo, sessionInfo, metadata, err
func (_m *MockFmCallbackHandler) InvokeCallback(callbackId string, status runtime.FmCreateStatus, instanceInfo *runtime.InstanceInfo, sessionInfo []*runtime.SessionInfo, metadata map[string]interface{}, err error) {
	_m.Called(callbackId, status, instanceInfo, sessionInfo, metadata, err)
}

// MockFmCallbackHandler_InvokeCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvokeCallback'
type MockFmCallbackHandler_InvokeCallback_Call struct {
	*mock.Call
}

// InvokeCallback is a helper method to define mock.On call
//   - callbackId string
//   - status runtime.FmCreateStatus
//   - instanceInfo *runtime.InstanceInfo
//   - sessionInfo []*runtime.SessionInfo
//   - metadata map[string]interface{}
//   - err error
func (_e *MockFmCallbackHandler_Expecter) InvokeCallback(callbackId interface{}, status interface{}, instanceInfo interface{}, sessionInfo interface{}, metadata interface{}, err interface{}) *MockFmCallbackHandler_InvokeCallback_Call {
	return &MockFmCallbackHandler_InvokeCallback_Call{Call: _e.mock.On("InvokeCallback", callbackId, status, instanceInfo, sessionInfo, metadata, err)}
}

func (_c *MockFmCallbackHandler_InvokeCallback_Call) Run(run func(callbackId string, status runtime.FmCreateStatus, instanceInfo *runtime.InstanceInfo, sessionInfo []*runtime.SessionInfo, metadata map[string]interface{}, err error)) *MockFmCallbackHandler_InvokeCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(runtime.FmCreateStatus), args[2].(*runtime.InstanceInfo), args[3].([]*runtime.SessionInfo), args[4].(map[string]interface{}), args[5].(error))
	})
	return _c
}

func (_c *MockFmCallbackHandler_InvokeCallback_Call) Return() *MockFmCallbackHandler_InvokeCallback_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockFmCallbackHandler_InvokeCallback_Call) RunAndReturn(run func(string, runtime.FmCreateStatus, *runtime.InstanceInfo, []*runtime.SessionInfo, map[string]interface{}, error)) *MockFmCallbackHandler_InvokeCallback_Call {
	_c.Run(run)
	return _c
}

// SetCallback provides a mock function with given fields: callbackId, fn
func (_m *MockFmCallbackHandler) SetCallback(callbackId string, fn runtime.FmCreateCallbackFn) {
	_m.Called(callbackId, fn)
}

// MockFmCallbackHandler_SetCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCallback'
type MockFmCallbackHandler_SetCallback_Call struct {
	*mock.Call
}

// SetCallback is a helper method to define mock.On call
//   - callbackId string
//   - fn runtime.FmCreateCallbackFn
func (_e *MockFmCallbackHandler_Expecter) SetCallback(callbackId interface{}, fn interface{}) *MockFmCallbackHandler_SetCallback_Call {
	return &MockFmCallbackHandler_SetCallback_Call{Call: _e.mock.On("SetCallback", callbackId, fn)}
}

func (_c *MockFmCallbackHandler_SetCallback_Call) Run(run func(callbackId string, fn runtime.FmCreateCallbackFn)) *MockFmCallbackHandler_SetCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(runtime.FmCreateCallbackFn))
	})
	return _c
}

func (_c *MockFmCallbackHandler_SetCallback_Call) Return() *MockFmCallbackHandler_SetCallback_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockFmCallbackHandler_SetCallback_Call) RunAndReturn(run func(string, runtime.FmCreateCallbackFn)) *MockFmCallbackHandler_SetCallback_Call {
	_c.Run(run)
	return _c
}

// NewMockFmCallbackHandler creates a new instance of MockFmCallbackHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFmCallbackHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFmCallbackHandler {
	mock := &MockFmCallbackHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
