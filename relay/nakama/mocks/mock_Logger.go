// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	runtime "github.com/heroiclabs/nakama-common/runtime"
	mock "github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

type Logger_Expecter struct {
	mock *mock.Mock
}

func (_m *Logger) EXPECT() *Logger_Expecter {
	return &Logger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: format, v
func (_m *Logger) Debug(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Logger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type Logger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *Logger_Expecter) Debug(format interface{}, v ...interface{}) *Logger_Debug_Call {
	return &Logger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{format}, v...)...)}
}

func (_c *Logger_Debug_Call) Run(run func(format string, v ...interface{})) *Logger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Debug_Call) Return() *Logger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Debug_Call) RunAndReturn(run func(string, ...interface{})) *Logger_Debug_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields: format, v
func (_m *Logger) Error(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Logger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type Logger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *Logger_Expecter) Error(format interface{}, v ...interface{}) *Logger_Error_Call {
	return &Logger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{format}, v...)...)}
}

func (_c *Logger_Error_Call) Run(run func(format string, v ...interface{})) *Logger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Error_Call) Return() *Logger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Error_Call) RunAndReturn(run func(string, ...interface{})) *Logger_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Fields provides a mock function with given fields:
func (_m *Logger) Fields() map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Fields")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// Logger_Fields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fields'
type Logger_Fields_Call struct {
	*mock.Call
}

// Fields is a helper method to define mock.On call
func (_e *Logger_Expecter) Fields() *Logger_Fields_Call {
	return &Logger_Fields_Call{Call: _e.mock.On("Fields")}
}

func (_c *Logger_Fields_Call) Run(run func()) *Logger_Fields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Logger_Fields_Call) Return(_a0 map[string]interface{}) *Logger_Fields_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Logger_Fields_Call) RunAndReturn(run func() map[string]interface{}) *Logger_Fields_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: format, v
func (_m *Logger) Info(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Logger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type Logger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *Logger_Expecter) Info(format interface{}, v ...interface{}) *Logger_Info_Call {
	return &Logger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{format}, v...)...)}
}

func (_c *Logger_Info_Call) Run(run func(format string, v ...interface{})) *Logger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Info_Call) Return() *Logger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Info_Call) RunAndReturn(run func(string, ...interface{})) *Logger_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Warn provides a mock function with given fields: format, v
func (_m *Logger) Warn(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Logger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type Logger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *Logger_Expecter) Warn(format interface{}, v ...interface{}) *Logger_Warn_Call {
	return &Logger_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{format}, v...)...)}
}

func (_c *Logger_Warn_Call) Run(run func(format string, v ...interface{})) *Logger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Warn_Call) Return() *Logger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Warn_Call) RunAndReturn(run func(string, ...interface{})) *Logger_Warn_Call {
	_c.Call.Return(run)
	return _c
}

// WithField provides a mock function with given fields: key, v
func (_m *Logger) WithField(key string, v interface{}) runtime.Logger {
	ret := _m.Called(key, v)

	if len(ret) == 0 {
		panic("no return value specified for WithField")
	}

	var r0 runtime.Logger
	if rf, ok := ret.Get(0).(func(string, interface{}) runtime.Logger); ok {
		r0 = rf(key, v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtime.Logger)
		}
	}

	return r0
}

// Logger_WithField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithField'
type Logger_WithField_Call struct {
	*mock.Call
}

// WithField is a helper method to define mock.On call
//   - key string
//   - v interface{}
func (_e *Logger_Expecter) WithField(key interface{}, v interface{}) *Logger_WithField_Call {
	return &Logger_WithField_Call{Call: _e.mock.On("WithField", key, v)}
}

func (_c *Logger_WithField_Call) Run(run func(key string, v interface{})) *Logger_WithField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *Logger_WithField_Call) Return(_a0 runtime.Logger) *Logger_WithField_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Logger_WithField_Call) RunAndReturn(run func(string, interface{}) runtime.Logger) *Logger_WithField_Call {
	_c.Call.Return(run)
	return _c
}

// WithFields provides a mock function with given fields: fields
func (_m *Logger) WithFields(fields map[string]interface{}) runtime.Logger {
	ret := _m.Called(fields)

	if len(ret) == 0 {
		panic("no return value specified for WithFields")
	}

	var r0 runtime.Logger
	if rf, ok := ret.Get(0).(func(map[string]interface{}) runtime.Logger); ok {
		r0 = rf(fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtime.Logger)
		}
	}

	return r0
}

// Logger_WithFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithFields'
type Logger_WithFields_Call struct {
	*mock.Call
}

// WithFields is a helper method to define mock.On call
//   - fields map[string]interface{}
func (_e *Logger_Expecter) WithFields(fields interface{}) *Logger_WithFields_Call {
	return &Logger_WithFields_Call{Call: _e.mock.On("WithFields", fields)}
}

func (_c *Logger_WithFields_Call) Run(run func(fields map[string]interface{})) *Logger_WithFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}))
	})
	return _c
}

func (_c *Logger_WithFields_Call) Return(_a0 runtime.Logger) *Logger_WithFields_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Logger_WithFields_Call) RunAndReturn(run func(map[string]interface{}) runtime.Logger) *Logger_WithFields_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
