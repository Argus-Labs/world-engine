// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockIAPGoogleConfig is an autogenerated mock type for the IAPGoogleConfig type
type MockIAPGoogleConfig struct {
	mock.Mock
}

type MockIAPGoogleConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAPGoogleConfig) EXPECT() *MockIAPGoogleConfig_Expecter {
	return &MockIAPGoogleConfig_Expecter{mock: &_m.Mock}
}

// GetClientEmail provides a mock function with no fields
func (_m *MockIAPGoogleConfig) GetClientEmail() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClientEmail")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIAPGoogleConfig_GetClientEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientEmail'
type MockIAPGoogleConfig_GetClientEmail_Call struct {
	*mock.Call
}

// GetClientEmail is a helper method to define mock.On call
func (_e *MockIAPGoogleConfig_Expecter) GetClientEmail() *MockIAPGoogleConfig_GetClientEmail_Call {
	return &MockIAPGoogleConfig_GetClientEmail_Call{Call: _e.mock.On("GetClientEmail")}
}

func (_c *MockIAPGoogleConfig_GetClientEmail_Call) Run(run func()) *MockIAPGoogleConfig_GetClientEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIAPGoogleConfig_GetClientEmail_Call) Return(_a0 string) *MockIAPGoogleConfig_GetClientEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAPGoogleConfig_GetClientEmail_Call) RunAndReturn(run func() string) *MockIAPGoogleConfig_GetClientEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotificationsEndpointId provides a mock function with no fields
func (_m *MockIAPGoogleConfig) GetNotificationsEndpointId() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationsEndpointId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIAPGoogleConfig_GetNotificationsEndpointId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationsEndpointId'
type MockIAPGoogleConfig_GetNotificationsEndpointId_Call struct {
	*mock.Call
}

// GetNotificationsEndpointId is a helper method to define mock.On call
func (_e *MockIAPGoogleConfig_Expecter) GetNotificationsEndpointId() *MockIAPGoogleConfig_GetNotificationsEndpointId_Call {
	return &MockIAPGoogleConfig_GetNotificationsEndpointId_Call{Call: _e.mock.On("GetNotificationsEndpointId")}
}

func (_c *MockIAPGoogleConfig_GetNotificationsEndpointId_Call) Run(run func()) *MockIAPGoogleConfig_GetNotificationsEndpointId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIAPGoogleConfig_GetNotificationsEndpointId_Call) Return(_a0 string) *MockIAPGoogleConfig_GetNotificationsEndpointId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAPGoogleConfig_GetNotificationsEndpointId_Call) RunAndReturn(run func() string) *MockIAPGoogleConfig_GetNotificationsEndpointId_Call {
	_c.Call.Return(run)
	return _c
}

// GetPackageName provides a mock function with no fields
func (_m *MockIAPGoogleConfig) GetPackageName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPackageName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIAPGoogleConfig_GetPackageName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPackageName'
type MockIAPGoogleConfig_GetPackageName_Call struct {
	*mock.Call
}

// GetPackageName is a helper method to define mock.On call
func (_e *MockIAPGoogleConfig_Expecter) GetPackageName() *MockIAPGoogleConfig_GetPackageName_Call {
	return &MockIAPGoogleConfig_GetPackageName_Call{Call: _e.mock.On("GetPackageName")}
}

func (_c *MockIAPGoogleConfig_GetPackageName_Call) Run(run func()) *MockIAPGoogleConfig_GetPackageName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIAPGoogleConfig_GetPackageName_Call) Return(_a0 string) *MockIAPGoogleConfig_GetPackageName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAPGoogleConfig_GetPackageName_Call) RunAndReturn(run func() string) *MockIAPGoogleConfig_GetPackageName_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrivateKey provides a mock function with no fields
func (_m *MockIAPGoogleConfig) GetPrivateKey() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateKey")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIAPGoogleConfig_GetPrivateKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrivateKey'
type MockIAPGoogleConfig_GetPrivateKey_Call struct {
	*mock.Call
}

// GetPrivateKey is a helper method to define mock.On call
func (_e *MockIAPGoogleConfig_Expecter) GetPrivateKey() *MockIAPGoogleConfig_GetPrivateKey_Call {
	return &MockIAPGoogleConfig_GetPrivateKey_Call{Call: _e.mock.On("GetPrivateKey")}
}

func (_c *MockIAPGoogleConfig_GetPrivateKey_Call) Run(run func()) *MockIAPGoogleConfig_GetPrivateKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIAPGoogleConfig_GetPrivateKey_Call) Return(_a0 string) *MockIAPGoogleConfig_GetPrivateKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAPGoogleConfig_GetPrivateKey_Call) RunAndReturn(run func() string) *MockIAPGoogleConfig_GetPrivateKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefundCheckPeriodMin provides a mock function with no fields
func (_m *MockIAPGoogleConfig) GetRefundCheckPeriodMin() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRefundCheckPeriodMin")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockIAPGoogleConfig_GetRefundCheckPeriodMin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefundCheckPeriodMin'
type MockIAPGoogleConfig_GetRefundCheckPeriodMin_Call struct {
	*mock.Call
}

// GetRefundCheckPeriodMin is a helper method to define mock.On call
func (_e *MockIAPGoogleConfig_Expecter) GetRefundCheckPeriodMin() *MockIAPGoogleConfig_GetRefundCheckPeriodMin_Call {
	return &MockIAPGoogleConfig_GetRefundCheckPeriodMin_Call{Call: _e.mock.On("GetRefundCheckPeriodMin")}
}

func (_c *MockIAPGoogleConfig_GetRefundCheckPeriodMin_Call) Run(run func()) *MockIAPGoogleConfig_GetRefundCheckPeriodMin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIAPGoogleConfig_GetRefundCheckPeriodMin_Call) Return(_a0 int) *MockIAPGoogleConfig_GetRefundCheckPeriodMin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAPGoogleConfig_GetRefundCheckPeriodMin_Call) RunAndReturn(run func() int) *MockIAPGoogleConfig_GetRefundCheckPeriodMin_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAPGoogleConfig creates a new instance of MockIAPGoogleConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAPGoogleConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAPGoogleConfig {
	mock := &MockIAPGoogleConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
