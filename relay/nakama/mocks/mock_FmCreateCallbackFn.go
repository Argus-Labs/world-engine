// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	runtime "github.com/heroiclabs/nakama-common/runtime"
	mock "github.com/stretchr/testify/mock"
)

// MockFmCreateCallbackFn is an autogenerated mock type for the FmCreateCallbackFn type
type MockFmCreateCallbackFn struct {
	mock.Mock
}

type MockFmCreateCallbackFn_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFmCreateCallbackFn) EXPECT() *MockFmCreateCallbackFn_Expecter {
	return &MockFmCreateCallbackFn_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: status, instanceInfo, sessionInfo, metadata, err
func (_m *MockFmCreateCallbackFn) Execute(status runtime.FmCreateStatus, instanceInfo *runtime.InstanceInfo, sessionInfo []*runtime.SessionInfo, metadata map[string]interface{}, err error) {
	_m.Called(status, instanceInfo, sessionInfo, metadata, err)
}

// MockFmCreateCallbackFn_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockFmCreateCallbackFn_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - status runtime.FmCreateStatus
//   - instanceInfo *runtime.InstanceInfo
//   - sessionInfo []*runtime.SessionInfo
//   - metadata map[string]interface{}
//   - err error
func (_e *MockFmCreateCallbackFn_Expecter) Execute(status interface{}, instanceInfo interface{}, sessionInfo interface{}, metadata interface{}, err interface{}) *MockFmCreateCallbackFn_Execute_Call {
	return &MockFmCreateCallbackFn_Execute_Call{Call: _e.mock.On("Execute", status, instanceInfo, sessionInfo, metadata, err)}
}

func (_c *MockFmCreateCallbackFn_Execute_Call) Run(run func(status runtime.FmCreateStatus, instanceInfo *runtime.InstanceInfo, sessionInfo []*runtime.SessionInfo, metadata map[string]interface{}, err error)) *MockFmCreateCallbackFn_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.FmCreateStatus), args[1].(*runtime.InstanceInfo), args[2].([]*runtime.SessionInfo), args[3].(map[string]interface{}), args[4].(error))
	})
	return _c
}

func (_c *MockFmCreateCallbackFn_Execute_Call) Return() *MockFmCreateCallbackFn_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockFmCreateCallbackFn_Execute_Call) RunAndReturn(run func(runtime.FmCreateStatus, *runtime.InstanceInfo, []*runtime.SessionInfo, map[string]interface{}, error)) *MockFmCreateCallbackFn_Execute_Call {
	_c.Run(run)
	return _c
}

// NewMockFmCreateCallbackFn creates a new instance of MockFmCreateCallbackFn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFmCreateCallbackFn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFmCreateCallbackFn {
	mock := &MockFmCreateCallbackFn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
