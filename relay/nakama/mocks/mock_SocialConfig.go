// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	runtime "github.com/heroiclabs/nakama-common/runtime"
	mock "github.com/stretchr/testify/mock"
)

// MockSocialConfig is an autogenerated mock type for the SocialConfig type
type MockSocialConfig struct {
	mock.Mock
}

type MockSocialConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSocialConfig) EXPECT() *MockSocialConfig_Expecter {
	return &MockSocialConfig_Expecter{mock: &_m.Mock}
}

// GetApple provides a mock function with no fields
func (_m *MockSocialConfig) GetApple() runtime.SocialConfigApple {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetApple")
	}

	var r0 runtime.SocialConfigApple
	if rf, ok := ret.Get(0).(func() runtime.SocialConfigApple); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtime.SocialConfigApple)
		}
	}

	return r0
}

// MockSocialConfig_GetApple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApple'
type MockSocialConfig_GetApple_Call struct {
	*mock.Call
}

// GetApple is a helper method to define mock.On call
func (_e *MockSocialConfig_Expecter) GetApple() *MockSocialConfig_GetApple_Call {
	return &MockSocialConfig_GetApple_Call{Call: _e.mock.On("GetApple")}
}

func (_c *MockSocialConfig_GetApple_Call) Run(run func()) *MockSocialConfig_GetApple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSocialConfig_GetApple_Call) Return(_a0 runtime.SocialConfigApple) *MockSocialConfig_GetApple_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSocialConfig_GetApple_Call) RunAndReturn(run func() runtime.SocialConfigApple) *MockSocialConfig_GetApple_Call {
	_c.Call.Return(run)
	return _c
}

// GetFacebookInstantGame provides a mock function with no fields
func (_m *MockSocialConfig) GetFacebookInstantGame() runtime.SocialConfigFacebookInstantGame {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFacebookInstantGame")
	}

	var r0 runtime.SocialConfigFacebookInstantGame
	if rf, ok := ret.Get(0).(func() runtime.SocialConfigFacebookInstantGame); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtime.SocialConfigFacebookInstantGame)
		}
	}

	return r0
}

// MockSocialConfig_GetFacebookInstantGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFacebookInstantGame'
type MockSocialConfig_GetFacebookInstantGame_Call struct {
	*mock.Call
}

// GetFacebookInstantGame is a helper method to define mock.On call
func (_e *MockSocialConfig_Expecter) GetFacebookInstantGame() *MockSocialConfig_GetFacebookInstantGame_Call {
	return &MockSocialConfig_GetFacebookInstantGame_Call{Call: _e.mock.On("GetFacebookInstantGame")}
}

func (_c *MockSocialConfig_GetFacebookInstantGame_Call) Run(run func()) *MockSocialConfig_GetFacebookInstantGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSocialConfig_GetFacebookInstantGame_Call) Return(_a0 runtime.SocialConfigFacebookInstantGame) *MockSocialConfig_GetFacebookInstantGame_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSocialConfig_GetFacebookInstantGame_Call) RunAndReturn(run func() runtime.SocialConfigFacebookInstantGame) *MockSocialConfig_GetFacebookInstantGame_Call {
	_c.Call.Return(run)
	return _c
}

// GetFacebookLimitedLogin provides a mock function with no fields
func (_m *MockSocialConfig) GetFacebookLimitedLogin() runtime.SocialConfigFacebookLimitedLogin {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFacebookLimitedLogin")
	}

	var r0 runtime.SocialConfigFacebookLimitedLogin
	if rf, ok := ret.Get(0).(func() runtime.SocialConfigFacebookLimitedLogin); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtime.SocialConfigFacebookLimitedLogin)
		}
	}

	return r0
}

// MockSocialConfig_GetFacebookLimitedLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFacebookLimitedLogin'
type MockSocialConfig_GetFacebookLimitedLogin_Call struct {
	*mock.Call
}

// GetFacebookLimitedLogin is a helper method to define mock.On call
func (_e *MockSocialConfig_Expecter) GetFacebookLimitedLogin() *MockSocialConfig_GetFacebookLimitedLogin_Call {
	return &MockSocialConfig_GetFacebookLimitedLogin_Call{Call: _e.mock.On("GetFacebookLimitedLogin")}
}

func (_c *MockSocialConfig_GetFacebookLimitedLogin_Call) Run(run func()) *MockSocialConfig_GetFacebookLimitedLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSocialConfig_GetFacebookLimitedLogin_Call) Return(_a0 runtime.SocialConfigFacebookLimitedLogin) *MockSocialConfig_GetFacebookLimitedLogin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSocialConfig_GetFacebookLimitedLogin_Call) RunAndReturn(run func() runtime.SocialConfigFacebookLimitedLogin) *MockSocialConfig_GetFacebookLimitedLogin_Call {
	_c.Call.Return(run)
	return _c
}

// GetSteam provides a mock function with no fields
func (_m *MockSocialConfig) GetSteam() runtime.SocialConfigSteam {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSteam")
	}

	var r0 runtime.SocialConfigSteam
	if rf, ok := ret.Get(0).(func() runtime.SocialConfigSteam); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtime.SocialConfigSteam)
		}
	}

	return r0
}

// MockSocialConfig_GetSteam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSteam'
type MockSocialConfig_GetSteam_Call struct {
	*mock.Call
}

// GetSteam is a helper method to define mock.On call
func (_e *MockSocialConfig_Expecter) GetSteam() *MockSocialConfig_GetSteam_Call {
	return &MockSocialConfig_GetSteam_Call{Call: _e.mock.On("GetSteam")}
}

func (_c *MockSocialConfig_GetSteam_Call) Run(run func()) *MockSocialConfig_GetSteam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSocialConfig_GetSteam_Call) Return(_a0 runtime.SocialConfigSteam) *MockSocialConfig_GetSteam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSocialConfig_GetSteam_Call) RunAndReturn(run func() runtime.SocialConfigSteam) *MockSocialConfig_GetSteam_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSocialConfig creates a new instance of MockSocialConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSocialConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSocialConfig {
	mock := &MockSocialConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
