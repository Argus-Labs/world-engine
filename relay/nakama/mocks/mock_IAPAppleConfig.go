// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockIAPAppleConfig is an autogenerated mock type for the IAPAppleConfig type
type MockIAPAppleConfig struct {
	mock.Mock
}

type MockIAPAppleConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAPAppleConfig) EXPECT() *MockIAPAppleConfig_Expecter {
	return &MockIAPAppleConfig_Expecter{mock: &_m.Mock}
}

// GetNotificationsEndpointId provides a mock function with no fields
func (_m *MockIAPAppleConfig) GetNotificationsEndpointId() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationsEndpointId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIAPAppleConfig_GetNotificationsEndpointId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationsEndpointId'
type MockIAPAppleConfig_GetNotificationsEndpointId_Call struct {
	*mock.Call
}

// GetNotificationsEndpointId is a helper method to define mock.On call
func (_e *MockIAPAppleConfig_Expecter) GetNotificationsEndpointId() *MockIAPAppleConfig_GetNotificationsEndpointId_Call {
	return &MockIAPAppleConfig_GetNotificationsEndpointId_Call{Call: _e.mock.On("GetNotificationsEndpointId")}
}

func (_c *MockIAPAppleConfig_GetNotificationsEndpointId_Call) Run(run func()) *MockIAPAppleConfig_GetNotificationsEndpointId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIAPAppleConfig_GetNotificationsEndpointId_Call) Return(_a0 string) *MockIAPAppleConfig_GetNotificationsEndpointId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAPAppleConfig_GetNotificationsEndpointId_Call) RunAndReturn(run func() string) *MockIAPAppleConfig_GetNotificationsEndpointId_Call {
	_c.Call.Return(run)
	return _c
}

// GetSharedPassword provides a mock function with no fields
func (_m *MockIAPAppleConfig) GetSharedPassword() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSharedPassword")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIAPAppleConfig_GetSharedPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSharedPassword'
type MockIAPAppleConfig_GetSharedPassword_Call struct {
	*mock.Call
}

// GetSharedPassword is a helper method to define mock.On call
func (_e *MockIAPAppleConfig_Expecter) GetSharedPassword() *MockIAPAppleConfig_GetSharedPassword_Call {
	return &MockIAPAppleConfig_GetSharedPassword_Call{Call: _e.mock.On("GetSharedPassword")}
}

func (_c *MockIAPAppleConfig_GetSharedPassword_Call) Run(run func()) *MockIAPAppleConfig_GetSharedPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIAPAppleConfig_GetSharedPassword_Call) Return(_a0 string) *MockIAPAppleConfig_GetSharedPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAPAppleConfig_GetSharedPassword_Call) RunAndReturn(run func() string) *MockIAPAppleConfig_GetSharedPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAPAppleConfig creates a new instance of MockIAPAppleConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAPAppleConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAPAppleConfig {
	mock := &MockIAPAppleConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
