// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	runtime "github.com/heroiclabs/nakama-common/runtime"
	mock "github.com/stretchr/testify/mock"
)

// MockFleetManagerInitializer is an autogenerated mock type for the FleetManagerInitializer type
type MockFleetManagerInitializer struct {
	mock.Mock
}

type MockFleetManagerInitializer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFleetManagerInitializer) EXPECT() *MockFleetManagerInitializer_Expecter {
	return &MockFleetManagerInitializer_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, maxPlayers, userIds, latencies, metadata, callback
func (_m *MockFleetManagerInitializer) Create(ctx context.Context, maxPlayers int, userIds []string, latencies []runtime.FleetUserLatencies, metadata map[string]interface{}, callback runtime.FmCreateCallbackFn) error {
	ret := _m.Called(ctx, maxPlayers, userIds, latencies, metadata, callback)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []string, []runtime.FleetUserLatencies, map[string]interface{}, runtime.FmCreateCallbackFn) error); ok {
		r0 = rf(ctx, maxPlayers, userIds, latencies, metadata, callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFleetManagerInitializer_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockFleetManagerInitializer_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - maxPlayers int
//   - userIds []string
//   - latencies []runtime.FleetUserLatencies
//   - metadata map[string]interface{}
//   - callback runtime.FmCreateCallbackFn
func (_e *MockFleetManagerInitializer_Expecter) Create(ctx interface{}, maxPlayers interface{}, userIds interface{}, latencies interface{}, metadata interface{}, callback interface{}) *MockFleetManagerInitializer_Create_Call {
	return &MockFleetManagerInitializer_Create_Call{Call: _e.mock.On("Create", ctx, maxPlayers, userIds, latencies, metadata, callback)}
}

func (_c *MockFleetManagerInitializer_Create_Call) Run(run func(ctx context.Context, maxPlayers int, userIds []string, latencies []runtime.FleetUserLatencies, metadata map[string]interface{}, callback runtime.FmCreateCallbackFn)) *MockFleetManagerInitializer_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].([]string), args[3].([]runtime.FleetUserLatencies), args[4].(map[string]interface{}), args[5].(runtime.FmCreateCallbackFn))
	})
	return _c
}

func (_c *MockFleetManagerInitializer_Create_Call) Return(err error) *MockFleetManagerInitializer_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFleetManagerInitializer_Create_Call) RunAndReturn(run func(context.Context, int, []string, []runtime.FleetUserLatencies, map[string]interface{}, runtime.FmCreateCallbackFn) error) *MockFleetManagerInitializer_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockFleetManagerInitializer) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFleetManagerInitializer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockFleetManagerInitializer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockFleetManagerInitializer_Expecter) Delete(ctx interface{}, id interface{}) *MockFleetManagerInitializer_Delete_Call {
	return &MockFleetManagerInitializer_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockFleetManagerInitializer_Delete_Call) Run(run func(ctx context.Context, id string)) *MockFleetManagerInitializer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFleetManagerInitializer_Delete_Call) Return(_a0 error) *MockFleetManagerInitializer_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFleetManagerInitializer_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockFleetManagerInitializer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockFleetManagerInitializer) Get(ctx context.Context, id string) (*runtime.InstanceInfo, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *runtime.InstanceInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*runtime.InstanceInfo, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *runtime.InstanceInfo); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.InstanceInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFleetManagerInitializer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockFleetManagerInitializer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockFleetManagerInitializer_Expecter) Get(ctx interface{}, id interface{}) *MockFleetManagerInitializer_Get_Call {
	return &MockFleetManagerInitializer_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockFleetManagerInitializer_Get_Call) Run(run func(ctx context.Context, id string)) *MockFleetManagerInitializer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFleetManagerInitializer_Get_Call) Return(instance *runtime.InstanceInfo, err error) *MockFleetManagerInitializer_Get_Call {
	_c.Call.Return(instance, err)
	return _c
}

func (_c *MockFleetManagerInitializer_Get_Call) RunAndReturn(run func(context.Context, string) (*runtime.InstanceInfo, error)) *MockFleetManagerInitializer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: nk, callbackHandler
func (_m *MockFleetManagerInitializer) Init(nk runtime.NakamaModule, callbackHandler runtime.FmCallbackHandler) error {
	ret := _m.Called(nk, callbackHandler)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(runtime.NakamaModule, runtime.FmCallbackHandler) error); ok {
		r0 = rf(nk, callbackHandler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFleetManagerInitializer_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockFleetManagerInitializer_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - nk runtime.NakamaModule
//   - callbackHandler runtime.FmCallbackHandler
func (_e *MockFleetManagerInitializer_Expecter) Init(nk interface{}, callbackHandler interface{}) *MockFleetManagerInitializer_Init_Call {
	return &MockFleetManagerInitializer_Init_Call{Call: _e.mock.On("Init", nk, callbackHandler)}
}

func (_c *MockFleetManagerInitializer_Init_Call) Run(run func(nk runtime.NakamaModule, callbackHandler runtime.FmCallbackHandler)) *MockFleetManagerInitializer_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.NakamaModule), args[1].(runtime.FmCallbackHandler))
	})
	return _c
}

func (_c *MockFleetManagerInitializer_Init_Call) Return(_a0 error) *MockFleetManagerInitializer_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFleetManagerInitializer_Init_Call) RunAndReturn(run func(runtime.NakamaModule, runtime.FmCallbackHandler) error) *MockFleetManagerInitializer_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Join provides a mock function with given fields: ctx, id, userIds, metadata
func (_m *MockFleetManagerInitializer) Join(ctx context.Context, id string, userIds []string, metadata map[string]string) (*runtime.JoinInfo, error) {
	ret := _m.Called(ctx, id, userIds, metadata)

	if len(ret) == 0 {
		panic("no return value specified for Join")
	}

	var r0 *runtime.JoinInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, map[string]string) (*runtime.JoinInfo, error)); ok {
		return rf(ctx, id, userIds, metadata)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, map[string]string) *runtime.JoinInfo); ok {
		r0 = rf(ctx, id, userIds, metadata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.JoinInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string, map[string]string) error); ok {
		r1 = rf(ctx, id, userIds, metadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFleetManagerInitializer_Join_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Join'
type MockFleetManagerInitializer_Join_Call struct {
	*mock.Call
}

// Join is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - userIds []string
//   - metadata map[string]string
func (_e *MockFleetManagerInitializer_Expecter) Join(ctx interface{}, id interface{}, userIds interface{}, metadata interface{}) *MockFleetManagerInitializer_Join_Call {
	return &MockFleetManagerInitializer_Join_Call{Call: _e.mock.On("Join", ctx, id, userIds, metadata)}
}

func (_c *MockFleetManagerInitializer_Join_Call) Run(run func(ctx context.Context, id string, userIds []string, metadata map[string]string)) *MockFleetManagerInitializer_Join_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string), args[3].(map[string]string))
	})
	return _c
}

func (_c *MockFleetManagerInitializer_Join_Call) Return(joinInfo *runtime.JoinInfo, err error) *MockFleetManagerInitializer_Join_Call {
	_c.Call.Return(joinInfo, err)
	return _c
}

func (_c *MockFleetManagerInitializer_Join_Call) RunAndReturn(run func(context.Context, string, []string, map[string]string) (*runtime.JoinInfo, error)) *MockFleetManagerInitializer_Join_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, query, limit, previousCursor
func (_m *MockFleetManagerInitializer) List(ctx context.Context, query string, limit int, previousCursor string) ([]*runtime.InstanceInfo, string, error) {
	ret := _m.Called(ctx, query, limit, previousCursor)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*runtime.InstanceInfo
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, string) ([]*runtime.InstanceInfo, string, error)); ok {
		return rf(ctx, query, limit, previousCursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, string) []*runtime.InstanceInfo); ok {
		r0 = rf(ctx, query, limit, previousCursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*runtime.InstanceInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, string) string); ok {
		r1 = rf(ctx, query, limit, previousCursor)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, string) error); ok {
		r2 = rf(ctx, query, limit, previousCursor)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockFleetManagerInitializer_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockFleetManagerInitializer_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - limit int
//   - previousCursor string
func (_e *MockFleetManagerInitializer_Expecter) List(ctx interface{}, query interface{}, limit interface{}, previousCursor interface{}) *MockFleetManagerInitializer_List_Call {
	return &MockFleetManagerInitializer_List_Call{Call: _e.mock.On("List", ctx, query, limit, previousCursor)}
}

func (_c *MockFleetManagerInitializer_List_Call) Run(run func(ctx context.Context, query string, limit int, previousCursor string)) *MockFleetManagerInitializer_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(string))
	})
	return _c
}

func (_c *MockFleetManagerInitializer_List_Call) Return(list []*runtime.InstanceInfo, nextCursor string, err error) *MockFleetManagerInitializer_List_Call {
	_c.Call.Return(list, nextCursor, err)
	return _c
}

func (_c *MockFleetManagerInitializer_List_Call) RunAndReturn(run func(context.Context, string, int, string) ([]*runtime.InstanceInfo, string, error)) *MockFleetManagerInitializer_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, playerCount, metadata
func (_m *MockFleetManagerInitializer) Update(ctx context.Context, id string, playerCount int, metadata map[string]interface{}) error {
	ret := _m.Called(ctx, id, playerCount, metadata)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, map[string]interface{}) error); ok {
		r0 = rf(ctx, id, playerCount, metadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFleetManagerInitializer_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockFleetManagerInitializer_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - playerCount int
//   - metadata map[string]interface{}
func (_e *MockFleetManagerInitializer_Expecter) Update(ctx interface{}, id interface{}, playerCount interface{}, metadata interface{}) *MockFleetManagerInitializer_Update_Call {
	return &MockFleetManagerInitializer_Update_Call{Call: _e.mock.On("Update", ctx, id, playerCount, metadata)}
}

func (_c *MockFleetManagerInitializer_Update_Call) Run(run func(ctx context.Context, id string, playerCount int, metadata map[string]interface{})) *MockFleetManagerInitializer_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(map[string]interface{}))
	})
	return _c
}

func (_c *MockFleetManagerInitializer_Update_Call) Return(_a0 error) *MockFleetManagerInitializer_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFleetManagerInitializer_Update_Call) RunAndReturn(run func(context.Context, string, int, map[string]interface{}) error) *MockFleetManagerInitializer_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFleetManagerInitializer creates a new instance of MockFleetManagerInitializer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFleetManagerInitializer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFleetManagerInitializer {
	mock := &MockFleetManagerInitializer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
