// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	runtime "github.com/heroiclabs/nakama-common/runtime"
	mock "github.com/stretchr/testify/mock"
)

// MatchData is an autogenerated mock type for the MatchData type
type MatchData struct {
	mock.Mock
}

type MatchData_Expecter struct {
	mock *mock.Mock
}

func (_m *MatchData) EXPECT() *MatchData_Expecter {
	return &MatchData_Expecter{mock: &_m.Mock}
}

// GetData provides a mock function with given fields:
func (_m *MatchData) GetData() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetData")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MatchData_GetData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetData'
type MatchData_GetData_Call struct {
	*mock.Call
}

// GetData is a helper method to define mock.On call
func (_e *MatchData_Expecter) GetData() *MatchData_GetData_Call {
	return &MatchData_GetData_Call{Call: _e.mock.On("GetData")}
}

func (_c *MatchData_GetData_Call) Run(run func()) *MatchData_GetData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MatchData_GetData_Call) Return(_a0 []byte) *MatchData_GetData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MatchData_GetData_Call) RunAndReturn(run func() []byte) *MatchData_GetData_Call {
	_c.Call.Return(run)
	return _c
}

// GetHidden provides a mock function with given fields:
func (_m *MatchData) GetHidden() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHidden")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MatchData_GetHidden_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHidden'
type MatchData_GetHidden_Call struct {
	*mock.Call
}

// GetHidden is a helper method to define mock.On call
func (_e *MatchData_Expecter) GetHidden() *MatchData_GetHidden_Call {
	return &MatchData_GetHidden_Call{Call: _e.mock.On("GetHidden")}
}

func (_c *MatchData_GetHidden_Call) Run(run func()) *MatchData_GetHidden_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MatchData_GetHidden_Call) Return(_a0 bool) *MatchData_GetHidden_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MatchData_GetHidden_Call) RunAndReturn(run func() bool) *MatchData_GetHidden_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeId provides a mock function with given fields:
func (_m *MatchData) GetNodeId() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNodeId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MatchData_GetNodeId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeId'
type MatchData_GetNodeId_Call struct {
	*mock.Call
}

// GetNodeId is a helper method to define mock.On call
func (_e *MatchData_Expecter) GetNodeId() *MatchData_GetNodeId_Call {
	return &MatchData_GetNodeId_Call{Call: _e.mock.On("GetNodeId")}
}

func (_c *MatchData_GetNodeId_Call) Run(run func()) *MatchData_GetNodeId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MatchData_GetNodeId_Call) Return(_a0 string) *MatchData_GetNodeId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MatchData_GetNodeId_Call) RunAndReturn(run func() string) *MatchData_GetNodeId_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpCode provides a mock function with given fields:
func (_m *MatchData) GetOpCode() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOpCode")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MatchData_GetOpCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpCode'
type MatchData_GetOpCode_Call struct {
	*mock.Call
}

// GetOpCode is a helper method to define mock.On call
func (_e *MatchData_Expecter) GetOpCode() *MatchData_GetOpCode_Call {
	return &MatchData_GetOpCode_Call{Call: _e.mock.On("GetOpCode")}
}

func (_c *MatchData_GetOpCode_Call) Run(run func()) *MatchData_GetOpCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MatchData_GetOpCode_Call) Return(_a0 int64) *MatchData_GetOpCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MatchData_GetOpCode_Call) RunAndReturn(run func() int64) *MatchData_GetOpCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersistence provides a mock function with given fields:
func (_m *MatchData) GetPersistence() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPersistence")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MatchData_GetPersistence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersistence'
type MatchData_GetPersistence_Call struct {
	*mock.Call
}

// GetPersistence is a helper method to define mock.On call
func (_e *MatchData_Expecter) GetPersistence() *MatchData_GetPersistence_Call {
	return &MatchData_GetPersistence_Call{Call: _e.mock.On("GetPersistence")}
}

func (_c *MatchData_GetPersistence_Call) Run(run func()) *MatchData_GetPersistence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MatchData_GetPersistence_Call) Return(_a0 bool) *MatchData_GetPersistence_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MatchData_GetPersistence_Call) RunAndReturn(run func() bool) *MatchData_GetPersistence_Call {
	_c.Call.Return(run)
	return _c
}

// GetReason provides a mock function with given fields:
func (_m *MatchData) GetReason() runtime.PresenceReason {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetReason")
	}

	var r0 runtime.PresenceReason
	if rf, ok := ret.Get(0).(func() runtime.PresenceReason); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(runtime.PresenceReason)
	}

	return r0
}

// MatchData_GetReason_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReason'
type MatchData_GetReason_Call struct {
	*mock.Call
}

// GetReason is a helper method to define mock.On call
func (_e *MatchData_Expecter) GetReason() *MatchData_GetReason_Call {
	return &MatchData_GetReason_Call{Call: _e.mock.On("GetReason")}
}

func (_c *MatchData_GetReason_Call) Run(run func()) *MatchData_GetReason_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MatchData_GetReason_Call) Return(_a0 runtime.PresenceReason) *MatchData_GetReason_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MatchData_GetReason_Call) RunAndReturn(run func() runtime.PresenceReason) *MatchData_GetReason_Call {
	_c.Call.Return(run)
	return _c
}

// GetReceiveTime provides a mock function with given fields:
func (_m *MatchData) GetReceiveTime() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetReceiveTime")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MatchData_GetReceiveTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReceiveTime'
type MatchData_GetReceiveTime_Call struct {
	*mock.Call
}

// GetReceiveTime is a helper method to define mock.On call
func (_e *MatchData_Expecter) GetReceiveTime() *MatchData_GetReceiveTime_Call {
	return &MatchData_GetReceiveTime_Call{Call: _e.mock.On("GetReceiveTime")}
}

func (_c *MatchData_GetReceiveTime_Call) Run(run func()) *MatchData_GetReceiveTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MatchData_GetReceiveTime_Call) Return(_a0 int64) *MatchData_GetReceiveTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MatchData_GetReceiveTime_Call) RunAndReturn(run func() int64) *MatchData_GetReceiveTime_Call {
	_c.Call.Return(run)
	return _c
}

// GetReliable provides a mock function with given fields:
func (_m *MatchData) GetReliable() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetReliable")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MatchData_GetReliable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReliable'
type MatchData_GetReliable_Call struct {
	*mock.Call
}

// GetReliable is a helper method to define mock.On call
func (_e *MatchData_Expecter) GetReliable() *MatchData_GetReliable_Call {
	return &MatchData_GetReliable_Call{Call: _e.mock.On("GetReliable")}
}

func (_c *MatchData_GetReliable_Call) Run(run func()) *MatchData_GetReliable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MatchData_GetReliable_Call) Return(_a0 bool) *MatchData_GetReliable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MatchData_GetReliable_Call) RunAndReturn(run func() bool) *MatchData_GetReliable_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessionId provides a mock function with given fields:
func (_m *MatchData) GetSessionId() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSessionId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MatchData_GetSessionId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionId'
type MatchData_GetSessionId_Call struct {
	*mock.Call
}

// GetSessionId is a helper method to define mock.On call
func (_e *MatchData_Expecter) GetSessionId() *MatchData_GetSessionId_Call {
	return &MatchData_GetSessionId_Call{Call: _e.mock.On("GetSessionId")}
}

func (_c *MatchData_GetSessionId_Call) Run(run func()) *MatchData_GetSessionId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MatchData_GetSessionId_Call) Return(_a0 string) *MatchData_GetSessionId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MatchData_GetSessionId_Call) RunAndReturn(run func() string) *MatchData_GetSessionId_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatus provides a mock function with given fields:
func (_m *MatchData) GetStatus() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStatus")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MatchData_GetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatus'
type MatchData_GetStatus_Call struct {
	*mock.Call
}

// GetStatus is a helper method to define mock.On call
func (_e *MatchData_Expecter) GetStatus() *MatchData_GetStatus_Call {
	return &MatchData_GetStatus_Call{Call: _e.mock.On("GetStatus")}
}

func (_c *MatchData_GetStatus_Call) Run(run func()) *MatchData_GetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MatchData_GetStatus_Call) Return(_a0 string) *MatchData_GetStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MatchData_GetStatus_Call) RunAndReturn(run func() string) *MatchData_GetStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserId provides a mock function with given fields:
func (_m *MatchData) GetUserId() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUserId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MatchData_GetUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserId'
type MatchData_GetUserId_Call struct {
	*mock.Call
}

// GetUserId is a helper method to define mock.On call
func (_e *MatchData_Expecter) GetUserId() *MatchData_GetUserId_Call {
	return &MatchData_GetUserId_Call{Call: _e.mock.On("GetUserId")}
}

func (_c *MatchData_GetUserId_Call) Run(run func()) *MatchData_GetUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MatchData_GetUserId_Call) Return(_a0 string) *MatchData_GetUserId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MatchData_GetUserId_Call) RunAndReturn(run func() string) *MatchData_GetUserId_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsername provides a mock function with given fields:
func (_m *MatchData) GetUsername() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUsername")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MatchData_GetUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsername'
type MatchData_GetUsername_Call struct {
	*mock.Call
}

// GetUsername is a helper method to define mock.On call
func (_e *MatchData_Expecter) GetUsername() *MatchData_GetUsername_Call {
	return &MatchData_GetUsername_Call{Call: _e.mock.On("GetUsername")}
}

func (_c *MatchData_GetUsername_Call) Run(run func()) *MatchData_GetUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MatchData_GetUsername_Call) Return(_a0 string) *MatchData_GetUsername_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MatchData_GetUsername_Call) RunAndReturn(run func() string) *MatchData_GetUsername_Call {
	_c.Call.Return(run)
	return _c
}

// NewMatchData creates a new instance of MatchData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMatchData(t interface {
	mock.TestingT
	Cleanup(func())
}) *MatchData {
	mock := &MatchData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
