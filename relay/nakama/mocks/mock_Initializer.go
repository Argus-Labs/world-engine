// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/heroiclabs/nakama-common/api"

	mock "github.com/stretchr/testify/mock"

	rtapi "github.com/heroiclabs/nakama-common/rtapi"

	runtime "github.com/heroiclabs/nakama-common/runtime"

	sql "database/sql"
)

// Initializer is an autogenerated mock type for the Initializer type
type Initializer struct {
	mock.Mock
}

type Initializer_Expecter struct {
	mock *mock.Mock
}

func (_m *Initializer) EXPECT() *Initializer_Expecter {
	return &Initializer_Expecter{mock: &_m.Mock}
}

// RegisterAfterAddFriends provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterAddFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddFriendsRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterAddFriends")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddFriendsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterAddFriends_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterAddFriends'
type Initializer_RegisterAfterAddFriends_Call struct {
	*mock.Call
}

// RegisterAfterAddFriends is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AddFriendsRequest) error
func (_e *Initializer_Expecter) RegisterAfterAddFriends(fn interface{}) *Initializer_RegisterAfterAddFriends_Call {
	return &Initializer_RegisterAfterAddFriends_Call{Call: _e.mock.On("RegisterAfterAddFriends", fn)}
}

func (_c *Initializer_RegisterAfterAddFriends_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddFriendsRequest) error)) *Initializer_RegisterAfterAddFriends_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddFriendsRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterAddFriends_Call) Return(_a0 error) *Initializer_RegisterAfterAddFriends_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterAddFriends_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddFriendsRequest) error) error) *Initializer_RegisterAfterAddFriends_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterAddGroupUsers provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterAddGroupUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddGroupUsersRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterAddGroupUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddGroupUsersRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterAddGroupUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterAddGroupUsers'
type Initializer_RegisterAfterAddGroupUsers_Call struct {
	*mock.Call
}

// RegisterAfterAddGroupUsers is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AddGroupUsersRequest) error
func (_e *Initializer_Expecter) RegisterAfterAddGroupUsers(fn interface{}) *Initializer_RegisterAfterAddGroupUsers_Call {
	return &Initializer_RegisterAfterAddGroupUsers_Call{Call: _e.mock.On("RegisterAfterAddGroupUsers", fn)}
}

func (_c *Initializer_RegisterAfterAddGroupUsers_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddGroupUsersRequest) error)) *Initializer_RegisterAfterAddGroupUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddGroupUsersRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterAddGroupUsers_Call) Return(_a0 error) *Initializer_RegisterAfterAddGroupUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterAddGroupUsers_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddGroupUsersRequest) error) error) *Initializer_RegisterAfterAddGroupUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterAuthenticateApple provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterAuthenticateApple(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateAppleRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterAuthenticateApple")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateAppleRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterAuthenticateApple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterAuthenticateApple'
type Initializer_RegisterAfterAuthenticateApple_Call struct {
	*mock.Call
}

// RegisterAfterAuthenticateApple is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.Session , *api.AuthenticateAppleRequest) error
func (_e *Initializer_Expecter) RegisterAfterAuthenticateApple(fn interface{}) *Initializer_RegisterAfterAuthenticateApple_Call {
	return &Initializer_RegisterAfterAuthenticateApple_Call{Call: _e.mock.On("RegisterAfterAuthenticateApple", fn)}
}

func (_c *Initializer_RegisterAfterAuthenticateApple_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateAppleRequest) error)) *Initializer_RegisterAfterAuthenticateApple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateAppleRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterAuthenticateApple_Call) Return(_a0 error) *Initializer_RegisterAfterAuthenticateApple_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterAuthenticateApple_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateAppleRequest) error) error) *Initializer_RegisterAfterAuthenticateApple_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterAuthenticateCustom provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterAuthenticateCustom(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateCustomRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterAuthenticateCustom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateCustomRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterAuthenticateCustom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterAuthenticateCustom'
type Initializer_RegisterAfterAuthenticateCustom_Call struct {
	*mock.Call
}

// RegisterAfterAuthenticateCustom is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.Session , *api.AuthenticateCustomRequest) error
func (_e *Initializer_Expecter) RegisterAfterAuthenticateCustom(fn interface{}) *Initializer_RegisterAfterAuthenticateCustom_Call {
	return &Initializer_RegisterAfterAuthenticateCustom_Call{Call: _e.mock.On("RegisterAfterAuthenticateCustom", fn)}
}

func (_c *Initializer_RegisterAfterAuthenticateCustom_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateCustomRequest) error)) *Initializer_RegisterAfterAuthenticateCustom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateCustomRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterAuthenticateCustom_Call) Return(_a0 error) *Initializer_RegisterAfterAuthenticateCustom_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterAuthenticateCustom_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateCustomRequest) error) error) *Initializer_RegisterAfterAuthenticateCustom_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterAuthenticateDevice provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterAuthenticateDevice(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateDeviceRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterAuthenticateDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateDeviceRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterAuthenticateDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterAuthenticateDevice'
type Initializer_RegisterAfterAuthenticateDevice_Call struct {
	*mock.Call
}

// RegisterAfterAuthenticateDevice is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.Session , *api.AuthenticateDeviceRequest) error
func (_e *Initializer_Expecter) RegisterAfterAuthenticateDevice(fn interface{}) *Initializer_RegisterAfterAuthenticateDevice_Call {
	return &Initializer_RegisterAfterAuthenticateDevice_Call{Call: _e.mock.On("RegisterAfterAuthenticateDevice", fn)}
}

func (_c *Initializer_RegisterAfterAuthenticateDevice_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateDeviceRequest) error)) *Initializer_RegisterAfterAuthenticateDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateDeviceRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterAuthenticateDevice_Call) Return(_a0 error) *Initializer_RegisterAfterAuthenticateDevice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterAuthenticateDevice_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateDeviceRequest) error) error) *Initializer_RegisterAfterAuthenticateDevice_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterAuthenticateEmail provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterAuthenticateEmail(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateEmailRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterAuthenticateEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateEmailRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterAuthenticateEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterAuthenticateEmail'
type Initializer_RegisterAfterAuthenticateEmail_Call struct {
	*mock.Call
}

// RegisterAfterAuthenticateEmail is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.Session , *api.AuthenticateEmailRequest) error
func (_e *Initializer_Expecter) RegisterAfterAuthenticateEmail(fn interface{}) *Initializer_RegisterAfterAuthenticateEmail_Call {
	return &Initializer_RegisterAfterAuthenticateEmail_Call{Call: _e.mock.On("RegisterAfterAuthenticateEmail", fn)}
}

func (_c *Initializer_RegisterAfterAuthenticateEmail_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateEmailRequest) error)) *Initializer_RegisterAfterAuthenticateEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateEmailRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterAuthenticateEmail_Call) Return(_a0 error) *Initializer_RegisterAfterAuthenticateEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterAuthenticateEmail_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateEmailRequest) error) error) *Initializer_RegisterAfterAuthenticateEmail_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterAuthenticateFacebook provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterAuthenticateFacebook(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateFacebookRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterAuthenticateFacebook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateFacebookRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterAuthenticateFacebook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterAuthenticateFacebook'
type Initializer_RegisterAfterAuthenticateFacebook_Call struct {
	*mock.Call
}

// RegisterAfterAuthenticateFacebook is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.Session , *api.AuthenticateFacebookRequest) error
func (_e *Initializer_Expecter) RegisterAfterAuthenticateFacebook(fn interface{}) *Initializer_RegisterAfterAuthenticateFacebook_Call {
	return &Initializer_RegisterAfterAuthenticateFacebook_Call{Call: _e.mock.On("RegisterAfterAuthenticateFacebook", fn)}
}

func (_c *Initializer_RegisterAfterAuthenticateFacebook_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateFacebookRequest) error)) *Initializer_RegisterAfterAuthenticateFacebook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateFacebookRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterAuthenticateFacebook_Call) Return(_a0 error) *Initializer_RegisterAfterAuthenticateFacebook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterAuthenticateFacebook_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateFacebookRequest) error) error) *Initializer_RegisterAfterAuthenticateFacebook_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterAuthenticateFacebookInstantGame provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterAuthenticateFacebookInstantGame(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateFacebookInstantGameRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterAuthenticateFacebookInstantGame")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateFacebookInstantGameRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterAuthenticateFacebookInstantGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterAuthenticateFacebookInstantGame'
type Initializer_RegisterAfterAuthenticateFacebookInstantGame_Call struct {
	*mock.Call
}

// RegisterAfterAuthenticateFacebookInstantGame is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.Session , *api.AuthenticateFacebookInstantGameRequest) error
func (_e *Initializer_Expecter) RegisterAfterAuthenticateFacebookInstantGame(fn interface{}) *Initializer_RegisterAfterAuthenticateFacebookInstantGame_Call {
	return &Initializer_RegisterAfterAuthenticateFacebookInstantGame_Call{Call: _e.mock.On("RegisterAfterAuthenticateFacebookInstantGame", fn)}
}

func (_c *Initializer_RegisterAfterAuthenticateFacebookInstantGame_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateFacebookInstantGameRequest) error)) *Initializer_RegisterAfterAuthenticateFacebookInstantGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateFacebookInstantGameRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterAuthenticateFacebookInstantGame_Call) Return(_a0 error) *Initializer_RegisterAfterAuthenticateFacebookInstantGame_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterAuthenticateFacebookInstantGame_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateFacebookInstantGameRequest) error) error) *Initializer_RegisterAfterAuthenticateFacebookInstantGame_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterAuthenticateGameCenter provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterAuthenticateGameCenter(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateGameCenterRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterAuthenticateGameCenter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateGameCenterRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterAuthenticateGameCenter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterAuthenticateGameCenter'
type Initializer_RegisterAfterAuthenticateGameCenter_Call struct {
	*mock.Call
}

// RegisterAfterAuthenticateGameCenter is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.Session , *api.AuthenticateGameCenterRequest) error
func (_e *Initializer_Expecter) RegisterAfterAuthenticateGameCenter(fn interface{}) *Initializer_RegisterAfterAuthenticateGameCenter_Call {
	return &Initializer_RegisterAfterAuthenticateGameCenter_Call{Call: _e.mock.On("RegisterAfterAuthenticateGameCenter", fn)}
}

func (_c *Initializer_RegisterAfterAuthenticateGameCenter_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateGameCenterRequest) error)) *Initializer_RegisterAfterAuthenticateGameCenter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateGameCenterRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterAuthenticateGameCenter_Call) Return(_a0 error) *Initializer_RegisterAfterAuthenticateGameCenter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterAuthenticateGameCenter_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateGameCenterRequest) error) error) *Initializer_RegisterAfterAuthenticateGameCenter_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterAuthenticateGoogle provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterAuthenticateGoogle(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateGoogleRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterAuthenticateGoogle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateGoogleRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterAuthenticateGoogle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterAuthenticateGoogle'
type Initializer_RegisterAfterAuthenticateGoogle_Call struct {
	*mock.Call
}

// RegisterAfterAuthenticateGoogle is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.Session , *api.AuthenticateGoogleRequest) error
func (_e *Initializer_Expecter) RegisterAfterAuthenticateGoogle(fn interface{}) *Initializer_RegisterAfterAuthenticateGoogle_Call {
	return &Initializer_RegisterAfterAuthenticateGoogle_Call{Call: _e.mock.On("RegisterAfterAuthenticateGoogle", fn)}
}

func (_c *Initializer_RegisterAfterAuthenticateGoogle_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateGoogleRequest) error)) *Initializer_RegisterAfterAuthenticateGoogle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateGoogleRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterAuthenticateGoogle_Call) Return(_a0 error) *Initializer_RegisterAfterAuthenticateGoogle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterAuthenticateGoogle_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateGoogleRequest) error) error) *Initializer_RegisterAfterAuthenticateGoogle_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterAuthenticateSteam provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterAuthenticateSteam(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateSteamRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterAuthenticateSteam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateSteamRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterAuthenticateSteam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterAuthenticateSteam'
type Initializer_RegisterAfterAuthenticateSteam_Call struct {
	*mock.Call
}

// RegisterAfterAuthenticateSteam is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.Session , *api.AuthenticateSteamRequest) error
func (_e *Initializer_Expecter) RegisterAfterAuthenticateSteam(fn interface{}) *Initializer_RegisterAfterAuthenticateSteam_Call {
	return &Initializer_RegisterAfterAuthenticateSteam_Call{Call: _e.mock.On("RegisterAfterAuthenticateSteam", fn)}
}

func (_c *Initializer_RegisterAfterAuthenticateSteam_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateSteamRequest) error)) *Initializer_RegisterAfterAuthenticateSteam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateSteamRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterAuthenticateSteam_Call) Return(_a0 error) *Initializer_RegisterAfterAuthenticateSteam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterAuthenticateSteam_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateSteamRequest) error) error) *Initializer_RegisterAfterAuthenticateSteam_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterBanGroupUsers provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterBanGroupUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BanGroupUsersRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterBanGroupUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BanGroupUsersRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterBanGroupUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterBanGroupUsers'
type Initializer_RegisterAfterBanGroupUsers_Call struct {
	*mock.Call
}

// RegisterAfterBanGroupUsers is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.BanGroupUsersRequest) error
func (_e *Initializer_Expecter) RegisterAfterBanGroupUsers(fn interface{}) *Initializer_RegisterAfterBanGroupUsers_Call {
	return &Initializer_RegisterAfterBanGroupUsers_Call{Call: _e.mock.On("RegisterAfterBanGroupUsers", fn)}
}

func (_c *Initializer_RegisterAfterBanGroupUsers_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BanGroupUsersRequest) error)) *Initializer_RegisterAfterBanGroupUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BanGroupUsersRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterBanGroupUsers_Call) Return(_a0 error) *Initializer_RegisterAfterBanGroupUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterBanGroupUsers_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BanGroupUsersRequest) error) error) *Initializer_RegisterAfterBanGroupUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterBlockFriends provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterBlockFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BlockFriendsRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterBlockFriends")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BlockFriendsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterBlockFriends_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterBlockFriends'
type Initializer_RegisterAfterBlockFriends_Call struct {
	*mock.Call
}

// RegisterAfterBlockFriends is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.BlockFriendsRequest) error
func (_e *Initializer_Expecter) RegisterAfterBlockFriends(fn interface{}) *Initializer_RegisterAfterBlockFriends_Call {
	return &Initializer_RegisterAfterBlockFriends_Call{Call: _e.mock.On("RegisterAfterBlockFriends", fn)}
}

func (_c *Initializer_RegisterAfterBlockFriends_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BlockFriendsRequest) error)) *Initializer_RegisterAfterBlockFriends_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BlockFriendsRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterBlockFriends_Call) Return(_a0 error) *Initializer_RegisterAfterBlockFriends_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterBlockFriends_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BlockFriendsRequest) error) error) *Initializer_RegisterAfterBlockFriends_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterCreateGroup provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterCreateGroup(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Group, *api.CreateGroupRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterCreateGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Group, *api.CreateGroupRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterCreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterCreateGroup'
type Initializer_RegisterAfterCreateGroup_Call struct {
	*mock.Call
}

// RegisterAfterCreateGroup is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.Group , *api.CreateGroupRequest) error
func (_e *Initializer_Expecter) RegisterAfterCreateGroup(fn interface{}) *Initializer_RegisterAfterCreateGroup_Call {
	return &Initializer_RegisterAfterCreateGroup_Call{Call: _e.mock.On("RegisterAfterCreateGroup", fn)}
}

func (_c *Initializer_RegisterAfterCreateGroup_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Group, *api.CreateGroupRequest) error)) *Initializer_RegisterAfterCreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Group, *api.CreateGroupRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterCreateGroup_Call) Return(_a0 error) *Initializer_RegisterAfterCreateGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterCreateGroup_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Group, *api.CreateGroupRequest) error) error) *Initializer_RegisterAfterCreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterDeleteAccount provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterDeleteAccount(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterDeleteAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterDeleteAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterDeleteAccount'
type Initializer_RegisterAfterDeleteAccount_Call struct {
	*mock.Call
}

// RegisterAfterDeleteAccount is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule) error
func (_e *Initializer_Expecter) RegisterAfterDeleteAccount(fn interface{}) *Initializer_RegisterAfterDeleteAccount_Call {
	return &Initializer_RegisterAfterDeleteAccount_Call{Call: _e.mock.On("RegisterAfterDeleteAccount", fn)}
}

func (_c *Initializer_RegisterAfterDeleteAccount_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) error)) *Initializer_RegisterAfterDeleteAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterDeleteAccount_Call) Return(_a0 error) *Initializer_RegisterAfterDeleteAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterDeleteAccount_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) error) error) *Initializer_RegisterAfterDeleteAccount_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterDeleteFriends provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterDeleteFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteFriendsRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterDeleteFriends")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteFriendsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterDeleteFriends_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterDeleteFriends'
type Initializer_RegisterAfterDeleteFriends_Call struct {
	*mock.Call
}

// RegisterAfterDeleteFriends is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.DeleteFriendsRequest) error
func (_e *Initializer_Expecter) RegisterAfterDeleteFriends(fn interface{}) *Initializer_RegisterAfterDeleteFriends_Call {
	return &Initializer_RegisterAfterDeleteFriends_Call{Call: _e.mock.On("RegisterAfterDeleteFriends", fn)}
}

func (_c *Initializer_RegisterAfterDeleteFriends_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteFriendsRequest) error)) *Initializer_RegisterAfterDeleteFriends_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteFriendsRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterDeleteFriends_Call) Return(_a0 error) *Initializer_RegisterAfterDeleteFriends_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterDeleteFriends_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteFriendsRequest) error) error) *Initializer_RegisterAfterDeleteFriends_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterDeleteGroup provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterDeleteGroup(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteGroupRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterDeleteGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteGroupRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterDeleteGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterDeleteGroup'
type Initializer_RegisterAfterDeleteGroup_Call struct {
	*mock.Call
}

// RegisterAfterDeleteGroup is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.DeleteGroupRequest) error
func (_e *Initializer_Expecter) RegisterAfterDeleteGroup(fn interface{}) *Initializer_RegisterAfterDeleteGroup_Call {
	return &Initializer_RegisterAfterDeleteGroup_Call{Call: _e.mock.On("RegisterAfterDeleteGroup", fn)}
}

func (_c *Initializer_RegisterAfterDeleteGroup_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteGroupRequest) error)) *Initializer_RegisterAfterDeleteGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteGroupRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterDeleteGroup_Call) Return(_a0 error) *Initializer_RegisterAfterDeleteGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterDeleteGroup_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteGroupRequest) error) error) *Initializer_RegisterAfterDeleteGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterDeleteLeaderboardRecord provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterDeleteLeaderboardRecord(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteLeaderboardRecordRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterDeleteLeaderboardRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteLeaderboardRecordRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterDeleteLeaderboardRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterDeleteLeaderboardRecord'
type Initializer_RegisterAfterDeleteLeaderboardRecord_Call struct {
	*mock.Call
}

// RegisterAfterDeleteLeaderboardRecord is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.DeleteLeaderboardRecordRequest) error
func (_e *Initializer_Expecter) RegisterAfterDeleteLeaderboardRecord(fn interface{}) *Initializer_RegisterAfterDeleteLeaderboardRecord_Call {
	return &Initializer_RegisterAfterDeleteLeaderboardRecord_Call{Call: _e.mock.On("RegisterAfterDeleteLeaderboardRecord", fn)}
}

func (_c *Initializer_RegisterAfterDeleteLeaderboardRecord_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteLeaderboardRecordRequest) error)) *Initializer_RegisterAfterDeleteLeaderboardRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteLeaderboardRecordRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterDeleteLeaderboardRecord_Call) Return(_a0 error) *Initializer_RegisterAfterDeleteLeaderboardRecord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterDeleteLeaderboardRecord_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteLeaderboardRecordRequest) error) error) *Initializer_RegisterAfterDeleteLeaderboardRecord_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterDeleteNotifications provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterDeleteNotifications(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteNotificationsRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterDeleteNotifications")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteNotificationsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterDeleteNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterDeleteNotifications'
type Initializer_RegisterAfterDeleteNotifications_Call struct {
	*mock.Call
}

// RegisterAfterDeleteNotifications is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.DeleteNotificationsRequest) error
func (_e *Initializer_Expecter) RegisterAfterDeleteNotifications(fn interface{}) *Initializer_RegisterAfterDeleteNotifications_Call {
	return &Initializer_RegisterAfterDeleteNotifications_Call{Call: _e.mock.On("RegisterAfterDeleteNotifications", fn)}
}

func (_c *Initializer_RegisterAfterDeleteNotifications_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteNotificationsRequest) error)) *Initializer_RegisterAfterDeleteNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteNotificationsRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterDeleteNotifications_Call) Return(_a0 error) *Initializer_RegisterAfterDeleteNotifications_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterDeleteNotifications_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteNotificationsRequest) error) error) *Initializer_RegisterAfterDeleteNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterDeleteStorageObjects provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterDeleteStorageObjects(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteStorageObjectsRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterDeleteStorageObjects")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteStorageObjectsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterDeleteStorageObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterDeleteStorageObjects'
type Initializer_RegisterAfterDeleteStorageObjects_Call struct {
	*mock.Call
}

// RegisterAfterDeleteStorageObjects is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.DeleteStorageObjectsRequest) error
func (_e *Initializer_Expecter) RegisterAfterDeleteStorageObjects(fn interface{}) *Initializer_RegisterAfterDeleteStorageObjects_Call {
	return &Initializer_RegisterAfterDeleteStorageObjects_Call{Call: _e.mock.On("RegisterAfterDeleteStorageObjects", fn)}
}

func (_c *Initializer_RegisterAfterDeleteStorageObjects_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteStorageObjectsRequest) error)) *Initializer_RegisterAfterDeleteStorageObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteStorageObjectsRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterDeleteStorageObjects_Call) Return(_a0 error) *Initializer_RegisterAfterDeleteStorageObjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterDeleteStorageObjects_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteStorageObjectsRequest) error) error) *Initializer_RegisterAfterDeleteStorageObjects_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterDeleteTournamentRecord provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterDeleteTournamentRecord(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteTournamentRecordRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterDeleteTournamentRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteTournamentRecordRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterDeleteTournamentRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterDeleteTournamentRecord'
type Initializer_RegisterAfterDeleteTournamentRecord_Call struct {
	*mock.Call
}

// RegisterAfterDeleteTournamentRecord is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.DeleteTournamentRecordRequest) error
func (_e *Initializer_Expecter) RegisterAfterDeleteTournamentRecord(fn interface{}) *Initializer_RegisterAfterDeleteTournamentRecord_Call {
	return &Initializer_RegisterAfterDeleteTournamentRecord_Call{Call: _e.mock.On("RegisterAfterDeleteTournamentRecord", fn)}
}

func (_c *Initializer_RegisterAfterDeleteTournamentRecord_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteTournamentRecordRequest) error)) *Initializer_RegisterAfterDeleteTournamentRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteTournamentRecordRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterDeleteTournamentRecord_Call) Return(_a0 error) *Initializer_RegisterAfterDeleteTournamentRecord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterDeleteTournamentRecord_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteTournamentRecordRequest) error) error) *Initializer_RegisterAfterDeleteTournamentRecord_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterDemoteGroupUsers provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterDemoteGroupUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DemoteGroupUsersRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterDemoteGroupUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DemoteGroupUsersRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterDemoteGroupUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterDemoteGroupUsers'
type Initializer_RegisterAfterDemoteGroupUsers_Call struct {
	*mock.Call
}

// RegisterAfterDemoteGroupUsers is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.DemoteGroupUsersRequest) error
func (_e *Initializer_Expecter) RegisterAfterDemoteGroupUsers(fn interface{}) *Initializer_RegisterAfterDemoteGroupUsers_Call {
	return &Initializer_RegisterAfterDemoteGroupUsers_Call{Call: _e.mock.On("RegisterAfterDemoteGroupUsers", fn)}
}

func (_c *Initializer_RegisterAfterDemoteGroupUsers_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DemoteGroupUsersRequest) error)) *Initializer_RegisterAfterDemoteGroupUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DemoteGroupUsersRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterDemoteGroupUsers_Call) Return(_a0 error) *Initializer_RegisterAfterDemoteGroupUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterDemoteGroupUsers_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DemoteGroupUsersRequest) error) error) *Initializer_RegisterAfterDemoteGroupUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterGetAccount provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterGetAccount(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Account) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterGetAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Account) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterGetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterGetAccount'
type Initializer_RegisterAfterGetAccount_Call struct {
	*mock.Call
}

// RegisterAfterGetAccount is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.Account) error
func (_e *Initializer_Expecter) RegisterAfterGetAccount(fn interface{}) *Initializer_RegisterAfterGetAccount_Call {
	return &Initializer_RegisterAfterGetAccount_Call{Call: _e.mock.On("RegisterAfterGetAccount", fn)}
}

func (_c *Initializer_RegisterAfterGetAccount_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Account) error)) *Initializer_RegisterAfterGetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Account) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterGetAccount_Call) Return(_a0 error) *Initializer_RegisterAfterGetAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterGetAccount_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Account) error) error) *Initializer_RegisterAfterGetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterGetSubscription provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterGetSubscription(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedSubscription, *api.GetSubscriptionRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterGetSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedSubscription, *api.GetSubscriptionRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterGetSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterGetSubscription'
type Initializer_RegisterAfterGetSubscription_Call struct {
	*mock.Call
}

// RegisterAfterGetSubscription is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ValidatedSubscription , *api.GetSubscriptionRequest) error
func (_e *Initializer_Expecter) RegisterAfterGetSubscription(fn interface{}) *Initializer_RegisterAfterGetSubscription_Call {
	return &Initializer_RegisterAfterGetSubscription_Call{Call: _e.mock.On("RegisterAfterGetSubscription", fn)}
}

func (_c *Initializer_RegisterAfterGetSubscription_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedSubscription, *api.GetSubscriptionRequest) error)) *Initializer_RegisterAfterGetSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedSubscription, *api.GetSubscriptionRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterGetSubscription_Call) Return(_a0 error) *Initializer_RegisterAfterGetSubscription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterGetSubscription_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedSubscription, *api.GetSubscriptionRequest) error) error) *Initializer_RegisterAfterGetSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterGetUsers provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterGetUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Users, *api.GetUsersRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterGetUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Users, *api.GetUsersRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterGetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterGetUsers'
type Initializer_RegisterAfterGetUsers_Call struct {
	*mock.Call
}

// RegisterAfterGetUsers is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.Users , *api.GetUsersRequest) error
func (_e *Initializer_Expecter) RegisterAfterGetUsers(fn interface{}) *Initializer_RegisterAfterGetUsers_Call {
	return &Initializer_RegisterAfterGetUsers_Call{Call: _e.mock.On("RegisterAfterGetUsers", fn)}
}

func (_c *Initializer_RegisterAfterGetUsers_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Users, *api.GetUsersRequest) error)) *Initializer_RegisterAfterGetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Users, *api.GetUsersRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterGetUsers_Call) Return(_a0 error) *Initializer_RegisterAfterGetUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterGetUsers_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Users, *api.GetUsersRequest) error) error) *Initializer_RegisterAfterGetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterImportFacebookFriends provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterImportFacebookFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportFacebookFriendsRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterImportFacebookFriends")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportFacebookFriendsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterImportFacebookFriends_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterImportFacebookFriends'
type Initializer_RegisterAfterImportFacebookFriends_Call struct {
	*mock.Call
}

// RegisterAfterImportFacebookFriends is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ImportFacebookFriendsRequest) error
func (_e *Initializer_Expecter) RegisterAfterImportFacebookFriends(fn interface{}) *Initializer_RegisterAfterImportFacebookFriends_Call {
	return &Initializer_RegisterAfterImportFacebookFriends_Call{Call: _e.mock.On("RegisterAfterImportFacebookFriends", fn)}
}

func (_c *Initializer_RegisterAfterImportFacebookFriends_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportFacebookFriendsRequest) error)) *Initializer_RegisterAfterImportFacebookFriends_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportFacebookFriendsRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterImportFacebookFriends_Call) Return(_a0 error) *Initializer_RegisterAfterImportFacebookFriends_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterImportFacebookFriends_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportFacebookFriendsRequest) error) error) *Initializer_RegisterAfterImportFacebookFriends_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterImportSteamFriends provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterImportSteamFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportSteamFriendsRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterImportSteamFriends")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportSteamFriendsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterImportSteamFriends_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterImportSteamFriends'
type Initializer_RegisterAfterImportSteamFriends_Call struct {
	*mock.Call
}

// RegisterAfterImportSteamFriends is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ImportSteamFriendsRequest) error
func (_e *Initializer_Expecter) RegisterAfterImportSteamFriends(fn interface{}) *Initializer_RegisterAfterImportSteamFriends_Call {
	return &Initializer_RegisterAfterImportSteamFriends_Call{Call: _e.mock.On("RegisterAfterImportSteamFriends", fn)}
}

func (_c *Initializer_RegisterAfterImportSteamFriends_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportSteamFriendsRequest) error)) *Initializer_RegisterAfterImportSteamFriends_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportSteamFriendsRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterImportSteamFriends_Call) Return(_a0 error) *Initializer_RegisterAfterImportSteamFriends_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterImportSteamFriends_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportSteamFriendsRequest) error) error) *Initializer_RegisterAfterImportSteamFriends_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterJoinGroup provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterJoinGroup(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinGroupRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterJoinGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinGroupRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterJoinGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterJoinGroup'
type Initializer_RegisterAfterJoinGroup_Call struct {
	*mock.Call
}

// RegisterAfterJoinGroup is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.JoinGroupRequest) error
func (_e *Initializer_Expecter) RegisterAfterJoinGroup(fn interface{}) *Initializer_RegisterAfterJoinGroup_Call {
	return &Initializer_RegisterAfterJoinGroup_Call{Call: _e.mock.On("RegisterAfterJoinGroup", fn)}
}

func (_c *Initializer_RegisterAfterJoinGroup_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinGroupRequest) error)) *Initializer_RegisterAfterJoinGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinGroupRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterJoinGroup_Call) Return(_a0 error) *Initializer_RegisterAfterJoinGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterJoinGroup_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinGroupRequest) error) error) *Initializer_RegisterAfterJoinGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterJoinTournament provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterJoinTournament(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinTournamentRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterJoinTournament")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinTournamentRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterJoinTournament_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterJoinTournament'
type Initializer_RegisterAfterJoinTournament_Call struct {
	*mock.Call
}

// RegisterAfterJoinTournament is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.JoinTournamentRequest) error
func (_e *Initializer_Expecter) RegisterAfterJoinTournament(fn interface{}) *Initializer_RegisterAfterJoinTournament_Call {
	return &Initializer_RegisterAfterJoinTournament_Call{Call: _e.mock.On("RegisterAfterJoinTournament", fn)}
}

func (_c *Initializer_RegisterAfterJoinTournament_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinTournamentRequest) error)) *Initializer_RegisterAfterJoinTournament_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinTournamentRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterJoinTournament_Call) Return(_a0 error) *Initializer_RegisterAfterJoinTournament_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterJoinTournament_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinTournamentRequest) error) error) *Initializer_RegisterAfterJoinTournament_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterKickGroupUsers provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterKickGroupUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.KickGroupUsersRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterKickGroupUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.KickGroupUsersRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterKickGroupUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterKickGroupUsers'
type Initializer_RegisterAfterKickGroupUsers_Call struct {
	*mock.Call
}

// RegisterAfterKickGroupUsers is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.KickGroupUsersRequest) error
func (_e *Initializer_Expecter) RegisterAfterKickGroupUsers(fn interface{}) *Initializer_RegisterAfterKickGroupUsers_Call {
	return &Initializer_RegisterAfterKickGroupUsers_Call{Call: _e.mock.On("RegisterAfterKickGroupUsers", fn)}
}

func (_c *Initializer_RegisterAfterKickGroupUsers_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.KickGroupUsersRequest) error)) *Initializer_RegisterAfterKickGroupUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.KickGroupUsersRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterKickGroupUsers_Call) Return(_a0 error) *Initializer_RegisterAfterKickGroupUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterKickGroupUsers_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.KickGroupUsersRequest) error) error) *Initializer_RegisterAfterKickGroupUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterLeaveGroup provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterLeaveGroup(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaveGroupRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterLeaveGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaveGroupRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterLeaveGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterLeaveGroup'
type Initializer_RegisterAfterLeaveGroup_Call struct {
	*mock.Call
}

// RegisterAfterLeaveGroup is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.LeaveGroupRequest) error
func (_e *Initializer_Expecter) RegisterAfterLeaveGroup(fn interface{}) *Initializer_RegisterAfterLeaveGroup_Call {
	return &Initializer_RegisterAfterLeaveGroup_Call{Call: _e.mock.On("RegisterAfterLeaveGroup", fn)}
}

func (_c *Initializer_RegisterAfterLeaveGroup_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaveGroupRequest) error)) *Initializer_RegisterAfterLeaveGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaveGroupRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterLeaveGroup_Call) Return(_a0 error) *Initializer_RegisterAfterLeaveGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterLeaveGroup_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaveGroupRequest) error) error) *Initializer_RegisterAfterLeaveGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterLinkApple provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterLinkApple(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterLinkApple")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterLinkApple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterLinkApple'
type Initializer_RegisterAfterLinkApple_Call struct {
	*mock.Call
}

// RegisterAfterLinkApple is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountApple) error
func (_e *Initializer_Expecter) RegisterAfterLinkApple(fn interface{}) *Initializer_RegisterAfterLinkApple_Call {
	return &Initializer_RegisterAfterLinkApple_Call{Call: _e.mock.On("RegisterAfterLinkApple", fn)}
}

func (_c *Initializer_RegisterAfterLinkApple_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) error)) *Initializer_RegisterAfterLinkApple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterLinkApple_Call) Return(_a0 error) *Initializer_RegisterAfterLinkApple_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterLinkApple_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) error) error) *Initializer_RegisterAfterLinkApple_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterLinkCustom provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterLinkCustom(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterLinkCustom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterLinkCustom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterLinkCustom'
type Initializer_RegisterAfterLinkCustom_Call struct {
	*mock.Call
}

// RegisterAfterLinkCustom is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountCustom) error
func (_e *Initializer_Expecter) RegisterAfterLinkCustom(fn interface{}) *Initializer_RegisterAfterLinkCustom_Call {
	return &Initializer_RegisterAfterLinkCustom_Call{Call: _e.mock.On("RegisterAfterLinkCustom", fn)}
}

func (_c *Initializer_RegisterAfterLinkCustom_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) error)) *Initializer_RegisterAfterLinkCustom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterLinkCustom_Call) Return(_a0 error) *Initializer_RegisterAfterLinkCustom_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterLinkCustom_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) error) error) *Initializer_RegisterAfterLinkCustom_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterLinkDevice provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterLinkDevice(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterLinkDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterLinkDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterLinkDevice'
type Initializer_RegisterAfterLinkDevice_Call struct {
	*mock.Call
}

// RegisterAfterLinkDevice is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountDevice) error
func (_e *Initializer_Expecter) RegisterAfterLinkDevice(fn interface{}) *Initializer_RegisterAfterLinkDevice_Call {
	return &Initializer_RegisterAfterLinkDevice_Call{Call: _e.mock.On("RegisterAfterLinkDevice", fn)}
}

func (_c *Initializer_RegisterAfterLinkDevice_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) error)) *Initializer_RegisterAfterLinkDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterLinkDevice_Call) Return(_a0 error) *Initializer_RegisterAfterLinkDevice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterLinkDevice_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) error) error) *Initializer_RegisterAfterLinkDevice_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterLinkEmail provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterLinkEmail(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterLinkEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterLinkEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterLinkEmail'
type Initializer_RegisterAfterLinkEmail_Call struct {
	*mock.Call
}

// RegisterAfterLinkEmail is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountEmail) error
func (_e *Initializer_Expecter) RegisterAfterLinkEmail(fn interface{}) *Initializer_RegisterAfterLinkEmail_Call {
	return &Initializer_RegisterAfterLinkEmail_Call{Call: _e.mock.On("RegisterAfterLinkEmail", fn)}
}

func (_c *Initializer_RegisterAfterLinkEmail_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) error)) *Initializer_RegisterAfterLinkEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterLinkEmail_Call) Return(_a0 error) *Initializer_RegisterAfterLinkEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterLinkEmail_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) error) error) *Initializer_RegisterAfterLinkEmail_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterLinkFacebook provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterLinkFacebook(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkFacebookRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterLinkFacebook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkFacebookRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterLinkFacebook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterLinkFacebook'
type Initializer_RegisterAfterLinkFacebook_Call struct {
	*mock.Call
}

// RegisterAfterLinkFacebook is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.LinkFacebookRequest) error
func (_e *Initializer_Expecter) RegisterAfterLinkFacebook(fn interface{}) *Initializer_RegisterAfterLinkFacebook_Call {
	return &Initializer_RegisterAfterLinkFacebook_Call{Call: _e.mock.On("RegisterAfterLinkFacebook", fn)}
}

func (_c *Initializer_RegisterAfterLinkFacebook_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkFacebookRequest) error)) *Initializer_RegisterAfterLinkFacebook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkFacebookRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterLinkFacebook_Call) Return(_a0 error) *Initializer_RegisterAfterLinkFacebook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterLinkFacebook_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkFacebookRequest) error) error) *Initializer_RegisterAfterLinkFacebook_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterLinkFacebookInstantGame provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterLinkFacebookInstantGame(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterLinkFacebookInstantGame")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterLinkFacebookInstantGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterLinkFacebookInstantGame'
type Initializer_RegisterAfterLinkFacebookInstantGame_Call struct {
	*mock.Call
}

// RegisterAfterLinkFacebookInstantGame is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountFacebookInstantGame) error
func (_e *Initializer_Expecter) RegisterAfterLinkFacebookInstantGame(fn interface{}) *Initializer_RegisterAfterLinkFacebookInstantGame_Call {
	return &Initializer_RegisterAfterLinkFacebookInstantGame_Call{Call: _e.mock.On("RegisterAfterLinkFacebookInstantGame", fn)}
}

func (_c *Initializer_RegisterAfterLinkFacebookInstantGame_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) error)) *Initializer_RegisterAfterLinkFacebookInstantGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterLinkFacebookInstantGame_Call) Return(_a0 error) *Initializer_RegisterAfterLinkFacebookInstantGame_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterLinkFacebookInstantGame_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) error) error) *Initializer_RegisterAfterLinkFacebookInstantGame_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterLinkGameCenter provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterLinkGameCenter(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterLinkGameCenter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterLinkGameCenter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterLinkGameCenter'
type Initializer_RegisterAfterLinkGameCenter_Call struct {
	*mock.Call
}

// RegisterAfterLinkGameCenter is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountGameCenter) error
func (_e *Initializer_Expecter) RegisterAfterLinkGameCenter(fn interface{}) *Initializer_RegisterAfterLinkGameCenter_Call {
	return &Initializer_RegisterAfterLinkGameCenter_Call{Call: _e.mock.On("RegisterAfterLinkGameCenter", fn)}
}

func (_c *Initializer_RegisterAfterLinkGameCenter_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) error)) *Initializer_RegisterAfterLinkGameCenter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterLinkGameCenter_Call) Return(_a0 error) *Initializer_RegisterAfterLinkGameCenter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterLinkGameCenter_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) error) error) *Initializer_RegisterAfterLinkGameCenter_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterLinkGoogle provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterLinkGoogle(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterLinkGoogle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterLinkGoogle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterLinkGoogle'
type Initializer_RegisterAfterLinkGoogle_Call struct {
	*mock.Call
}

// RegisterAfterLinkGoogle is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountGoogle) error
func (_e *Initializer_Expecter) RegisterAfterLinkGoogle(fn interface{}) *Initializer_RegisterAfterLinkGoogle_Call {
	return &Initializer_RegisterAfterLinkGoogle_Call{Call: _e.mock.On("RegisterAfterLinkGoogle", fn)}
}

func (_c *Initializer_RegisterAfterLinkGoogle_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) error)) *Initializer_RegisterAfterLinkGoogle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterLinkGoogle_Call) Return(_a0 error) *Initializer_RegisterAfterLinkGoogle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterLinkGoogle_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) error) error) *Initializer_RegisterAfterLinkGoogle_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterLinkSteam provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterLinkSteam(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkSteamRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterLinkSteam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkSteamRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterLinkSteam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterLinkSteam'
type Initializer_RegisterAfterLinkSteam_Call struct {
	*mock.Call
}

// RegisterAfterLinkSteam is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.LinkSteamRequest) error
func (_e *Initializer_Expecter) RegisterAfterLinkSteam(fn interface{}) *Initializer_RegisterAfterLinkSteam_Call {
	return &Initializer_RegisterAfterLinkSteam_Call{Call: _e.mock.On("RegisterAfterLinkSteam", fn)}
}

func (_c *Initializer_RegisterAfterLinkSteam_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkSteamRequest) error)) *Initializer_RegisterAfterLinkSteam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkSteamRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterLinkSteam_Call) Return(_a0 error) *Initializer_RegisterAfterLinkSteam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterLinkSteam_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkSteamRequest) error) error) *Initializer_RegisterAfterLinkSteam_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterListChannelMessages provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterListChannelMessages(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ChannelMessageList, *api.ListChannelMessagesRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterListChannelMessages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ChannelMessageList, *api.ListChannelMessagesRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterListChannelMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterListChannelMessages'
type Initializer_RegisterAfterListChannelMessages_Call struct {
	*mock.Call
}

// RegisterAfterListChannelMessages is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ChannelMessageList , *api.ListChannelMessagesRequest) error
func (_e *Initializer_Expecter) RegisterAfterListChannelMessages(fn interface{}) *Initializer_RegisterAfterListChannelMessages_Call {
	return &Initializer_RegisterAfterListChannelMessages_Call{Call: _e.mock.On("RegisterAfterListChannelMessages", fn)}
}

func (_c *Initializer_RegisterAfterListChannelMessages_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ChannelMessageList, *api.ListChannelMessagesRequest) error)) *Initializer_RegisterAfterListChannelMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ChannelMessageList, *api.ListChannelMessagesRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterListChannelMessages_Call) Return(_a0 error) *Initializer_RegisterAfterListChannelMessages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterListChannelMessages_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ChannelMessageList, *api.ListChannelMessagesRequest) error) error) *Initializer_RegisterAfterListChannelMessages_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterListFriends provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterListFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.FriendList) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterListFriends")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.FriendList) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterListFriends_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterListFriends'
type Initializer_RegisterAfterListFriends_Call struct {
	*mock.Call
}

// RegisterAfterListFriends is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.FriendList) error
func (_e *Initializer_Expecter) RegisterAfterListFriends(fn interface{}) *Initializer_RegisterAfterListFriends_Call {
	return &Initializer_RegisterAfterListFriends_Call{Call: _e.mock.On("RegisterAfterListFriends", fn)}
}

func (_c *Initializer_RegisterAfterListFriends_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.FriendList) error)) *Initializer_RegisterAfterListFriends_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.FriendList) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterListFriends_Call) Return(_a0 error) *Initializer_RegisterAfterListFriends_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterListFriends_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.FriendList) error) error) *Initializer_RegisterAfterListFriends_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterListGroupUsers provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterListGroupUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GroupUserList, *api.ListGroupUsersRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterListGroupUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GroupUserList, *api.ListGroupUsersRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterListGroupUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterListGroupUsers'
type Initializer_RegisterAfterListGroupUsers_Call struct {
	*mock.Call
}

// RegisterAfterListGroupUsers is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.GroupUserList , *api.ListGroupUsersRequest) error
func (_e *Initializer_Expecter) RegisterAfterListGroupUsers(fn interface{}) *Initializer_RegisterAfterListGroupUsers_Call {
	return &Initializer_RegisterAfterListGroupUsers_Call{Call: _e.mock.On("RegisterAfterListGroupUsers", fn)}
}

func (_c *Initializer_RegisterAfterListGroupUsers_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GroupUserList, *api.ListGroupUsersRequest) error)) *Initializer_RegisterAfterListGroupUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GroupUserList, *api.ListGroupUsersRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterListGroupUsers_Call) Return(_a0 error) *Initializer_RegisterAfterListGroupUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterListGroupUsers_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GroupUserList, *api.ListGroupUsersRequest) error) error) *Initializer_RegisterAfterListGroupUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterListGroups provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterListGroups(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GroupList, *api.ListGroupsRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterListGroups")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GroupList, *api.ListGroupsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterListGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterListGroups'
type Initializer_RegisterAfterListGroups_Call struct {
	*mock.Call
}

// RegisterAfterListGroups is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.GroupList , *api.ListGroupsRequest) error
func (_e *Initializer_Expecter) RegisterAfterListGroups(fn interface{}) *Initializer_RegisterAfterListGroups_Call {
	return &Initializer_RegisterAfterListGroups_Call{Call: _e.mock.On("RegisterAfterListGroups", fn)}
}

func (_c *Initializer_RegisterAfterListGroups_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GroupList, *api.ListGroupsRequest) error)) *Initializer_RegisterAfterListGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GroupList, *api.ListGroupsRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterListGroups_Call) Return(_a0 error) *Initializer_RegisterAfterListGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterListGroups_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GroupList, *api.ListGroupsRequest) error) error) *Initializer_RegisterAfterListGroups_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterListLeaderboardRecords provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterListLeaderboardRecords(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecordList, *api.ListLeaderboardRecordsRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterListLeaderboardRecords")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecordList, *api.ListLeaderboardRecordsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterListLeaderboardRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterListLeaderboardRecords'
type Initializer_RegisterAfterListLeaderboardRecords_Call struct {
	*mock.Call
}

// RegisterAfterListLeaderboardRecords is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.LeaderboardRecordList , *api.ListLeaderboardRecordsRequest) error
func (_e *Initializer_Expecter) RegisterAfterListLeaderboardRecords(fn interface{}) *Initializer_RegisterAfterListLeaderboardRecords_Call {
	return &Initializer_RegisterAfterListLeaderboardRecords_Call{Call: _e.mock.On("RegisterAfterListLeaderboardRecords", fn)}
}

func (_c *Initializer_RegisterAfterListLeaderboardRecords_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecordList, *api.ListLeaderboardRecordsRequest) error)) *Initializer_RegisterAfterListLeaderboardRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecordList, *api.ListLeaderboardRecordsRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterListLeaderboardRecords_Call) Return(_a0 error) *Initializer_RegisterAfterListLeaderboardRecords_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterListLeaderboardRecords_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecordList, *api.ListLeaderboardRecordsRequest) error) error) *Initializer_RegisterAfterListLeaderboardRecords_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterListLeaderboardRecordsAroundOwner provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterListLeaderboardRecordsAroundOwner(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecordList, *api.ListLeaderboardRecordsAroundOwnerRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterListLeaderboardRecordsAroundOwner")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecordList, *api.ListLeaderboardRecordsAroundOwnerRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterListLeaderboardRecordsAroundOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterListLeaderboardRecordsAroundOwner'
type Initializer_RegisterAfterListLeaderboardRecordsAroundOwner_Call struct {
	*mock.Call
}

// RegisterAfterListLeaderboardRecordsAroundOwner is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.LeaderboardRecordList , *api.ListLeaderboardRecordsAroundOwnerRequest) error
func (_e *Initializer_Expecter) RegisterAfterListLeaderboardRecordsAroundOwner(fn interface{}) *Initializer_RegisterAfterListLeaderboardRecordsAroundOwner_Call {
	return &Initializer_RegisterAfterListLeaderboardRecordsAroundOwner_Call{Call: _e.mock.On("RegisterAfterListLeaderboardRecordsAroundOwner", fn)}
}

func (_c *Initializer_RegisterAfterListLeaderboardRecordsAroundOwner_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecordList, *api.ListLeaderboardRecordsAroundOwnerRequest) error)) *Initializer_RegisterAfterListLeaderboardRecordsAroundOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecordList, *api.ListLeaderboardRecordsAroundOwnerRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterListLeaderboardRecordsAroundOwner_Call) Return(_a0 error) *Initializer_RegisterAfterListLeaderboardRecordsAroundOwner_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterListLeaderboardRecordsAroundOwner_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecordList, *api.ListLeaderboardRecordsAroundOwnerRequest) error) error) *Initializer_RegisterAfterListLeaderboardRecordsAroundOwner_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterListMatches provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterListMatches(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.MatchList, *api.ListMatchesRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterListMatches")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.MatchList, *api.ListMatchesRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterListMatches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterListMatches'
type Initializer_RegisterAfterListMatches_Call struct {
	*mock.Call
}

// RegisterAfterListMatches is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.MatchList , *api.ListMatchesRequest) error
func (_e *Initializer_Expecter) RegisterAfterListMatches(fn interface{}) *Initializer_RegisterAfterListMatches_Call {
	return &Initializer_RegisterAfterListMatches_Call{Call: _e.mock.On("RegisterAfterListMatches", fn)}
}

func (_c *Initializer_RegisterAfterListMatches_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.MatchList, *api.ListMatchesRequest) error)) *Initializer_RegisterAfterListMatches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.MatchList, *api.ListMatchesRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterListMatches_Call) Return(_a0 error) *Initializer_RegisterAfterListMatches_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterListMatches_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.MatchList, *api.ListMatchesRequest) error) error) *Initializer_RegisterAfterListMatches_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterListNotifications provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterListNotifications(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.NotificationList, *api.ListNotificationsRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterListNotifications")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.NotificationList, *api.ListNotificationsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterListNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterListNotifications'
type Initializer_RegisterAfterListNotifications_Call struct {
	*mock.Call
}

// RegisterAfterListNotifications is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.NotificationList , *api.ListNotificationsRequest) error
func (_e *Initializer_Expecter) RegisterAfterListNotifications(fn interface{}) *Initializer_RegisterAfterListNotifications_Call {
	return &Initializer_RegisterAfterListNotifications_Call{Call: _e.mock.On("RegisterAfterListNotifications", fn)}
}

func (_c *Initializer_RegisterAfterListNotifications_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.NotificationList, *api.ListNotificationsRequest) error)) *Initializer_RegisterAfterListNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.NotificationList, *api.ListNotificationsRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterListNotifications_Call) Return(_a0 error) *Initializer_RegisterAfterListNotifications_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterListNotifications_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.NotificationList, *api.ListNotificationsRequest) error) error) *Initializer_RegisterAfterListNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterListStorageObjects provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterListStorageObjects(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.StorageObjectList, *api.ListStorageObjectsRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterListStorageObjects")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.StorageObjectList, *api.ListStorageObjectsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterListStorageObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterListStorageObjects'
type Initializer_RegisterAfterListStorageObjects_Call struct {
	*mock.Call
}

// RegisterAfterListStorageObjects is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.StorageObjectList , *api.ListStorageObjectsRequest) error
func (_e *Initializer_Expecter) RegisterAfterListStorageObjects(fn interface{}) *Initializer_RegisterAfterListStorageObjects_Call {
	return &Initializer_RegisterAfterListStorageObjects_Call{Call: _e.mock.On("RegisterAfterListStorageObjects", fn)}
}

func (_c *Initializer_RegisterAfterListStorageObjects_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.StorageObjectList, *api.ListStorageObjectsRequest) error)) *Initializer_RegisterAfterListStorageObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.StorageObjectList, *api.ListStorageObjectsRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterListStorageObjects_Call) Return(_a0 error) *Initializer_RegisterAfterListStorageObjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterListStorageObjects_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.StorageObjectList, *api.ListStorageObjectsRequest) error) error) *Initializer_RegisterAfterListStorageObjects_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterListSubscriptions provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterListSubscriptions(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SubscriptionList, *api.ListSubscriptionsRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterListSubscriptions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SubscriptionList, *api.ListSubscriptionsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterListSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterListSubscriptions'
type Initializer_RegisterAfterListSubscriptions_Call struct {
	*mock.Call
}

// RegisterAfterListSubscriptions is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.SubscriptionList , *api.ListSubscriptionsRequest) error
func (_e *Initializer_Expecter) RegisterAfterListSubscriptions(fn interface{}) *Initializer_RegisterAfterListSubscriptions_Call {
	return &Initializer_RegisterAfterListSubscriptions_Call{Call: _e.mock.On("RegisterAfterListSubscriptions", fn)}
}

func (_c *Initializer_RegisterAfterListSubscriptions_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SubscriptionList, *api.ListSubscriptionsRequest) error)) *Initializer_RegisterAfterListSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SubscriptionList, *api.ListSubscriptionsRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterListSubscriptions_Call) Return(_a0 error) *Initializer_RegisterAfterListSubscriptions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterListSubscriptions_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SubscriptionList, *api.ListSubscriptionsRequest) error) error) *Initializer_RegisterAfterListSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterListTournamentRecords provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterListTournamentRecords(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.TournamentRecordList, *api.ListTournamentRecordsRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterListTournamentRecords")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.TournamentRecordList, *api.ListTournamentRecordsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterListTournamentRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterListTournamentRecords'
type Initializer_RegisterAfterListTournamentRecords_Call struct {
	*mock.Call
}

// RegisterAfterListTournamentRecords is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.TournamentRecordList , *api.ListTournamentRecordsRequest) error
func (_e *Initializer_Expecter) RegisterAfterListTournamentRecords(fn interface{}) *Initializer_RegisterAfterListTournamentRecords_Call {
	return &Initializer_RegisterAfterListTournamentRecords_Call{Call: _e.mock.On("RegisterAfterListTournamentRecords", fn)}
}

func (_c *Initializer_RegisterAfterListTournamentRecords_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.TournamentRecordList, *api.ListTournamentRecordsRequest) error)) *Initializer_RegisterAfterListTournamentRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.TournamentRecordList, *api.ListTournamentRecordsRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterListTournamentRecords_Call) Return(_a0 error) *Initializer_RegisterAfterListTournamentRecords_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterListTournamentRecords_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.TournamentRecordList, *api.ListTournamentRecordsRequest) error) error) *Initializer_RegisterAfterListTournamentRecords_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterListTournamentRecordsAroundOwner provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterListTournamentRecordsAroundOwner(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.TournamentRecordList, *api.ListTournamentRecordsAroundOwnerRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterListTournamentRecordsAroundOwner")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.TournamentRecordList, *api.ListTournamentRecordsAroundOwnerRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterListTournamentRecordsAroundOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterListTournamentRecordsAroundOwner'
type Initializer_RegisterAfterListTournamentRecordsAroundOwner_Call struct {
	*mock.Call
}

// RegisterAfterListTournamentRecordsAroundOwner is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.TournamentRecordList , *api.ListTournamentRecordsAroundOwnerRequest) error
func (_e *Initializer_Expecter) RegisterAfterListTournamentRecordsAroundOwner(fn interface{}) *Initializer_RegisterAfterListTournamentRecordsAroundOwner_Call {
	return &Initializer_RegisterAfterListTournamentRecordsAroundOwner_Call{Call: _e.mock.On("RegisterAfterListTournamentRecordsAroundOwner", fn)}
}

func (_c *Initializer_RegisterAfterListTournamentRecordsAroundOwner_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.TournamentRecordList, *api.ListTournamentRecordsAroundOwnerRequest) error)) *Initializer_RegisterAfterListTournamentRecordsAroundOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.TournamentRecordList, *api.ListTournamentRecordsAroundOwnerRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterListTournamentRecordsAroundOwner_Call) Return(_a0 error) *Initializer_RegisterAfterListTournamentRecordsAroundOwner_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterListTournamentRecordsAroundOwner_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.TournamentRecordList, *api.ListTournamentRecordsAroundOwnerRequest) error) error) *Initializer_RegisterAfterListTournamentRecordsAroundOwner_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterListTournaments provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterListTournaments(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.TournamentList, *api.ListTournamentsRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterListTournaments")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.TournamentList, *api.ListTournamentsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterListTournaments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterListTournaments'
type Initializer_RegisterAfterListTournaments_Call struct {
	*mock.Call
}

// RegisterAfterListTournaments is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.TournamentList , *api.ListTournamentsRequest) error
func (_e *Initializer_Expecter) RegisterAfterListTournaments(fn interface{}) *Initializer_RegisterAfterListTournaments_Call {
	return &Initializer_RegisterAfterListTournaments_Call{Call: _e.mock.On("RegisterAfterListTournaments", fn)}
}

func (_c *Initializer_RegisterAfterListTournaments_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.TournamentList, *api.ListTournamentsRequest) error)) *Initializer_RegisterAfterListTournaments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.TournamentList, *api.ListTournamentsRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterListTournaments_Call) Return(_a0 error) *Initializer_RegisterAfterListTournaments_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterListTournaments_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.TournamentList, *api.ListTournamentsRequest) error) error) *Initializer_RegisterAfterListTournaments_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterListUserGroups provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterListUserGroups(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UserGroupList, *api.ListUserGroupsRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterListUserGroups")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UserGroupList, *api.ListUserGroupsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterListUserGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterListUserGroups'
type Initializer_RegisterAfterListUserGroups_Call struct {
	*mock.Call
}

// RegisterAfterListUserGroups is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.UserGroupList , *api.ListUserGroupsRequest) error
func (_e *Initializer_Expecter) RegisterAfterListUserGroups(fn interface{}) *Initializer_RegisterAfterListUserGroups_Call {
	return &Initializer_RegisterAfterListUserGroups_Call{Call: _e.mock.On("RegisterAfterListUserGroups", fn)}
}

func (_c *Initializer_RegisterAfterListUserGroups_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UserGroupList, *api.ListUserGroupsRequest) error)) *Initializer_RegisterAfterListUserGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UserGroupList, *api.ListUserGroupsRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterListUserGroups_Call) Return(_a0 error) *Initializer_RegisterAfterListUserGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterListUserGroups_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UserGroupList, *api.ListUserGroupsRequest) error) error) *Initializer_RegisterAfterListUserGroups_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterPromoteGroupUsers provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterPromoteGroupUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.PromoteGroupUsersRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterPromoteGroupUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.PromoteGroupUsersRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterPromoteGroupUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterPromoteGroupUsers'
type Initializer_RegisterAfterPromoteGroupUsers_Call struct {
	*mock.Call
}

// RegisterAfterPromoteGroupUsers is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.PromoteGroupUsersRequest) error
func (_e *Initializer_Expecter) RegisterAfterPromoteGroupUsers(fn interface{}) *Initializer_RegisterAfterPromoteGroupUsers_Call {
	return &Initializer_RegisterAfterPromoteGroupUsers_Call{Call: _e.mock.On("RegisterAfterPromoteGroupUsers", fn)}
}

func (_c *Initializer_RegisterAfterPromoteGroupUsers_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.PromoteGroupUsersRequest) error)) *Initializer_RegisterAfterPromoteGroupUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.PromoteGroupUsersRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterPromoteGroupUsers_Call) Return(_a0 error) *Initializer_RegisterAfterPromoteGroupUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterPromoteGroupUsers_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.PromoteGroupUsersRequest) error) error) *Initializer_RegisterAfterPromoteGroupUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterReadStorageObjects provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterReadStorageObjects(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.StorageObjects, *api.ReadStorageObjectsRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterReadStorageObjects")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.StorageObjects, *api.ReadStorageObjectsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterReadStorageObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterReadStorageObjects'
type Initializer_RegisterAfterReadStorageObjects_Call struct {
	*mock.Call
}

// RegisterAfterReadStorageObjects is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.StorageObjects , *api.ReadStorageObjectsRequest) error
func (_e *Initializer_Expecter) RegisterAfterReadStorageObjects(fn interface{}) *Initializer_RegisterAfterReadStorageObjects_Call {
	return &Initializer_RegisterAfterReadStorageObjects_Call{Call: _e.mock.On("RegisterAfterReadStorageObjects", fn)}
}

func (_c *Initializer_RegisterAfterReadStorageObjects_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.StorageObjects, *api.ReadStorageObjectsRequest) error)) *Initializer_RegisterAfterReadStorageObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.StorageObjects, *api.ReadStorageObjectsRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterReadStorageObjects_Call) Return(_a0 error) *Initializer_RegisterAfterReadStorageObjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterReadStorageObjects_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.StorageObjects, *api.ReadStorageObjectsRequest) error) error) *Initializer_RegisterAfterReadStorageObjects_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterRt provides a mock function with given fields: id, fn
func (_m *Initializer) RegisterAfterRt(id string, fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *rtapi.Envelope, *rtapi.Envelope) error) error {
	ret := _m.Called(id, fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterRt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *rtapi.Envelope, *rtapi.Envelope) error) error); ok {
		r0 = rf(id, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterRt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterRt'
type Initializer_RegisterAfterRt_Call struct {
	*mock.Call
}

// RegisterAfterRt is a helper method to define mock.On call
//   - id string
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *rtapi.Envelope , *rtapi.Envelope) error
func (_e *Initializer_Expecter) RegisterAfterRt(id interface{}, fn interface{}) *Initializer_RegisterAfterRt_Call {
	return &Initializer_RegisterAfterRt_Call{Call: _e.mock.On("RegisterAfterRt", id, fn)}
}

func (_c *Initializer_RegisterAfterRt_Call) Run(run func(id string, fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *rtapi.Envelope, *rtapi.Envelope) error)) *Initializer_RegisterAfterRt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *rtapi.Envelope, *rtapi.Envelope) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterRt_Call) Return(_a0 error) *Initializer_RegisterAfterRt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterRt_Call) RunAndReturn(run func(string, func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *rtapi.Envelope, *rtapi.Envelope) error) error) *Initializer_RegisterAfterRt_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterSessionLogout provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterSessionLogout(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SessionLogoutRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterSessionLogout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SessionLogoutRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterSessionLogout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterSessionLogout'
type Initializer_RegisterAfterSessionLogout_Call struct {
	*mock.Call
}

// RegisterAfterSessionLogout is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.SessionLogoutRequest) error
func (_e *Initializer_Expecter) RegisterAfterSessionLogout(fn interface{}) *Initializer_RegisterAfterSessionLogout_Call {
	return &Initializer_RegisterAfterSessionLogout_Call{Call: _e.mock.On("RegisterAfterSessionLogout", fn)}
}

func (_c *Initializer_RegisterAfterSessionLogout_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SessionLogoutRequest) error)) *Initializer_RegisterAfterSessionLogout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SessionLogoutRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterSessionLogout_Call) Return(_a0 error) *Initializer_RegisterAfterSessionLogout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterSessionLogout_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SessionLogoutRequest) error) error) *Initializer_RegisterAfterSessionLogout_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterSessionRefresh provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterSessionRefresh(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.SessionRefreshRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterSessionRefresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.SessionRefreshRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterSessionRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterSessionRefresh'
type Initializer_RegisterAfterSessionRefresh_Call struct {
	*mock.Call
}

// RegisterAfterSessionRefresh is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.Session , *api.SessionRefreshRequest) error
func (_e *Initializer_Expecter) RegisterAfterSessionRefresh(fn interface{}) *Initializer_RegisterAfterSessionRefresh_Call {
	return &Initializer_RegisterAfterSessionRefresh_Call{Call: _e.mock.On("RegisterAfterSessionRefresh", fn)}
}

func (_c *Initializer_RegisterAfterSessionRefresh_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.SessionRefreshRequest) error)) *Initializer_RegisterAfterSessionRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.SessionRefreshRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterSessionRefresh_Call) Return(_a0 error) *Initializer_RegisterAfterSessionRefresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterSessionRefresh_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.SessionRefreshRequest) error) error) *Initializer_RegisterAfterSessionRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterUnlinkApple provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterUnlinkApple(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterUnlinkApple")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterUnlinkApple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterUnlinkApple'
type Initializer_RegisterAfterUnlinkApple_Call struct {
	*mock.Call
}

// RegisterAfterUnlinkApple is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountApple) error
func (_e *Initializer_Expecter) RegisterAfterUnlinkApple(fn interface{}) *Initializer_RegisterAfterUnlinkApple_Call {
	return &Initializer_RegisterAfterUnlinkApple_Call{Call: _e.mock.On("RegisterAfterUnlinkApple", fn)}
}

func (_c *Initializer_RegisterAfterUnlinkApple_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) error)) *Initializer_RegisterAfterUnlinkApple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterUnlinkApple_Call) Return(_a0 error) *Initializer_RegisterAfterUnlinkApple_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterUnlinkApple_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) error) error) *Initializer_RegisterAfterUnlinkApple_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterUnlinkCustom provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterUnlinkCustom(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterUnlinkCustom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterUnlinkCustom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterUnlinkCustom'
type Initializer_RegisterAfterUnlinkCustom_Call struct {
	*mock.Call
}

// RegisterAfterUnlinkCustom is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountCustom) error
func (_e *Initializer_Expecter) RegisterAfterUnlinkCustom(fn interface{}) *Initializer_RegisterAfterUnlinkCustom_Call {
	return &Initializer_RegisterAfterUnlinkCustom_Call{Call: _e.mock.On("RegisterAfterUnlinkCustom", fn)}
}

func (_c *Initializer_RegisterAfterUnlinkCustom_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) error)) *Initializer_RegisterAfterUnlinkCustom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterUnlinkCustom_Call) Return(_a0 error) *Initializer_RegisterAfterUnlinkCustom_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterUnlinkCustom_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) error) error) *Initializer_RegisterAfterUnlinkCustom_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterUnlinkDevice provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterUnlinkDevice(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterUnlinkDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterUnlinkDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterUnlinkDevice'
type Initializer_RegisterAfterUnlinkDevice_Call struct {
	*mock.Call
}

// RegisterAfterUnlinkDevice is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountDevice) error
func (_e *Initializer_Expecter) RegisterAfterUnlinkDevice(fn interface{}) *Initializer_RegisterAfterUnlinkDevice_Call {
	return &Initializer_RegisterAfterUnlinkDevice_Call{Call: _e.mock.On("RegisterAfterUnlinkDevice", fn)}
}

func (_c *Initializer_RegisterAfterUnlinkDevice_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) error)) *Initializer_RegisterAfterUnlinkDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterUnlinkDevice_Call) Return(_a0 error) *Initializer_RegisterAfterUnlinkDevice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterUnlinkDevice_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) error) error) *Initializer_RegisterAfterUnlinkDevice_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterUnlinkEmail provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterUnlinkEmail(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterUnlinkEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterUnlinkEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterUnlinkEmail'
type Initializer_RegisterAfterUnlinkEmail_Call struct {
	*mock.Call
}

// RegisterAfterUnlinkEmail is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountEmail) error
func (_e *Initializer_Expecter) RegisterAfterUnlinkEmail(fn interface{}) *Initializer_RegisterAfterUnlinkEmail_Call {
	return &Initializer_RegisterAfterUnlinkEmail_Call{Call: _e.mock.On("RegisterAfterUnlinkEmail", fn)}
}

func (_c *Initializer_RegisterAfterUnlinkEmail_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) error)) *Initializer_RegisterAfterUnlinkEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterUnlinkEmail_Call) Return(_a0 error) *Initializer_RegisterAfterUnlinkEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterUnlinkEmail_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) error) error) *Initializer_RegisterAfterUnlinkEmail_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterUnlinkFacebook provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterUnlinkFacebook(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebook) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterUnlinkFacebook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebook) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterUnlinkFacebook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterUnlinkFacebook'
type Initializer_RegisterAfterUnlinkFacebook_Call struct {
	*mock.Call
}

// RegisterAfterUnlinkFacebook is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountFacebook) error
func (_e *Initializer_Expecter) RegisterAfterUnlinkFacebook(fn interface{}) *Initializer_RegisterAfterUnlinkFacebook_Call {
	return &Initializer_RegisterAfterUnlinkFacebook_Call{Call: _e.mock.On("RegisterAfterUnlinkFacebook", fn)}
}

func (_c *Initializer_RegisterAfterUnlinkFacebook_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebook) error)) *Initializer_RegisterAfterUnlinkFacebook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebook) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterUnlinkFacebook_Call) Return(_a0 error) *Initializer_RegisterAfterUnlinkFacebook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterUnlinkFacebook_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebook) error) error) *Initializer_RegisterAfterUnlinkFacebook_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterUnlinkFacebookInstantGame provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterUnlinkFacebookInstantGame(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterUnlinkFacebookInstantGame")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterUnlinkFacebookInstantGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterUnlinkFacebookInstantGame'
type Initializer_RegisterAfterUnlinkFacebookInstantGame_Call struct {
	*mock.Call
}

// RegisterAfterUnlinkFacebookInstantGame is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountFacebookInstantGame) error
func (_e *Initializer_Expecter) RegisterAfterUnlinkFacebookInstantGame(fn interface{}) *Initializer_RegisterAfterUnlinkFacebookInstantGame_Call {
	return &Initializer_RegisterAfterUnlinkFacebookInstantGame_Call{Call: _e.mock.On("RegisterAfterUnlinkFacebookInstantGame", fn)}
}

func (_c *Initializer_RegisterAfterUnlinkFacebookInstantGame_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) error)) *Initializer_RegisterAfterUnlinkFacebookInstantGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterUnlinkFacebookInstantGame_Call) Return(_a0 error) *Initializer_RegisterAfterUnlinkFacebookInstantGame_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterUnlinkFacebookInstantGame_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) error) error) *Initializer_RegisterAfterUnlinkFacebookInstantGame_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterUnlinkGameCenter provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterUnlinkGameCenter(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterUnlinkGameCenter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterUnlinkGameCenter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterUnlinkGameCenter'
type Initializer_RegisterAfterUnlinkGameCenter_Call struct {
	*mock.Call
}

// RegisterAfterUnlinkGameCenter is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountGameCenter) error
func (_e *Initializer_Expecter) RegisterAfterUnlinkGameCenter(fn interface{}) *Initializer_RegisterAfterUnlinkGameCenter_Call {
	return &Initializer_RegisterAfterUnlinkGameCenter_Call{Call: _e.mock.On("RegisterAfterUnlinkGameCenter", fn)}
}

func (_c *Initializer_RegisterAfterUnlinkGameCenter_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) error)) *Initializer_RegisterAfterUnlinkGameCenter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterUnlinkGameCenter_Call) Return(_a0 error) *Initializer_RegisterAfterUnlinkGameCenter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterUnlinkGameCenter_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) error) error) *Initializer_RegisterAfterUnlinkGameCenter_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterUnlinkGoogle provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterUnlinkGoogle(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterUnlinkGoogle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterUnlinkGoogle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterUnlinkGoogle'
type Initializer_RegisterAfterUnlinkGoogle_Call struct {
	*mock.Call
}

// RegisterAfterUnlinkGoogle is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountGoogle) error
func (_e *Initializer_Expecter) RegisterAfterUnlinkGoogle(fn interface{}) *Initializer_RegisterAfterUnlinkGoogle_Call {
	return &Initializer_RegisterAfterUnlinkGoogle_Call{Call: _e.mock.On("RegisterAfterUnlinkGoogle", fn)}
}

func (_c *Initializer_RegisterAfterUnlinkGoogle_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) error)) *Initializer_RegisterAfterUnlinkGoogle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterUnlinkGoogle_Call) Return(_a0 error) *Initializer_RegisterAfterUnlinkGoogle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterUnlinkGoogle_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) error) error) *Initializer_RegisterAfterUnlinkGoogle_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterUnlinkSteam provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterUnlinkSteam(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountSteam) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterUnlinkSteam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountSteam) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterUnlinkSteam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterUnlinkSteam'
type Initializer_RegisterAfterUnlinkSteam_Call struct {
	*mock.Call
}

// RegisterAfterUnlinkSteam is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountSteam) error
func (_e *Initializer_Expecter) RegisterAfterUnlinkSteam(fn interface{}) *Initializer_RegisterAfterUnlinkSteam_Call {
	return &Initializer_RegisterAfterUnlinkSteam_Call{Call: _e.mock.On("RegisterAfterUnlinkSteam", fn)}
}

func (_c *Initializer_RegisterAfterUnlinkSteam_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountSteam) error)) *Initializer_RegisterAfterUnlinkSteam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountSteam) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterUnlinkSteam_Call) Return(_a0 error) *Initializer_RegisterAfterUnlinkSteam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterUnlinkSteam_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountSteam) error) error) *Initializer_RegisterAfterUnlinkSteam_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterUpdateAccount provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterUpdateAccount(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateAccountRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterUpdateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateAccountRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterUpdateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterUpdateAccount'
type Initializer_RegisterAfterUpdateAccount_Call struct {
	*mock.Call
}

// RegisterAfterUpdateAccount is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.UpdateAccountRequest) error
func (_e *Initializer_Expecter) RegisterAfterUpdateAccount(fn interface{}) *Initializer_RegisterAfterUpdateAccount_Call {
	return &Initializer_RegisterAfterUpdateAccount_Call{Call: _e.mock.On("RegisterAfterUpdateAccount", fn)}
}

func (_c *Initializer_RegisterAfterUpdateAccount_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateAccountRequest) error)) *Initializer_RegisterAfterUpdateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateAccountRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterUpdateAccount_Call) Return(_a0 error) *Initializer_RegisterAfterUpdateAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterUpdateAccount_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateAccountRequest) error) error) *Initializer_RegisterAfterUpdateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterUpdateGroup provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterUpdateGroup(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateGroupRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterUpdateGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateGroupRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterUpdateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterUpdateGroup'
type Initializer_RegisterAfterUpdateGroup_Call struct {
	*mock.Call
}

// RegisterAfterUpdateGroup is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.UpdateGroupRequest) error
func (_e *Initializer_Expecter) RegisterAfterUpdateGroup(fn interface{}) *Initializer_RegisterAfterUpdateGroup_Call {
	return &Initializer_RegisterAfterUpdateGroup_Call{Call: _e.mock.On("RegisterAfterUpdateGroup", fn)}
}

func (_c *Initializer_RegisterAfterUpdateGroup_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateGroupRequest) error)) *Initializer_RegisterAfterUpdateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateGroupRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterUpdateGroup_Call) Return(_a0 error) *Initializer_RegisterAfterUpdateGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterUpdateGroup_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateGroupRequest) error) error) *Initializer_RegisterAfterUpdateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterValidatePurchaseApple provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterValidatePurchaseApple(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseResponse, *api.ValidatePurchaseAppleRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterValidatePurchaseApple")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseResponse, *api.ValidatePurchaseAppleRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterValidatePurchaseApple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterValidatePurchaseApple'
type Initializer_RegisterAfterValidatePurchaseApple_Call struct {
	*mock.Call
}

// RegisterAfterValidatePurchaseApple is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ValidatePurchaseResponse , *api.ValidatePurchaseAppleRequest) error
func (_e *Initializer_Expecter) RegisterAfterValidatePurchaseApple(fn interface{}) *Initializer_RegisterAfterValidatePurchaseApple_Call {
	return &Initializer_RegisterAfterValidatePurchaseApple_Call{Call: _e.mock.On("RegisterAfterValidatePurchaseApple", fn)}
}

func (_c *Initializer_RegisterAfterValidatePurchaseApple_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseResponse, *api.ValidatePurchaseAppleRequest) error)) *Initializer_RegisterAfterValidatePurchaseApple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseResponse, *api.ValidatePurchaseAppleRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterValidatePurchaseApple_Call) Return(_a0 error) *Initializer_RegisterAfterValidatePurchaseApple_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterValidatePurchaseApple_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseResponse, *api.ValidatePurchaseAppleRequest) error) error) *Initializer_RegisterAfterValidatePurchaseApple_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterValidatePurchaseGoogle provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterValidatePurchaseGoogle(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseResponse, *api.ValidatePurchaseGoogleRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterValidatePurchaseGoogle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseResponse, *api.ValidatePurchaseGoogleRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterValidatePurchaseGoogle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterValidatePurchaseGoogle'
type Initializer_RegisterAfterValidatePurchaseGoogle_Call struct {
	*mock.Call
}

// RegisterAfterValidatePurchaseGoogle is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ValidatePurchaseResponse , *api.ValidatePurchaseGoogleRequest) error
func (_e *Initializer_Expecter) RegisterAfterValidatePurchaseGoogle(fn interface{}) *Initializer_RegisterAfterValidatePurchaseGoogle_Call {
	return &Initializer_RegisterAfterValidatePurchaseGoogle_Call{Call: _e.mock.On("RegisterAfterValidatePurchaseGoogle", fn)}
}

func (_c *Initializer_RegisterAfterValidatePurchaseGoogle_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseResponse, *api.ValidatePurchaseGoogleRequest) error)) *Initializer_RegisterAfterValidatePurchaseGoogle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseResponse, *api.ValidatePurchaseGoogleRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterValidatePurchaseGoogle_Call) Return(_a0 error) *Initializer_RegisterAfterValidatePurchaseGoogle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterValidatePurchaseGoogle_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseResponse, *api.ValidatePurchaseGoogleRequest) error) error) *Initializer_RegisterAfterValidatePurchaseGoogle_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterValidatePurchaseHuawei provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterValidatePurchaseHuawei(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseResponse, *api.ValidatePurchaseHuaweiRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterValidatePurchaseHuawei")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseResponse, *api.ValidatePurchaseHuaweiRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterValidatePurchaseHuawei_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterValidatePurchaseHuawei'
type Initializer_RegisterAfterValidatePurchaseHuawei_Call struct {
	*mock.Call
}

// RegisterAfterValidatePurchaseHuawei is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ValidatePurchaseResponse , *api.ValidatePurchaseHuaweiRequest) error
func (_e *Initializer_Expecter) RegisterAfterValidatePurchaseHuawei(fn interface{}) *Initializer_RegisterAfterValidatePurchaseHuawei_Call {
	return &Initializer_RegisterAfterValidatePurchaseHuawei_Call{Call: _e.mock.On("RegisterAfterValidatePurchaseHuawei", fn)}
}

func (_c *Initializer_RegisterAfterValidatePurchaseHuawei_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseResponse, *api.ValidatePurchaseHuaweiRequest) error)) *Initializer_RegisterAfterValidatePurchaseHuawei_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseResponse, *api.ValidatePurchaseHuaweiRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterValidatePurchaseHuawei_Call) Return(_a0 error) *Initializer_RegisterAfterValidatePurchaseHuawei_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterValidatePurchaseHuawei_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseResponse, *api.ValidatePurchaseHuaweiRequest) error) error) *Initializer_RegisterAfterValidatePurchaseHuawei_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterValidateSubscriptionApple provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterValidateSubscriptionApple(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionResponse, *api.ValidateSubscriptionAppleRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterValidateSubscriptionApple")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionResponse, *api.ValidateSubscriptionAppleRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterValidateSubscriptionApple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterValidateSubscriptionApple'
type Initializer_RegisterAfterValidateSubscriptionApple_Call struct {
	*mock.Call
}

// RegisterAfterValidateSubscriptionApple is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ValidateSubscriptionResponse , *api.ValidateSubscriptionAppleRequest) error
func (_e *Initializer_Expecter) RegisterAfterValidateSubscriptionApple(fn interface{}) *Initializer_RegisterAfterValidateSubscriptionApple_Call {
	return &Initializer_RegisterAfterValidateSubscriptionApple_Call{Call: _e.mock.On("RegisterAfterValidateSubscriptionApple", fn)}
}

func (_c *Initializer_RegisterAfterValidateSubscriptionApple_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionResponse, *api.ValidateSubscriptionAppleRequest) error)) *Initializer_RegisterAfterValidateSubscriptionApple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionResponse, *api.ValidateSubscriptionAppleRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterValidateSubscriptionApple_Call) Return(_a0 error) *Initializer_RegisterAfterValidateSubscriptionApple_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterValidateSubscriptionApple_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionResponse, *api.ValidateSubscriptionAppleRequest) error) error) *Initializer_RegisterAfterValidateSubscriptionApple_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterValidateSubscriptionGoogle provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterValidateSubscriptionGoogle(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionResponse, *api.ValidateSubscriptionGoogleRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterValidateSubscriptionGoogle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionResponse, *api.ValidateSubscriptionGoogleRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterValidateSubscriptionGoogle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterValidateSubscriptionGoogle'
type Initializer_RegisterAfterValidateSubscriptionGoogle_Call struct {
	*mock.Call
}

// RegisterAfterValidateSubscriptionGoogle is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ValidateSubscriptionResponse , *api.ValidateSubscriptionGoogleRequest) error
func (_e *Initializer_Expecter) RegisterAfterValidateSubscriptionGoogle(fn interface{}) *Initializer_RegisterAfterValidateSubscriptionGoogle_Call {
	return &Initializer_RegisterAfterValidateSubscriptionGoogle_Call{Call: _e.mock.On("RegisterAfterValidateSubscriptionGoogle", fn)}
}

func (_c *Initializer_RegisterAfterValidateSubscriptionGoogle_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionResponse, *api.ValidateSubscriptionGoogleRequest) error)) *Initializer_RegisterAfterValidateSubscriptionGoogle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionResponse, *api.ValidateSubscriptionGoogleRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterValidateSubscriptionGoogle_Call) Return(_a0 error) *Initializer_RegisterAfterValidateSubscriptionGoogle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterValidateSubscriptionGoogle_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionResponse, *api.ValidateSubscriptionGoogleRequest) error) error) *Initializer_RegisterAfterValidateSubscriptionGoogle_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterWriteLeaderboardRecord provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterWriteLeaderboardRecord(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecord, *api.WriteLeaderboardRecordRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterWriteLeaderboardRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecord, *api.WriteLeaderboardRecordRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterWriteLeaderboardRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterWriteLeaderboardRecord'
type Initializer_RegisterAfterWriteLeaderboardRecord_Call struct {
	*mock.Call
}

// RegisterAfterWriteLeaderboardRecord is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.LeaderboardRecord , *api.WriteLeaderboardRecordRequest) error
func (_e *Initializer_Expecter) RegisterAfterWriteLeaderboardRecord(fn interface{}) *Initializer_RegisterAfterWriteLeaderboardRecord_Call {
	return &Initializer_RegisterAfterWriteLeaderboardRecord_Call{Call: _e.mock.On("RegisterAfterWriteLeaderboardRecord", fn)}
}

func (_c *Initializer_RegisterAfterWriteLeaderboardRecord_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecord, *api.WriteLeaderboardRecordRequest) error)) *Initializer_RegisterAfterWriteLeaderboardRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecord, *api.WriteLeaderboardRecordRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterWriteLeaderboardRecord_Call) Return(_a0 error) *Initializer_RegisterAfterWriteLeaderboardRecord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterWriteLeaderboardRecord_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecord, *api.WriteLeaderboardRecordRequest) error) error) *Initializer_RegisterAfterWriteLeaderboardRecord_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterWriteStorageObjects provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterWriteStorageObjects(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.StorageObjectAcks, *api.WriteStorageObjectsRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterWriteStorageObjects")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.StorageObjectAcks, *api.WriteStorageObjectsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterWriteStorageObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterWriteStorageObjects'
type Initializer_RegisterAfterWriteStorageObjects_Call struct {
	*mock.Call
}

// RegisterAfterWriteStorageObjects is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.StorageObjectAcks , *api.WriteStorageObjectsRequest) error
func (_e *Initializer_Expecter) RegisterAfterWriteStorageObjects(fn interface{}) *Initializer_RegisterAfterWriteStorageObjects_Call {
	return &Initializer_RegisterAfterWriteStorageObjects_Call{Call: _e.mock.On("RegisterAfterWriteStorageObjects", fn)}
}

func (_c *Initializer_RegisterAfterWriteStorageObjects_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.StorageObjectAcks, *api.WriteStorageObjectsRequest) error)) *Initializer_RegisterAfterWriteStorageObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.StorageObjectAcks, *api.WriteStorageObjectsRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterWriteStorageObjects_Call) Return(_a0 error) *Initializer_RegisterAfterWriteStorageObjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterWriteStorageObjects_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.StorageObjectAcks, *api.WriteStorageObjectsRequest) error) error) *Initializer_RegisterAfterWriteStorageObjects_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterAfterWriteTournamentRecord provides a mock function with given fields: fn
func (_m *Initializer) RegisterAfterWriteTournamentRecord(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecord, *api.WriteTournamentRecordRequest) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAfterWriteTournamentRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecord, *api.WriteTournamentRecordRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterAfterWriteTournamentRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterAfterWriteTournamentRecord'
type Initializer_RegisterAfterWriteTournamentRecord_Call struct {
	*mock.Call
}

// RegisterAfterWriteTournamentRecord is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.LeaderboardRecord , *api.WriteTournamentRecordRequest) error
func (_e *Initializer_Expecter) RegisterAfterWriteTournamentRecord(fn interface{}) *Initializer_RegisterAfterWriteTournamentRecord_Call {
	return &Initializer_RegisterAfterWriteTournamentRecord_Call{Call: _e.mock.On("RegisterAfterWriteTournamentRecord", fn)}
}

func (_c *Initializer_RegisterAfterWriteTournamentRecord_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecord, *api.WriteTournamentRecordRequest) error)) *Initializer_RegisterAfterWriteTournamentRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecord, *api.WriteTournamentRecordRequest) error))
	})
	return _c
}

func (_c *Initializer_RegisterAfterWriteTournamentRecord_Call) Return(_a0 error) *Initializer_RegisterAfterWriteTournamentRecord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterAfterWriteTournamentRecord_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecord, *api.WriteTournamentRecordRequest) error) error) *Initializer_RegisterAfterWriteTournamentRecord_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeAddFriends provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeAddFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddFriendsRequest) (*api.AddFriendsRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeAddFriends")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddFriendsRequest) (*api.AddFriendsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeAddFriends_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeAddFriends'
type Initializer_RegisterBeforeAddFriends_Call struct {
	*mock.Call
}

// RegisterBeforeAddFriends is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AddFriendsRequest)(*api.AddFriendsRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeAddFriends(fn interface{}) *Initializer_RegisterBeforeAddFriends_Call {
	return &Initializer_RegisterBeforeAddFriends_Call{Call: _e.mock.On("RegisterBeforeAddFriends", fn)}
}

func (_c *Initializer_RegisterBeforeAddFriends_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddFriendsRequest) (*api.AddFriendsRequest, error))) *Initializer_RegisterBeforeAddFriends_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddFriendsRequest) (*api.AddFriendsRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeAddFriends_Call) Return(_a0 error) *Initializer_RegisterBeforeAddFriends_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeAddFriends_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddFriendsRequest) (*api.AddFriendsRequest, error)) error) *Initializer_RegisterBeforeAddFriends_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeAddGroupUsers provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeAddGroupUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddGroupUsersRequest) (*api.AddGroupUsersRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeAddGroupUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddGroupUsersRequest) (*api.AddGroupUsersRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeAddGroupUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeAddGroupUsers'
type Initializer_RegisterBeforeAddGroupUsers_Call struct {
	*mock.Call
}

// RegisterBeforeAddGroupUsers is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AddGroupUsersRequest)(*api.AddGroupUsersRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeAddGroupUsers(fn interface{}) *Initializer_RegisterBeforeAddGroupUsers_Call {
	return &Initializer_RegisterBeforeAddGroupUsers_Call{Call: _e.mock.On("RegisterBeforeAddGroupUsers", fn)}
}

func (_c *Initializer_RegisterBeforeAddGroupUsers_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddGroupUsersRequest) (*api.AddGroupUsersRequest, error))) *Initializer_RegisterBeforeAddGroupUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddGroupUsersRequest) (*api.AddGroupUsersRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeAddGroupUsers_Call) Return(_a0 error) *Initializer_RegisterBeforeAddGroupUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeAddGroupUsers_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddGroupUsersRequest) (*api.AddGroupUsersRequest, error)) error) *Initializer_RegisterBeforeAddGroupUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeAuthenticateApple provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeAuthenticateApple(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateAppleRequest) (*api.AuthenticateAppleRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeAuthenticateApple")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateAppleRequest) (*api.AuthenticateAppleRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeAuthenticateApple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeAuthenticateApple'
type Initializer_RegisterBeforeAuthenticateApple_Call struct {
	*mock.Call
}

// RegisterBeforeAuthenticateApple is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AuthenticateAppleRequest)(*api.AuthenticateAppleRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeAuthenticateApple(fn interface{}) *Initializer_RegisterBeforeAuthenticateApple_Call {
	return &Initializer_RegisterBeforeAuthenticateApple_Call{Call: _e.mock.On("RegisterBeforeAuthenticateApple", fn)}
}

func (_c *Initializer_RegisterBeforeAuthenticateApple_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateAppleRequest) (*api.AuthenticateAppleRequest, error))) *Initializer_RegisterBeforeAuthenticateApple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateAppleRequest) (*api.AuthenticateAppleRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeAuthenticateApple_Call) Return(_a0 error) *Initializer_RegisterBeforeAuthenticateApple_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeAuthenticateApple_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateAppleRequest) (*api.AuthenticateAppleRequest, error)) error) *Initializer_RegisterBeforeAuthenticateApple_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeAuthenticateCustom provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeAuthenticateCustom(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateCustomRequest) (*api.AuthenticateCustomRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeAuthenticateCustom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateCustomRequest) (*api.AuthenticateCustomRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeAuthenticateCustom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeAuthenticateCustom'
type Initializer_RegisterBeforeAuthenticateCustom_Call struct {
	*mock.Call
}

// RegisterBeforeAuthenticateCustom is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AuthenticateCustomRequest)(*api.AuthenticateCustomRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeAuthenticateCustom(fn interface{}) *Initializer_RegisterBeforeAuthenticateCustom_Call {
	return &Initializer_RegisterBeforeAuthenticateCustom_Call{Call: _e.mock.On("RegisterBeforeAuthenticateCustom", fn)}
}

func (_c *Initializer_RegisterBeforeAuthenticateCustom_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateCustomRequest) (*api.AuthenticateCustomRequest, error))) *Initializer_RegisterBeforeAuthenticateCustom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateCustomRequest) (*api.AuthenticateCustomRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeAuthenticateCustom_Call) Return(_a0 error) *Initializer_RegisterBeforeAuthenticateCustom_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeAuthenticateCustom_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateCustomRequest) (*api.AuthenticateCustomRequest, error)) error) *Initializer_RegisterBeforeAuthenticateCustom_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeAuthenticateDevice provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeAuthenticateDevice(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateDeviceRequest) (*api.AuthenticateDeviceRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeAuthenticateDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateDeviceRequest) (*api.AuthenticateDeviceRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeAuthenticateDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeAuthenticateDevice'
type Initializer_RegisterBeforeAuthenticateDevice_Call struct {
	*mock.Call
}

// RegisterBeforeAuthenticateDevice is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AuthenticateDeviceRequest)(*api.AuthenticateDeviceRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeAuthenticateDevice(fn interface{}) *Initializer_RegisterBeforeAuthenticateDevice_Call {
	return &Initializer_RegisterBeforeAuthenticateDevice_Call{Call: _e.mock.On("RegisterBeforeAuthenticateDevice", fn)}
}

func (_c *Initializer_RegisterBeforeAuthenticateDevice_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateDeviceRequest) (*api.AuthenticateDeviceRequest, error))) *Initializer_RegisterBeforeAuthenticateDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateDeviceRequest) (*api.AuthenticateDeviceRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeAuthenticateDevice_Call) Return(_a0 error) *Initializer_RegisterBeforeAuthenticateDevice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeAuthenticateDevice_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateDeviceRequest) (*api.AuthenticateDeviceRequest, error)) error) *Initializer_RegisterBeforeAuthenticateDevice_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeAuthenticateEmail provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeAuthenticateEmail(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateEmailRequest) (*api.AuthenticateEmailRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeAuthenticateEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateEmailRequest) (*api.AuthenticateEmailRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeAuthenticateEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeAuthenticateEmail'
type Initializer_RegisterBeforeAuthenticateEmail_Call struct {
	*mock.Call
}

// RegisterBeforeAuthenticateEmail is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AuthenticateEmailRequest)(*api.AuthenticateEmailRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeAuthenticateEmail(fn interface{}) *Initializer_RegisterBeforeAuthenticateEmail_Call {
	return &Initializer_RegisterBeforeAuthenticateEmail_Call{Call: _e.mock.On("RegisterBeforeAuthenticateEmail", fn)}
}

func (_c *Initializer_RegisterBeforeAuthenticateEmail_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateEmailRequest) (*api.AuthenticateEmailRequest, error))) *Initializer_RegisterBeforeAuthenticateEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateEmailRequest) (*api.AuthenticateEmailRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeAuthenticateEmail_Call) Return(_a0 error) *Initializer_RegisterBeforeAuthenticateEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeAuthenticateEmail_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateEmailRequest) (*api.AuthenticateEmailRequest, error)) error) *Initializer_RegisterBeforeAuthenticateEmail_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeAuthenticateFacebook provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeAuthenticateFacebook(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateFacebookRequest) (*api.AuthenticateFacebookRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeAuthenticateFacebook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateFacebookRequest) (*api.AuthenticateFacebookRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeAuthenticateFacebook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeAuthenticateFacebook'
type Initializer_RegisterBeforeAuthenticateFacebook_Call struct {
	*mock.Call
}

// RegisterBeforeAuthenticateFacebook is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AuthenticateFacebookRequest)(*api.AuthenticateFacebookRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeAuthenticateFacebook(fn interface{}) *Initializer_RegisterBeforeAuthenticateFacebook_Call {
	return &Initializer_RegisterBeforeAuthenticateFacebook_Call{Call: _e.mock.On("RegisterBeforeAuthenticateFacebook", fn)}
}

func (_c *Initializer_RegisterBeforeAuthenticateFacebook_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateFacebookRequest) (*api.AuthenticateFacebookRequest, error))) *Initializer_RegisterBeforeAuthenticateFacebook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateFacebookRequest) (*api.AuthenticateFacebookRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeAuthenticateFacebook_Call) Return(_a0 error) *Initializer_RegisterBeforeAuthenticateFacebook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeAuthenticateFacebook_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateFacebookRequest) (*api.AuthenticateFacebookRequest, error)) error) *Initializer_RegisterBeforeAuthenticateFacebook_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeAuthenticateFacebookInstantGame provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeAuthenticateFacebookInstantGame(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateFacebookInstantGameRequest) (*api.AuthenticateFacebookInstantGameRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeAuthenticateFacebookInstantGame")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateFacebookInstantGameRequest) (*api.AuthenticateFacebookInstantGameRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeAuthenticateFacebookInstantGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeAuthenticateFacebookInstantGame'
type Initializer_RegisterBeforeAuthenticateFacebookInstantGame_Call struct {
	*mock.Call
}

// RegisterBeforeAuthenticateFacebookInstantGame is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AuthenticateFacebookInstantGameRequest)(*api.AuthenticateFacebookInstantGameRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeAuthenticateFacebookInstantGame(fn interface{}) *Initializer_RegisterBeforeAuthenticateFacebookInstantGame_Call {
	return &Initializer_RegisterBeforeAuthenticateFacebookInstantGame_Call{Call: _e.mock.On("RegisterBeforeAuthenticateFacebookInstantGame", fn)}
}

func (_c *Initializer_RegisterBeforeAuthenticateFacebookInstantGame_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateFacebookInstantGameRequest) (*api.AuthenticateFacebookInstantGameRequest, error))) *Initializer_RegisterBeforeAuthenticateFacebookInstantGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateFacebookInstantGameRequest) (*api.AuthenticateFacebookInstantGameRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeAuthenticateFacebookInstantGame_Call) Return(_a0 error) *Initializer_RegisterBeforeAuthenticateFacebookInstantGame_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeAuthenticateFacebookInstantGame_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateFacebookInstantGameRequest) (*api.AuthenticateFacebookInstantGameRequest, error)) error) *Initializer_RegisterBeforeAuthenticateFacebookInstantGame_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeAuthenticateGameCenter provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeAuthenticateGameCenter(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateGameCenterRequest) (*api.AuthenticateGameCenterRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeAuthenticateGameCenter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateGameCenterRequest) (*api.AuthenticateGameCenterRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeAuthenticateGameCenter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeAuthenticateGameCenter'
type Initializer_RegisterBeforeAuthenticateGameCenter_Call struct {
	*mock.Call
}

// RegisterBeforeAuthenticateGameCenter is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AuthenticateGameCenterRequest)(*api.AuthenticateGameCenterRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeAuthenticateGameCenter(fn interface{}) *Initializer_RegisterBeforeAuthenticateGameCenter_Call {
	return &Initializer_RegisterBeforeAuthenticateGameCenter_Call{Call: _e.mock.On("RegisterBeforeAuthenticateGameCenter", fn)}
}

func (_c *Initializer_RegisterBeforeAuthenticateGameCenter_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateGameCenterRequest) (*api.AuthenticateGameCenterRequest, error))) *Initializer_RegisterBeforeAuthenticateGameCenter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateGameCenterRequest) (*api.AuthenticateGameCenterRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeAuthenticateGameCenter_Call) Return(_a0 error) *Initializer_RegisterBeforeAuthenticateGameCenter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeAuthenticateGameCenter_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateGameCenterRequest) (*api.AuthenticateGameCenterRequest, error)) error) *Initializer_RegisterBeforeAuthenticateGameCenter_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeAuthenticateGoogle provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeAuthenticateGoogle(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateGoogleRequest) (*api.AuthenticateGoogleRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeAuthenticateGoogle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateGoogleRequest) (*api.AuthenticateGoogleRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeAuthenticateGoogle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeAuthenticateGoogle'
type Initializer_RegisterBeforeAuthenticateGoogle_Call struct {
	*mock.Call
}

// RegisterBeforeAuthenticateGoogle is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AuthenticateGoogleRequest)(*api.AuthenticateGoogleRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeAuthenticateGoogle(fn interface{}) *Initializer_RegisterBeforeAuthenticateGoogle_Call {
	return &Initializer_RegisterBeforeAuthenticateGoogle_Call{Call: _e.mock.On("RegisterBeforeAuthenticateGoogle", fn)}
}

func (_c *Initializer_RegisterBeforeAuthenticateGoogle_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateGoogleRequest) (*api.AuthenticateGoogleRequest, error))) *Initializer_RegisterBeforeAuthenticateGoogle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateGoogleRequest) (*api.AuthenticateGoogleRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeAuthenticateGoogle_Call) Return(_a0 error) *Initializer_RegisterBeforeAuthenticateGoogle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeAuthenticateGoogle_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateGoogleRequest) (*api.AuthenticateGoogleRequest, error)) error) *Initializer_RegisterBeforeAuthenticateGoogle_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeAuthenticateSteam provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeAuthenticateSteam(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateSteamRequest) (*api.AuthenticateSteamRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeAuthenticateSteam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateSteamRequest) (*api.AuthenticateSteamRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeAuthenticateSteam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeAuthenticateSteam'
type Initializer_RegisterBeforeAuthenticateSteam_Call struct {
	*mock.Call
}

// RegisterBeforeAuthenticateSteam is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AuthenticateSteamRequest)(*api.AuthenticateSteamRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeAuthenticateSteam(fn interface{}) *Initializer_RegisterBeforeAuthenticateSteam_Call {
	return &Initializer_RegisterBeforeAuthenticateSteam_Call{Call: _e.mock.On("RegisterBeforeAuthenticateSteam", fn)}
}

func (_c *Initializer_RegisterBeforeAuthenticateSteam_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateSteamRequest) (*api.AuthenticateSteamRequest, error))) *Initializer_RegisterBeforeAuthenticateSteam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateSteamRequest) (*api.AuthenticateSteamRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeAuthenticateSteam_Call) Return(_a0 error) *Initializer_RegisterBeforeAuthenticateSteam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeAuthenticateSteam_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateSteamRequest) (*api.AuthenticateSteamRequest, error)) error) *Initializer_RegisterBeforeAuthenticateSteam_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeBanGroupUsers provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeBanGroupUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BanGroupUsersRequest) (*api.BanGroupUsersRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeBanGroupUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BanGroupUsersRequest) (*api.BanGroupUsersRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeBanGroupUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeBanGroupUsers'
type Initializer_RegisterBeforeBanGroupUsers_Call struct {
	*mock.Call
}

// RegisterBeforeBanGroupUsers is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.BanGroupUsersRequest)(*api.BanGroupUsersRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeBanGroupUsers(fn interface{}) *Initializer_RegisterBeforeBanGroupUsers_Call {
	return &Initializer_RegisterBeforeBanGroupUsers_Call{Call: _e.mock.On("RegisterBeforeBanGroupUsers", fn)}
}

func (_c *Initializer_RegisterBeforeBanGroupUsers_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BanGroupUsersRequest) (*api.BanGroupUsersRequest, error))) *Initializer_RegisterBeforeBanGroupUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BanGroupUsersRequest) (*api.BanGroupUsersRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeBanGroupUsers_Call) Return(_a0 error) *Initializer_RegisterBeforeBanGroupUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeBanGroupUsers_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BanGroupUsersRequest) (*api.BanGroupUsersRequest, error)) error) *Initializer_RegisterBeforeBanGroupUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeBlockFriends provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeBlockFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BlockFriendsRequest) (*api.BlockFriendsRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeBlockFriends")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BlockFriendsRequest) (*api.BlockFriendsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeBlockFriends_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeBlockFriends'
type Initializer_RegisterBeforeBlockFriends_Call struct {
	*mock.Call
}

// RegisterBeforeBlockFriends is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.BlockFriendsRequest)(*api.BlockFriendsRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeBlockFriends(fn interface{}) *Initializer_RegisterBeforeBlockFriends_Call {
	return &Initializer_RegisterBeforeBlockFriends_Call{Call: _e.mock.On("RegisterBeforeBlockFriends", fn)}
}

func (_c *Initializer_RegisterBeforeBlockFriends_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BlockFriendsRequest) (*api.BlockFriendsRequest, error))) *Initializer_RegisterBeforeBlockFriends_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BlockFriendsRequest) (*api.BlockFriendsRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeBlockFriends_Call) Return(_a0 error) *Initializer_RegisterBeforeBlockFriends_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeBlockFriends_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BlockFriendsRequest) (*api.BlockFriendsRequest, error)) error) *Initializer_RegisterBeforeBlockFriends_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeCreateGroup provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeCreateGroup(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.CreateGroupRequest) (*api.CreateGroupRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeCreateGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.CreateGroupRequest) (*api.CreateGroupRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeCreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeCreateGroup'
type Initializer_RegisterBeforeCreateGroup_Call struct {
	*mock.Call
}

// RegisterBeforeCreateGroup is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.CreateGroupRequest)(*api.CreateGroupRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeCreateGroup(fn interface{}) *Initializer_RegisterBeforeCreateGroup_Call {
	return &Initializer_RegisterBeforeCreateGroup_Call{Call: _e.mock.On("RegisterBeforeCreateGroup", fn)}
}

func (_c *Initializer_RegisterBeforeCreateGroup_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.CreateGroupRequest) (*api.CreateGroupRequest, error))) *Initializer_RegisterBeforeCreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.CreateGroupRequest) (*api.CreateGroupRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeCreateGroup_Call) Return(_a0 error) *Initializer_RegisterBeforeCreateGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeCreateGroup_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.CreateGroupRequest) (*api.CreateGroupRequest, error)) error) *Initializer_RegisterBeforeCreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeDeleteAccount provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeDeleteAccount(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeDeleteAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeDeleteAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeDeleteAccount'
type Initializer_RegisterBeforeDeleteAccount_Call struct {
	*mock.Call
}

// RegisterBeforeDeleteAccount is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule) error
func (_e *Initializer_Expecter) RegisterBeforeDeleteAccount(fn interface{}) *Initializer_RegisterBeforeDeleteAccount_Call {
	return &Initializer_RegisterBeforeDeleteAccount_Call{Call: _e.mock.On("RegisterBeforeDeleteAccount", fn)}
}

func (_c *Initializer_RegisterBeforeDeleteAccount_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) error)) *Initializer_RegisterBeforeDeleteAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) error))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeDeleteAccount_Call) Return(_a0 error) *Initializer_RegisterBeforeDeleteAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeDeleteAccount_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) error) error) *Initializer_RegisterBeforeDeleteAccount_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeDeleteFriends provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeDeleteFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteFriendsRequest) (*api.DeleteFriendsRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeDeleteFriends")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteFriendsRequest) (*api.DeleteFriendsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeDeleteFriends_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeDeleteFriends'
type Initializer_RegisterBeforeDeleteFriends_Call struct {
	*mock.Call
}

// RegisterBeforeDeleteFriends is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.DeleteFriendsRequest)(*api.DeleteFriendsRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeDeleteFriends(fn interface{}) *Initializer_RegisterBeforeDeleteFriends_Call {
	return &Initializer_RegisterBeforeDeleteFriends_Call{Call: _e.mock.On("RegisterBeforeDeleteFriends", fn)}
}

func (_c *Initializer_RegisterBeforeDeleteFriends_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteFriendsRequest) (*api.DeleteFriendsRequest, error))) *Initializer_RegisterBeforeDeleteFriends_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteFriendsRequest) (*api.DeleteFriendsRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeDeleteFriends_Call) Return(_a0 error) *Initializer_RegisterBeforeDeleteFriends_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeDeleteFriends_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteFriendsRequest) (*api.DeleteFriendsRequest, error)) error) *Initializer_RegisterBeforeDeleteFriends_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeDeleteGroup provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeDeleteGroup(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteGroupRequest) (*api.DeleteGroupRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeDeleteGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteGroupRequest) (*api.DeleteGroupRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeDeleteGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeDeleteGroup'
type Initializer_RegisterBeforeDeleteGroup_Call struct {
	*mock.Call
}

// RegisterBeforeDeleteGroup is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.DeleteGroupRequest)(*api.DeleteGroupRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeDeleteGroup(fn interface{}) *Initializer_RegisterBeforeDeleteGroup_Call {
	return &Initializer_RegisterBeforeDeleteGroup_Call{Call: _e.mock.On("RegisterBeforeDeleteGroup", fn)}
}

func (_c *Initializer_RegisterBeforeDeleteGroup_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteGroupRequest) (*api.DeleteGroupRequest, error))) *Initializer_RegisterBeforeDeleteGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteGroupRequest) (*api.DeleteGroupRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeDeleteGroup_Call) Return(_a0 error) *Initializer_RegisterBeforeDeleteGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeDeleteGroup_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteGroupRequest) (*api.DeleteGroupRequest, error)) error) *Initializer_RegisterBeforeDeleteGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeDeleteLeaderboardRecord provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeDeleteLeaderboardRecord(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteLeaderboardRecordRequest) (*api.DeleteLeaderboardRecordRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeDeleteLeaderboardRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteLeaderboardRecordRequest) (*api.DeleteLeaderboardRecordRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeDeleteLeaderboardRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeDeleteLeaderboardRecord'
type Initializer_RegisterBeforeDeleteLeaderboardRecord_Call struct {
	*mock.Call
}

// RegisterBeforeDeleteLeaderboardRecord is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.DeleteLeaderboardRecordRequest)(*api.DeleteLeaderboardRecordRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeDeleteLeaderboardRecord(fn interface{}) *Initializer_RegisterBeforeDeleteLeaderboardRecord_Call {
	return &Initializer_RegisterBeforeDeleteLeaderboardRecord_Call{Call: _e.mock.On("RegisterBeforeDeleteLeaderboardRecord", fn)}
}

func (_c *Initializer_RegisterBeforeDeleteLeaderboardRecord_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteLeaderboardRecordRequest) (*api.DeleteLeaderboardRecordRequest, error))) *Initializer_RegisterBeforeDeleteLeaderboardRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteLeaderboardRecordRequest) (*api.DeleteLeaderboardRecordRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeDeleteLeaderboardRecord_Call) Return(_a0 error) *Initializer_RegisterBeforeDeleteLeaderboardRecord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeDeleteLeaderboardRecord_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteLeaderboardRecordRequest) (*api.DeleteLeaderboardRecordRequest, error)) error) *Initializer_RegisterBeforeDeleteLeaderboardRecord_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeDeleteNotifications provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeDeleteNotifications(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteNotificationsRequest) (*api.DeleteNotificationsRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeDeleteNotifications")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteNotificationsRequest) (*api.DeleteNotificationsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeDeleteNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeDeleteNotifications'
type Initializer_RegisterBeforeDeleteNotifications_Call struct {
	*mock.Call
}

// RegisterBeforeDeleteNotifications is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.DeleteNotificationsRequest)(*api.DeleteNotificationsRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeDeleteNotifications(fn interface{}) *Initializer_RegisterBeforeDeleteNotifications_Call {
	return &Initializer_RegisterBeforeDeleteNotifications_Call{Call: _e.mock.On("RegisterBeforeDeleteNotifications", fn)}
}

func (_c *Initializer_RegisterBeforeDeleteNotifications_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteNotificationsRequest) (*api.DeleteNotificationsRequest, error))) *Initializer_RegisterBeforeDeleteNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteNotificationsRequest) (*api.DeleteNotificationsRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeDeleteNotifications_Call) Return(_a0 error) *Initializer_RegisterBeforeDeleteNotifications_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeDeleteNotifications_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteNotificationsRequest) (*api.DeleteNotificationsRequest, error)) error) *Initializer_RegisterBeforeDeleteNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeDeleteStorageObjects provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeDeleteStorageObjects(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteStorageObjectsRequest) (*api.DeleteStorageObjectsRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeDeleteStorageObjects")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteStorageObjectsRequest) (*api.DeleteStorageObjectsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeDeleteStorageObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeDeleteStorageObjects'
type Initializer_RegisterBeforeDeleteStorageObjects_Call struct {
	*mock.Call
}

// RegisterBeforeDeleteStorageObjects is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.DeleteStorageObjectsRequest)(*api.DeleteStorageObjectsRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeDeleteStorageObjects(fn interface{}) *Initializer_RegisterBeforeDeleteStorageObjects_Call {
	return &Initializer_RegisterBeforeDeleteStorageObjects_Call{Call: _e.mock.On("RegisterBeforeDeleteStorageObjects", fn)}
}

func (_c *Initializer_RegisterBeforeDeleteStorageObjects_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteStorageObjectsRequest) (*api.DeleteStorageObjectsRequest, error))) *Initializer_RegisterBeforeDeleteStorageObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteStorageObjectsRequest) (*api.DeleteStorageObjectsRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeDeleteStorageObjects_Call) Return(_a0 error) *Initializer_RegisterBeforeDeleteStorageObjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeDeleteStorageObjects_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteStorageObjectsRequest) (*api.DeleteStorageObjectsRequest, error)) error) *Initializer_RegisterBeforeDeleteStorageObjects_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeDeleteTournamentRecord provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeDeleteTournamentRecord(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteTournamentRecordRequest) (*api.DeleteTournamentRecordRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeDeleteTournamentRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteTournamentRecordRequest) (*api.DeleteTournamentRecordRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeDeleteTournamentRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeDeleteTournamentRecord'
type Initializer_RegisterBeforeDeleteTournamentRecord_Call struct {
	*mock.Call
}

// RegisterBeforeDeleteTournamentRecord is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.DeleteTournamentRecordRequest)(*api.DeleteTournamentRecordRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeDeleteTournamentRecord(fn interface{}) *Initializer_RegisterBeforeDeleteTournamentRecord_Call {
	return &Initializer_RegisterBeforeDeleteTournamentRecord_Call{Call: _e.mock.On("RegisterBeforeDeleteTournamentRecord", fn)}
}

func (_c *Initializer_RegisterBeforeDeleteTournamentRecord_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteTournamentRecordRequest) (*api.DeleteTournamentRecordRequest, error))) *Initializer_RegisterBeforeDeleteTournamentRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteTournamentRecordRequest) (*api.DeleteTournamentRecordRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeDeleteTournamentRecord_Call) Return(_a0 error) *Initializer_RegisterBeforeDeleteTournamentRecord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeDeleteTournamentRecord_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteTournamentRecordRequest) (*api.DeleteTournamentRecordRequest, error)) error) *Initializer_RegisterBeforeDeleteTournamentRecord_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeDemoteGroupUsers provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeDemoteGroupUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DemoteGroupUsersRequest) (*api.DemoteGroupUsersRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeDemoteGroupUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DemoteGroupUsersRequest) (*api.DemoteGroupUsersRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeDemoteGroupUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeDemoteGroupUsers'
type Initializer_RegisterBeforeDemoteGroupUsers_Call struct {
	*mock.Call
}

// RegisterBeforeDemoteGroupUsers is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.DemoteGroupUsersRequest)(*api.DemoteGroupUsersRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeDemoteGroupUsers(fn interface{}) *Initializer_RegisterBeforeDemoteGroupUsers_Call {
	return &Initializer_RegisterBeforeDemoteGroupUsers_Call{Call: _e.mock.On("RegisterBeforeDemoteGroupUsers", fn)}
}

func (_c *Initializer_RegisterBeforeDemoteGroupUsers_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DemoteGroupUsersRequest) (*api.DemoteGroupUsersRequest, error))) *Initializer_RegisterBeforeDemoteGroupUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DemoteGroupUsersRequest) (*api.DemoteGroupUsersRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeDemoteGroupUsers_Call) Return(_a0 error) *Initializer_RegisterBeforeDemoteGroupUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeDemoteGroupUsers_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DemoteGroupUsersRequest) (*api.DemoteGroupUsersRequest, error)) error) *Initializer_RegisterBeforeDemoteGroupUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeGetAccount provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeGetAccount(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeGetAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeGetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeGetAccount'
type Initializer_RegisterBeforeGetAccount_Call struct {
	*mock.Call
}

// RegisterBeforeGetAccount is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule) error
func (_e *Initializer_Expecter) RegisterBeforeGetAccount(fn interface{}) *Initializer_RegisterBeforeGetAccount_Call {
	return &Initializer_RegisterBeforeGetAccount_Call{Call: _e.mock.On("RegisterBeforeGetAccount", fn)}
}

func (_c *Initializer_RegisterBeforeGetAccount_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) error)) *Initializer_RegisterBeforeGetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) error))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeGetAccount_Call) Return(_a0 error) *Initializer_RegisterBeforeGetAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeGetAccount_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) error) error) *Initializer_RegisterBeforeGetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeGetSubscription provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeGetSubscription(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GetSubscriptionRequest) (*api.GetSubscriptionRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeGetSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GetSubscriptionRequest) (*api.GetSubscriptionRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeGetSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeGetSubscription'
type Initializer_RegisterBeforeGetSubscription_Call struct {
	*mock.Call
}

// RegisterBeforeGetSubscription is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.GetSubscriptionRequest)(*api.GetSubscriptionRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeGetSubscription(fn interface{}) *Initializer_RegisterBeforeGetSubscription_Call {
	return &Initializer_RegisterBeforeGetSubscription_Call{Call: _e.mock.On("RegisterBeforeGetSubscription", fn)}
}

func (_c *Initializer_RegisterBeforeGetSubscription_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GetSubscriptionRequest) (*api.GetSubscriptionRequest, error))) *Initializer_RegisterBeforeGetSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GetSubscriptionRequest) (*api.GetSubscriptionRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeGetSubscription_Call) Return(_a0 error) *Initializer_RegisterBeforeGetSubscription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeGetSubscription_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GetSubscriptionRequest) (*api.GetSubscriptionRequest, error)) error) *Initializer_RegisterBeforeGetSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeGetUsers provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeGetUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GetUsersRequest) (*api.GetUsersRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeGetUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GetUsersRequest) (*api.GetUsersRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeGetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeGetUsers'
type Initializer_RegisterBeforeGetUsers_Call struct {
	*mock.Call
}

// RegisterBeforeGetUsers is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.GetUsersRequest)(*api.GetUsersRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeGetUsers(fn interface{}) *Initializer_RegisterBeforeGetUsers_Call {
	return &Initializer_RegisterBeforeGetUsers_Call{Call: _e.mock.On("RegisterBeforeGetUsers", fn)}
}

func (_c *Initializer_RegisterBeforeGetUsers_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GetUsersRequest) (*api.GetUsersRequest, error))) *Initializer_RegisterBeforeGetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GetUsersRequest) (*api.GetUsersRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeGetUsers_Call) Return(_a0 error) *Initializer_RegisterBeforeGetUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeGetUsers_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GetUsersRequest) (*api.GetUsersRequest, error)) error) *Initializer_RegisterBeforeGetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeImportFacebookFriends provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeImportFacebookFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportFacebookFriendsRequest) (*api.ImportFacebookFriendsRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeImportFacebookFriends")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportFacebookFriendsRequest) (*api.ImportFacebookFriendsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeImportFacebookFriends_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeImportFacebookFriends'
type Initializer_RegisterBeforeImportFacebookFriends_Call struct {
	*mock.Call
}

// RegisterBeforeImportFacebookFriends is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ImportFacebookFriendsRequest)(*api.ImportFacebookFriendsRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeImportFacebookFriends(fn interface{}) *Initializer_RegisterBeforeImportFacebookFriends_Call {
	return &Initializer_RegisterBeforeImportFacebookFriends_Call{Call: _e.mock.On("RegisterBeforeImportFacebookFriends", fn)}
}

func (_c *Initializer_RegisterBeforeImportFacebookFriends_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportFacebookFriendsRequest) (*api.ImportFacebookFriendsRequest, error))) *Initializer_RegisterBeforeImportFacebookFriends_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportFacebookFriendsRequest) (*api.ImportFacebookFriendsRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeImportFacebookFriends_Call) Return(_a0 error) *Initializer_RegisterBeforeImportFacebookFriends_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeImportFacebookFriends_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportFacebookFriendsRequest) (*api.ImportFacebookFriendsRequest, error)) error) *Initializer_RegisterBeforeImportFacebookFriends_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeImportSteamFriends provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeImportSteamFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportSteamFriendsRequest) (*api.ImportSteamFriendsRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeImportSteamFriends")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportSteamFriendsRequest) (*api.ImportSteamFriendsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeImportSteamFriends_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeImportSteamFriends'
type Initializer_RegisterBeforeImportSteamFriends_Call struct {
	*mock.Call
}

// RegisterBeforeImportSteamFriends is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ImportSteamFriendsRequest)(*api.ImportSteamFriendsRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeImportSteamFriends(fn interface{}) *Initializer_RegisterBeforeImportSteamFriends_Call {
	return &Initializer_RegisterBeforeImportSteamFriends_Call{Call: _e.mock.On("RegisterBeforeImportSteamFriends", fn)}
}

func (_c *Initializer_RegisterBeforeImportSteamFriends_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportSteamFriendsRequest) (*api.ImportSteamFriendsRequest, error))) *Initializer_RegisterBeforeImportSteamFriends_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportSteamFriendsRequest) (*api.ImportSteamFriendsRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeImportSteamFriends_Call) Return(_a0 error) *Initializer_RegisterBeforeImportSteamFriends_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeImportSteamFriends_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportSteamFriendsRequest) (*api.ImportSteamFriendsRequest, error)) error) *Initializer_RegisterBeforeImportSteamFriends_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeJoinGroup provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeJoinGroup(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinGroupRequest) (*api.JoinGroupRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeJoinGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinGroupRequest) (*api.JoinGroupRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeJoinGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeJoinGroup'
type Initializer_RegisterBeforeJoinGroup_Call struct {
	*mock.Call
}

// RegisterBeforeJoinGroup is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.JoinGroupRequest)(*api.JoinGroupRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeJoinGroup(fn interface{}) *Initializer_RegisterBeforeJoinGroup_Call {
	return &Initializer_RegisterBeforeJoinGroup_Call{Call: _e.mock.On("RegisterBeforeJoinGroup", fn)}
}

func (_c *Initializer_RegisterBeforeJoinGroup_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinGroupRequest) (*api.JoinGroupRequest, error))) *Initializer_RegisterBeforeJoinGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinGroupRequest) (*api.JoinGroupRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeJoinGroup_Call) Return(_a0 error) *Initializer_RegisterBeforeJoinGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeJoinGroup_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinGroupRequest) (*api.JoinGroupRequest, error)) error) *Initializer_RegisterBeforeJoinGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeJoinTournament provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeJoinTournament(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinTournamentRequest) (*api.JoinTournamentRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeJoinTournament")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinTournamentRequest) (*api.JoinTournamentRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeJoinTournament_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeJoinTournament'
type Initializer_RegisterBeforeJoinTournament_Call struct {
	*mock.Call
}

// RegisterBeforeJoinTournament is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.JoinTournamentRequest)(*api.JoinTournamentRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeJoinTournament(fn interface{}) *Initializer_RegisterBeforeJoinTournament_Call {
	return &Initializer_RegisterBeforeJoinTournament_Call{Call: _e.mock.On("RegisterBeforeJoinTournament", fn)}
}

func (_c *Initializer_RegisterBeforeJoinTournament_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinTournamentRequest) (*api.JoinTournamentRequest, error))) *Initializer_RegisterBeforeJoinTournament_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinTournamentRequest) (*api.JoinTournamentRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeJoinTournament_Call) Return(_a0 error) *Initializer_RegisterBeforeJoinTournament_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeJoinTournament_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinTournamentRequest) (*api.JoinTournamentRequest, error)) error) *Initializer_RegisterBeforeJoinTournament_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeKickGroupUsers provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeKickGroupUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.KickGroupUsersRequest) (*api.KickGroupUsersRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeKickGroupUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.KickGroupUsersRequest) (*api.KickGroupUsersRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeKickGroupUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeKickGroupUsers'
type Initializer_RegisterBeforeKickGroupUsers_Call struct {
	*mock.Call
}

// RegisterBeforeKickGroupUsers is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.KickGroupUsersRequest)(*api.KickGroupUsersRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeKickGroupUsers(fn interface{}) *Initializer_RegisterBeforeKickGroupUsers_Call {
	return &Initializer_RegisterBeforeKickGroupUsers_Call{Call: _e.mock.On("RegisterBeforeKickGroupUsers", fn)}
}

func (_c *Initializer_RegisterBeforeKickGroupUsers_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.KickGroupUsersRequest) (*api.KickGroupUsersRequest, error))) *Initializer_RegisterBeforeKickGroupUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.KickGroupUsersRequest) (*api.KickGroupUsersRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeKickGroupUsers_Call) Return(_a0 error) *Initializer_RegisterBeforeKickGroupUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeKickGroupUsers_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.KickGroupUsersRequest) (*api.KickGroupUsersRequest, error)) error) *Initializer_RegisterBeforeKickGroupUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeLeaveGroup provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeLeaveGroup(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaveGroupRequest) (*api.LeaveGroupRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeLeaveGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaveGroupRequest) (*api.LeaveGroupRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeLeaveGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeLeaveGroup'
type Initializer_RegisterBeforeLeaveGroup_Call struct {
	*mock.Call
}

// RegisterBeforeLeaveGroup is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.LeaveGroupRequest)(*api.LeaveGroupRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeLeaveGroup(fn interface{}) *Initializer_RegisterBeforeLeaveGroup_Call {
	return &Initializer_RegisterBeforeLeaveGroup_Call{Call: _e.mock.On("RegisterBeforeLeaveGroup", fn)}
}

func (_c *Initializer_RegisterBeforeLeaveGroup_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaveGroupRequest) (*api.LeaveGroupRequest, error))) *Initializer_RegisterBeforeLeaveGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaveGroupRequest) (*api.LeaveGroupRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeLeaveGroup_Call) Return(_a0 error) *Initializer_RegisterBeforeLeaveGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeLeaveGroup_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaveGroupRequest) (*api.LeaveGroupRequest, error)) error) *Initializer_RegisterBeforeLeaveGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeLinkApple provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeLinkApple(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) (*api.AccountApple, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeLinkApple")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) (*api.AccountApple, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeLinkApple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeLinkApple'
type Initializer_RegisterBeforeLinkApple_Call struct {
	*mock.Call
}

// RegisterBeforeLinkApple is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountApple)(*api.AccountApple , error)
func (_e *Initializer_Expecter) RegisterBeforeLinkApple(fn interface{}) *Initializer_RegisterBeforeLinkApple_Call {
	return &Initializer_RegisterBeforeLinkApple_Call{Call: _e.mock.On("RegisterBeforeLinkApple", fn)}
}

func (_c *Initializer_RegisterBeforeLinkApple_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) (*api.AccountApple, error))) *Initializer_RegisterBeforeLinkApple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) (*api.AccountApple, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeLinkApple_Call) Return(_a0 error) *Initializer_RegisterBeforeLinkApple_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeLinkApple_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) (*api.AccountApple, error)) error) *Initializer_RegisterBeforeLinkApple_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeLinkCustom provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeLinkCustom(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) (*api.AccountCustom, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeLinkCustom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) (*api.AccountCustom, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeLinkCustom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeLinkCustom'
type Initializer_RegisterBeforeLinkCustom_Call struct {
	*mock.Call
}

// RegisterBeforeLinkCustom is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountCustom)(*api.AccountCustom , error)
func (_e *Initializer_Expecter) RegisterBeforeLinkCustom(fn interface{}) *Initializer_RegisterBeforeLinkCustom_Call {
	return &Initializer_RegisterBeforeLinkCustom_Call{Call: _e.mock.On("RegisterBeforeLinkCustom", fn)}
}

func (_c *Initializer_RegisterBeforeLinkCustom_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) (*api.AccountCustom, error))) *Initializer_RegisterBeforeLinkCustom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) (*api.AccountCustom, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeLinkCustom_Call) Return(_a0 error) *Initializer_RegisterBeforeLinkCustom_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeLinkCustom_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) (*api.AccountCustom, error)) error) *Initializer_RegisterBeforeLinkCustom_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeLinkDevice provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeLinkDevice(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) (*api.AccountDevice, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeLinkDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) (*api.AccountDevice, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeLinkDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeLinkDevice'
type Initializer_RegisterBeforeLinkDevice_Call struct {
	*mock.Call
}

// RegisterBeforeLinkDevice is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountDevice)(*api.AccountDevice , error)
func (_e *Initializer_Expecter) RegisterBeforeLinkDevice(fn interface{}) *Initializer_RegisterBeforeLinkDevice_Call {
	return &Initializer_RegisterBeforeLinkDevice_Call{Call: _e.mock.On("RegisterBeforeLinkDevice", fn)}
}

func (_c *Initializer_RegisterBeforeLinkDevice_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) (*api.AccountDevice, error))) *Initializer_RegisterBeforeLinkDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) (*api.AccountDevice, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeLinkDevice_Call) Return(_a0 error) *Initializer_RegisterBeforeLinkDevice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeLinkDevice_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) (*api.AccountDevice, error)) error) *Initializer_RegisterBeforeLinkDevice_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeLinkEmail provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeLinkEmail(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) (*api.AccountEmail, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeLinkEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) (*api.AccountEmail, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeLinkEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeLinkEmail'
type Initializer_RegisterBeforeLinkEmail_Call struct {
	*mock.Call
}

// RegisterBeforeLinkEmail is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountEmail)(*api.AccountEmail , error)
func (_e *Initializer_Expecter) RegisterBeforeLinkEmail(fn interface{}) *Initializer_RegisterBeforeLinkEmail_Call {
	return &Initializer_RegisterBeforeLinkEmail_Call{Call: _e.mock.On("RegisterBeforeLinkEmail", fn)}
}

func (_c *Initializer_RegisterBeforeLinkEmail_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) (*api.AccountEmail, error))) *Initializer_RegisterBeforeLinkEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) (*api.AccountEmail, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeLinkEmail_Call) Return(_a0 error) *Initializer_RegisterBeforeLinkEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeLinkEmail_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) (*api.AccountEmail, error)) error) *Initializer_RegisterBeforeLinkEmail_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeLinkFacebook provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeLinkFacebook(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkFacebookRequest) (*api.LinkFacebookRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeLinkFacebook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkFacebookRequest) (*api.LinkFacebookRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeLinkFacebook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeLinkFacebook'
type Initializer_RegisterBeforeLinkFacebook_Call struct {
	*mock.Call
}

// RegisterBeforeLinkFacebook is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.LinkFacebookRequest)(*api.LinkFacebookRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeLinkFacebook(fn interface{}) *Initializer_RegisterBeforeLinkFacebook_Call {
	return &Initializer_RegisterBeforeLinkFacebook_Call{Call: _e.mock.On("RegisterBeforeLinkFacebook", fn)}
}

func (_c *Initializer_RegisterBeforeLinkFacebook_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkFacebookRequest) (*api.LinkFacebookRequest, error))) *Initializer_RegisterBeforeLinkFacebook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkFacebookRequest) (*api.LinkFacebookRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeLinkFacebook_Call) Return(_a0 error) *Initializer_RegisterBeforeLinkFacebook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeLinkFacebook_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkFacebookRequest) (*api.LinkFacebookRequest, error)) error) *Initializer_RegisterBeforeLinkFacebook_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeLinkFacebookInstantGame provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeLinkFacebookInstantGame(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) (*api.AccountFacebookInstantGame, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeLinkFacebookInstantGame")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) (*api.AccountFacebookInstantGame, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeLinkFacebookInstantGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeLinkFacebookInstantGame'
type Initializer_RegisterBeforeLinkFacebookInstantGame_Call struct {
	*mock.Call
}

// RegisterBeforeLinkFacebookInstantGame is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountFacebookInstantGame)(*api.AccountFacebookInstantGame , error)
func (_e *Initializer_Expecter) RegisterBeforeLinkFacebookInstantGame(fn interface{}) *Initializer_RegisterBeforeLinkFacebookInstantGame_Call {
	return &Initializer_RegisterBeforeLinkFacebookInstantGame_Call{Call: _e.mock.On("RegisterBeforeLinkFacebookInstantGame", fn)}
}

func (_c *Initializer_RegisterBeforeLinkFacebookInstantGame_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) (*api.AccountFacebookInstantGame, error))) *Initializer_RegisterBeforeLinkFacebookInstantGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) (*api.AccountFacebookInstantGame, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeLinkFacebookInstantGame_Call) Return(_a0 error) *Initializer_RegisterBeforeLinkFacebookInstantGame_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeLinkFacebookInstantGame_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) (*api.AccountFacebookInstantGame, error)) error) *Initializer_RegisterBeforeLinkFacebookInstantGame_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeLinkGameCenter provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeLinkGameCenter(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) (*api.AccountGameCenter, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeLinkGameCenter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) (*api.AccountGameCenter, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeLinkGameCenter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeLinkGameCenter'
type Initializer_RegisterBeforeLinkGameCenter_Call struct {
	*mock.Call
}

// RegisterBeforeLinkGameCenter is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountGameCenter)(*api.AccountGameCenter , error)
func (_e *Initializer_Expecter) RegisterBeforeLinkGameCenter(fn interface{}) *Initializer_RegisterBeforeLinkGameCenter_Call {
	return &Initializer_RegisterBeforeLinkGameCenter_Call{Call: _e.mock.On("RegisterBeforeLinkGameCenter", fn)}
}

func (_c *Initializer_RegisterBeforeLinkGameCenter_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) (*api.AccountGameCenter, error))) *Initializer_RegisterBeforeLinkGameCenter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) (*api.AccountGameCenter, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeLinkGameCenter_Call) Return(_a0 error) *Initializer_RegisterBeforeLinkGameCenter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeLinkGameCenter_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) (*api.AccountGameCenter, error)) error) *Initializer_RegisterBeforeLinkGameCenter_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeLinkGoogle provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeLinkGoogle(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) (*api.AccountGoogle, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeLinkGoogle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) (*api.AccountGoogle, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeLinkGoogle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeLinkGoogle'
type Initializer_RegisterBeforeLinkGoogle_Call struct {
	*mock.Call
}

// RegisterBeforeLinkGoogle is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountGoogle)(*api.AccountGoogle , error)
func (_e *Initializer_Expecter) RegisterBeforeLinkGoogle(fn interface{}) *Initializer_RegisterBeforeLinkGoogle_Call {
	return &Initializer_RegisterBeforeLinkGoogle_Call{Call: _e.mock.On("RegisterBeforeLinkGoogle", fn)}
}

func (_c *Initializer_RegisterBeforeLinkGoogle_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) (*api.AccountGoogle, error))) *Initializer_RegisterBeforeLinkGoogle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) (*api.AccountGoogle, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeLinkGoogle_Call) Return(_a0 error) *Initializer_RegisterBeforeLinkGoogle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeLinkGoogle_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) (*api.AccountGoogle, error)) error) *Initializer_RegisterBeforeLinkGoogle_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeLinkSteam provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeLinkSteam(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkSteamRequest) (*api.LinkSteamRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeLinkSteam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkSteamRequest) (*api.LinkSteamRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeLinkSteam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeLinkSteam'
type Initializer_RegisterBeforeLinkSteam_Call struct {
	*mock.Call
}

// RegisterBeforeLinkSteam is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.LinkSteamRequest)(*api.LinkSteamRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeLinkSteam(fn interface{}) *Initializer_RegisterBeforeLinkSteam_Call {
	return &Initializer_RegisterBeforeLinkSteam_Call{Call: _e.mock.On("RegisterBeforeLinkSteam", fn)}
}

func (_c *Initializer_RegisterBeforeLinkSteam_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkSteamRequest) (*api.LinkSteamRequest, error))) *Initializer_RegisterBeforeLinkSteam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkSteamRequest) (*api.LinkSteamRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeLinkSteam_Call) Return(_a0 error) *Initializer_RegisterBeforeLinkSteam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeLinkSteam_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkSteamRequest) (*api.LinkSteamRequest, error)) error) *Initializer_RegisterBeforeLinkSteam_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeListChannelMessages provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeListChannelMessages(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListChannelMessagesRequest) (*api.ListChannelMessagesRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeListChannelMessages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListChannelMessagesRequest) (*api.ListChannelMessagesRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeListChannelMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeListChannelMessages'
type Initializer_RegisterBeforeListChannelMessages_Call struct {
	*mock.Call
}

// RegisterBeforeListChannelMessages is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ListChannelMessagesRequest)(*api.ListChannelMessagesRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeListChannelMessages(fn interface{}) *Initializer_RegisterBeforeListChannelMessages_Call {
	return &Initializer_RegisterBeforeListChannelMessages_Call{Call: _e.mock.On("RegisterBeforeListChannelMessages", fn)}
}

func (_c *Initializer_RegisterBeforeListChannelMessages_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListChannelMessagesRequest) (*api.ListChannelMessagesRequest, error))) *Initializer_RegisterBeforeListChannelMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListChannelMessagesRequest) (*api.ListChannelMessagesRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeListChannelMessages_Call) Return(_a0 error) *Initializer_RegisterBeforeListChannelMessages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeListChannelMessages_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListChannelMessagesRequest) (*api.ListChannelMessagesRequest, error)) error) *Initializer_RegisterBeforeListChannelMessages_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeListFriends provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeListFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListFriendsRequest) (*api.ListFriendsRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeListFriends")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListFriendsRequest) (*api.ListFriendsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeListFriends_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeListFriends'
type Initializer_RegisterBeforeListFriends_Call struct {
	*mock.Call
}

// RegisterBeforeListFriends is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ListFriendsRequest)(*api.ListFriendsRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeListFriends(fn interface{}) *Initializer_RegisterBeforeListFriends_Call {
	return &Initializer_RegisterBeforeListFriends_Call{Call: _e.mock.On("RegisterBeforeListFriends", fn)}
}

func (_c *Initializer_RegisterBeforeListFriends_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListFriendsRequest) (*api.ListFriendsRequest, error))) *Initializer_RegisterBeforeListFriends_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListFriendsRequest) (*api.ListFriendsRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeListFriends_Call) Return(_a0 error) *Initializer_RegisterBeforeListFriends_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeListFriends_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListFriendsRequest) (*api.ListFriendsRequest, error)) error) *Initializer_RegisterBeforeListFriends_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeListGroupUsers provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeListGroupUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListGroupUsersRequest) (*api.ListGroupUsersRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeListGroupUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListGroupUsersRequest) (*api.ListGroupUsersRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeListGroupUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeListGroupUsers'
type Initializer_RegisterBeforeListGroupUsers_Call struct {
	*mock.Call
}

// RegisterBeforeListGroupUsers is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ListGroupUsersRequest)(*api.ListGroupUsersRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeListGroupUsers(fn interface{}) *Initializer_RegisterBeforeListGroupUsers_Call {
	return &Initializer_RegisterBeforeListGroupUsers_Call{Call: _e.mock.On("RegisterBeforeListGroupUsers", fn)}
}

func (_c *Initializer_RegisterBeforeListGroupUsers_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListGroupUsersRequest) (*api.ListGroupUsersRequest, error))) *Initializer_RegisterBeforeListGroupUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListGroupUsersRequest) (*api.ListGroupUsersRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeListGroupUsers_Call) Return(_a0 error) *Initializer_RegisterBeforeListGroupUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeListGroupUsers_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListGroupUsersRequest) (*api.ListGroupUsersRequest, error)) error) *Initializer_RegisterBeforeListGroupUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeListGroups provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeListGroups(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListGroupsRequest) (*api.ListGroupsRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeListGroups")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListGroupsRequest) (*api.ListGroupsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeListGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeListGroups'
type Initializer_RegisterBeforeListGroups_Call struct {
	*mock.Call
}

// RegisterBeforeListGroups is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ListGroupsRequest)(*api.ListGroupsRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeListGroups(fn interface{}) *Initializer_RegisterBeforeListGroups_Call {
	return &Initializer_RegisterBeforeListGroups_Call{Call: _e.mock.On("RegisterBeforeListGroups", fn)}
}

func (_c *Initializer_RegisterBeforeListGroups_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListGroupsRequest) (*api.ListGroupsRequest, error))) *Initializer_RegisterBeforeListGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListGroupsRequest) (*api.ListGroupsRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeListGroups_Call) Return(_a0 error) *Initializer_RegisterBeforeListGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeListGroups_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListGroupsRequest) (*api.ListGroupsRequest, error)) error) *Initializer_RegisterBeforeListGroups_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeListLeaderboardRecords provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeListLeaderboardRecords(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListLeaderboardRecordsRequest) (*api.ListLeaderboardRecordsRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeListLeaderboardRecords")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListLeaderboardRecordsRequest) (*api.ListLeaderboardRecordsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeListLeaderboardRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeListLeaderboardRecords'
type Initializer_RegisterBeforeListLeaderboardRecords_Call struct {
	*mock.Call
}

// RegisterBeforeListLeaderboardRecords is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ListLeaderboardRecordsRequest)(*api.ListLeaderboardRecordsRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeListLeaderboardRecords(fn interface{}) *Initializer_RegisterBeforeListLeaderboardRecords_Call {
	return &Initializer_RegisterBeforeListLeaderboardRecords_Call{Call: _e.mock.On("RegisterBeforeListLeaderboardRecords", fn)}
}

func (_c *Initializer_RegisterBeforeListLeaderboardRecords_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListLeaderboardRecordsRequest) (*api.ListLeaderboardRecordsRequest, error))) *Initializer_RegisterBeforeListLeaderboardRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListLeaderboardRecordsRequest) (*api.ListLeaderboardRecordsRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeListLeaderboardRecords_Call) Return(_a0 error) *Initializer_RegisterBeforeListLeaderboardRecords_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeListLeaderboardRecords_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListLeaderboardRecordsRequest) (*api.ListLeaderboardRecordsRequest, error)) error) *Initializer_RegisterBeforeListLeaderboardRecords_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeListLeaderboardRecordsAroundOwner provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeListLeaderboardRecordsAroundOwner(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListLeaderboardRecordsAroundOwnerRequest) (*api.ListLeaderboardRecordsAroundOwnerRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeListLeaderboardRecordsAroundOwner")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListLeaderboardRecordsAroundOwnerRequest) (*api.ListLeaderboardRecordsAroundOwnerRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeListLeaderboardRecordsAroundOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeListLeaderboardRecordsAroundOwner'
type Initializer_RegisterBeforeListLeaderboardRecordsAroundOwner_Call struct {
	*mock.Call
}

// RegisterBeforeListLeaderboardRecordsAroundOwner is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ListLeaderboardRecordsAroundOwnerRequest)(*api.ListLeaderboardRecordsAroundOwnerRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeListLeaderboardRecordsAroundOwner(fn interface{}) *Initializer_RegisterBeforeListLeaderboardRecordsAroundOwner_Call {
	return &Initializer_RegisterBeforeListLeaderboardRecordsAroundOwner_Call{Call: _e.mock.On("RegisterBeforeListLeaderboardRecordsAroundOwner", fn)}
}

func (_c *Initializer_RegisterBeforeListLeaderboardRecordsAroundOwner_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListLeaderboardRecordsAroundOwnerRequest) (*api.ListLeaderboardRecordsAroundOwnerRequest, error))) *Initializer_RegisterBeforeListLeaderboardRecordsAroundOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListLeaderboardRecordsAroundOwnerRequest) (*api.ListLeaderboardRecordsAroundOwnerRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeListLeaderboardRecordsAroundOwner_Call) Return(_a0 error) *Initializer_RegisterBeforeListLeaderboardRecordsAroundOwner_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeListLeaderboardRecordsAroundOwner_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListLeaderboardRecordsAroundOwnerRequest) (*api.ListLeaderboardRecordsAroundOwnerRequest, error)) error) *Initializer_RegisterBeforeListLeaderboardRecordsAroundOwner_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeListMatches provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeListMatches(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListMatchesRequest) (*api.ListMatchesRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeListMatches")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListMatchesRequest) (*api.ListMatchesRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeListMatches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeListMatches'
type Initializer_RegisterBeforeListMatches_Call struct {
	*mock.Call
}

// RegisterBeforeListMatches is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ListMatchesRequest)(*api.ListMatchesRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeListMatches(fn interface{}) *Initializer_RegisterBeforeListMatches_Call {
	return &Initializer_RegisterBeforeListMatches_Call{Call: _e.mock.On("RegisterBeforeListMatches", fn)}
}

func (_c *Initializer_RegisterBeforeListMatches_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListMatchesRequest) (*api.ListMatchesRequest, error))) *Initializer_RegisterBeforeListMatches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListMatchesRequest) (*api.ListMatchesRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeListMatches_Call) Return(_a0 error) *Initializer_RegisterBeforeListMatches_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeListMatches_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListMatchesRequest) (*api.ListMatchesRequest, error)) error) *Initializer_RegisterBeforeListMatches_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeListNotifications provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeListNotifications(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListNotificationsRequest) (*api.ListNotificationsRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeListNotifications")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListNotificationsRequest) (*api.ListNotificationsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeListNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeListNotifications'
type Initializer_RegisterBeforeListNotifications_Call struct {
	*mock.Call
}

// RegisterBeforeListNotifications is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ListNotificationsRequest)(*api.ListNotificationsRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeListNotifications(fn interface{}) *Initializer_RegisterBeforeListNotifications_Call {
	return &Initializer_RegisterBeforeListNotifications_Call{Call: _e.mock.On("RegisterBeforeListNotifications", fn)}
}

func (_c *Initializer_RegisterBeforeListNotifications_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListNotificationsRequest) (*api.ListNotificationsRequest, error))) *Initializer_RegisterBeforeListNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListNotificationsRequest) (*api.ListNotificationsRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeListNotifications_Call) Return(_a0 error) *Initializer_RegisterBeforeListNotifications_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeListNotifications_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListNotificationsRequest) (*api.ListNotificationsRequest, error)) error) *Initializer_RegisterBeforeListNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeListStorageObjects provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeListStorageObjects(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListStorageObjectsRequest) (*api.ListStorageObjectsRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeListStorageObjects")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListStorageObjectsRequest) (*api.ListStorageObjectsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeListStorageObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeListStorageObjects'
type Initializer_RegisterBeforeListStorageObjects_Call struct {
	*mock.Call
}

// RegisterBeforeListStorageObjects is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ListStorageObjectsRequest)(*api.ListStorageObjectsRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeListStorageObjects(fn interface{}) *Initializer_RegisterBeforeListStorageObjects_Call {
	return &Initializer_RegisterBeforeListStorageObjects_Call{Call: _e.mock.On("RegisterBeforeListStorageObjects", fn)}
}

func (_c *Initializer_RegisterBeforeListStorageObjects_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListStorageObjectsRequest) (*api.ListStorageObjectsRequest, error))) *Initializer_RegisterBeforeListStorageObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListStorageObjectsRequest) (*api.ListStorageObjectsRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeListStorageObjects_Call) Return(_a0 error) *Initializer_RegisterBeforeListStorageObjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeListStorageObjects_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListStorageObjectsRequest) (*api.ListStorageObjectsRequest, error)) error) *Initializer_RegisterBeforeListStorageObjects_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeListSubscriptions provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeListSubscriptions(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListSubscriptionsRequest) (*api.ListSubscriptionsRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeListSubscriptions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListSubscriptionsRequest) (*api.ListSubscriptionsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeListSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeListSubscriptions'
type Initializer_RegisterBeforeListSubscriptions_Call struct {
	*mock.Call
}

// RegisterBeforeListSubscriptions is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ListSubscriptionsRequest)(*api.ListSubscriptionsRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeListSubscriptions(fn interface{}) *Initializer_RegisterBeforeListSubscriptions_Call {
	return &Initializer_RegisterBeforeListSubscriptions_Call{Call: _e.mock.On("RegisterBeforeListSubscriptions", fn)}
}

func (_c *Initializer_RegisterBeforeListSubscriptions_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListSubscriptionsRequest) (*api.ListSubscriptionsRequest, error))) *Initializer_RegisterBeforeListSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListSubscriptionsRequest) (*api.ListSubscriptionsRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeListSubscriptions_Call) Return(_a0 error) *Initializer_RegisterBeforeListSubscriptions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeListSubscriptions_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListSubscriptionsRequest) (*api.ListSubscriptionsRequest, error)) error) *Initializer_RegisterBeforeListSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeListTournamentRecords provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeListTournamentRecords(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListTournamentRecordsRequest) (*api.ListTournamentRecordsRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeListTournamentRecords")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListTournamentRecordsRequest) (*api.ListTournamentRecordsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeListTournamentRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeListTournamentRecords'
type Initializer_RegisterBeforeListTournamentRecords_Call struct {
	*mock.Call
}

// RegisterBeforeListTournamentRecords is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ListTournamentRecordsRequest)(*api.ListTournamentRecordsRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeListTournamentRecords(fn interface{}) *Initializer_RegisterBeforeListTournamentRecords_Call {
	return &Initializer_RegisterBeforeListTournamentRecords_Call{Call: _e.mock.On("RegisterBeforeListTournamentRecords", fn)}
}

func (_c *Initializer_RegisterBeforeListTournamentRecords_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListTournamentRecordsRequest) (*api.ListTournamentRecordsRequest, error))) *Initializer_RegisterBeforeListTournamentRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListTournamentRecordsRequest) (*api.ListTournamentRecordsRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeListTournamentRecords_Call) Return(_a0 error) *Initializer_RegisterBeforeListTournamentRecords_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeListTournamentRecords_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListTournamentRecordsRequest) (*api.ListTournamentRecordsRequest, error)) error) *Initializer_RegisterBeforeListTournamentRecords_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeListTournamentRecordsAroundOwner provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeListTournamentRecordsAroundOwner(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListTournamentRecordsAroundOwnerRequest) (*api.ListTournamentRecordsAroundOwnerRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeListTournamentRecordsAroundOwner")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListTournamentRecordsAroundOwnerRequest) (*api.ListTournamentRecordsAroundOwnerRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeListTournamentRecordsAroundOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeListTournamentRecordsAroundOwner'
type Initializer_RegisterBeforeListTournamentRecordsAroundOwner_Call struct {
	*mock.Call
}

// RegisterBeforeListTournamentRecordsAroundOwner is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ListTournamentRecordsAroundOwnerRequest)(*api.ListTournamentRecordsAroundOwnerRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeListTournamentRecordsAroundOwner(fn interface{}) *Initializer_RegisterBeforeListTournamentRecordsAroundOwner_Call {
	return &Initializer_RegisterBeforeListTournamentRecordsAroundOwner_Call{Call: _e.mock.On("RegisterBeforeListTournamentRecordsAroundOwner", fn)}
}

func (_c *Initializer_RegisterBeforeListTournamentRecordsAroundOwner_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListTournamentRecordsAroundOwnerRequest) (*api.ListTournamentRecordsAroundOwnerRequest, error))) *Initializer_RegisterBeforeListTournamentRecordsAroundOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListTournamentRecordsAroundOwnerRequest) (*api.ListTournamentRecordsAroundOwnerRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeListTournamentRecordsAroundOwner_Call) Return(_a0 error) *Initializer_RegisterBeforeListTournamentRecordsAroundOwner_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeListTournamentRecordsAroundOwner_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListTournamentRecordsAroundOwnerRequest) (*api.ListTournamentRecordsAroundOwnerRequest, error)) error) *Initializer_RegisterBeforeListTournamentRecordsAroundOwner_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeListTournaments provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeListTournaments(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListTournamentsRequest) (*api.ListTournamentsRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeListTournaments")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListTournamentsRequest) (*api.ListTournamentsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeListTournaments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeListTournaments'
type Initializer_RegisterBeforeListTournaments_Call struct {
	*mock.Call
}

// RegisterBeforeListTournaments is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ListTournamentsRequest)(*api.ListTournamentsRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeListTournaments(fn interface{}) *Initializer_RegisterBeforeListTournaments_Call {
	return &Initializer_RegisterBeforeListTournaments_Call{Call: _e.mock.On("RegisterBeforeListTournaments", fn)}
}

func (_c *Initializer_RegisterBeforeListTournaments_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListTournamentsRequest) (*api.ListTournamentsRequest, error))) *Initializer_RegisterBeforeListTournaments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListTournamentsRequest) (*api.ListTournamentsRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeListTournaments_Call) Return(_a0 error) *Initializer_RegisterBeforeListTournaments_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeListTournaments_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListTournamentsRequest) (*api.ListTournamentsRequest, error)) error) *Initializer_RegisterBeforeListTournaments_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeListUserGroups provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeListUserGroups(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListUserGroupsRequest) (*api.ListUserGroupsRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeListUserGroups")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListUserGroupsRequest) (*api.ListUserGroupsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeListUserGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeListUserGroups'
type Initializer_RegisterBeforeListUserGroups_Call struct {
	*mock.Call
}

// RegisterBeforeListUserGroups is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ListUserGroupsRequest)(*api.ListUserGroupsRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeListUserGroups(fn interface{}) *Initializer_RegisterBeforeListUserGroups_Call {
	return &Initializer_RegisterBeforeListUserGroups_Call{Call: _e.mock.On("RegisterBeforeListUserGroups", fn)}
}

func (_c *Initializer_RegisterBeforeListUserGroups_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListUserGroupsRequest) (*api.ListUserGroupsRequest, error))) *Initializer_RegisterBeforeListUserGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListUserGroupsRequest) (*api.ListUserGroupsRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeListUserGroups_Call) Return(_a0 error) *Initializer_RegisterBeforeListUserGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeListUserGroups_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListUserGroupsRequest) (*api.ListUserGroupsRequest, error)) error) *Initializer_RegisterBeforeListUserGroups_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforePromoteGroupUsers provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforePromoteGroupUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.PromoteGroupUsersRequest) (*api.PromoteGroupUsersRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforePromoteGroupUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.PromoteGroupUsersRequest) (*api.PromoteGroupUsersRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforePromoteGroupUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforePromoteGroupUsers'
type Initializer_RegisterBeforePromoteGroupUsers_Call struct {
	*mock.Call
}

// RegisterBeforePromoteGroupUsers is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.PromoteGroupUsersRequest)(*api.PromoteGroupUsersRequest , error)
func (_e *Initializer_Expecter) RegisterBeforePromoteGroupUsers(fn interface{}) *Initializer_RegisterBeforePromoteGroupUsers_Call {
	return &Initializer_RegisterBeforePromoteGroupUsers_Call{Call: _e.mock.On("RegisterBeforePromoteGroupUsers", fn)}
}

func (_c *Initializer_RegisterBeforePromoteGroupUsers_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.PromoteGroupUsersRequest) (*api.PromoteGroupUsersRequest, error))) *Initializer_RegisterBeforePromoteGroupUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.PromoteGroupUsersRequest) (*api.PromoteGroupUsersRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforePromoteGroupUsers_Call) Return(_a0 error) *Initializer_RegisterBeforePromoteGroupUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforePromoteGroupUsers_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.PromoteGroupUsersRequest) (*api.PromoteGroupUsersRequest, error)) error) *Initializer_RegisterBeforePromoteGroupUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeReadStorageObjects provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeReadStorageObjects(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ReadStorageObjectsRequest) (*api.ReadStorageObjectsRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeReadStorageObjects")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ReadStorageObjectsRequest) (*api.ReadStorageObjectsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeReadStorageObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeReadStorageObjects'
type Initializer_RegisterBeforeReadStorageObjects_Call struct {
	*mock.Call
}

// RegisterBeforeReadStorageObjects is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ReadStorageObjectsRequest)(*api.ReadStorageObjectsRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeReadStorageObjects(fn interface{}) *Initializer_RegisterBeforeReadStorageObjects_Call {
	return &Initializer_RegisterBeforeReadStorageObjects_Call{Call: _e.mock.On("RegisterBeforeReadStorageObjects", fn)}
}

func (_c *Initializer_RegisterBeforeReadStorageObjects_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ReadStorageObjectsRequest) (*api.ReadStorageObjectsRequest, error))) *Initializer_RegisterBeforeReadStorageObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ReadStorageObjectsRequest) (*api.ReadStorageObjectsRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeReadStorageObjects_Call) Return(_a0 error) *Initializer_RegisterBeforeReadStorageObjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeReadStorageObjects_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ReadStorageObjectsRequest) (*api.ReadStorageObjectsRequest, error)) error) *Initializer_RegisterBeforeReadStorageObjects_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeRt provides a mock function with given fields: id, fn
func (_m *Initializer) RegisterBeforeRt(id string, fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *rtapi.Envelope) (*rtapi.Envelope, error)) error {
	ret := _m.Called(id, fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeRt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *rtapi.Envelope) (*rtapi.Envelope, error)) error); ok {
		r0 = rf(id, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeRt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeRt'
type Initializer_RegisterBeforeRt_Call struct {
	*mock.Call
}

// RegisterBeforeRt is a helper method to define mock.On call
//   - id string
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *rtapi.Envelope)(*rtapi.Envelope , error)
func (_e *Initializer_Expecter) RegisterBeforeRt(id interface{}, fn interface{}) *Initializer_RegisterBeforeRt_Call {
	return &Initializer_RegisterBeforeRt_Call{Call: _e.mock.On("RegisterBeforeRt", id, fn)}
}

func (_c *Initializer_RegisterBeforeRt_Call) Run(run func(id string, fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *rtapi.Envelope) (*rtapi.Envelope, error))) *Initializer_RegisterBeforeRt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *rtapi.Envelope) (*rtapi.Envelope, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeRt_Call) Return(_a0 error) *Initializer_RegisterBeforeRt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeRt_Call) RunAndReturn(run func(string, func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *rtapi.Envelope) (*rtapi.Envelope, error)) error) *Initializer_RegisterBeforeRt_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeSessionLogout provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeSessionLogout(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SessionLogoutRequest) (*api.SessionLogoutRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeSessionLogout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SessionLogoutRequest) (*api.SessionLogoutRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeSessionLogout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeSessionLogout'
type Initializer_RegisterBeforeSessionLogout_Call struct {
	*mock.Call
}

// RegisterBeforeSessionLogout is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.SessionLogoutRequest)(*api.SessionLogoutRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeSessionLogout(fn interface{}) *Initializer_RegisterBeforeSessionLogout_Call {
	return &Initializer_RegisterBeforeSessionLogout_Call{Call: _e.mock.On("RegisterBeforeSessionLogout", fn)}
}

func (_c *Initializer_RegisterBeforeSessionLogout_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SessionLogoutRequest) (*api.SessionLogoutRequest, error))) *Initializer_RegisterBeforeSessionLogout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SessionLogoutRequest) (*api.SessionLogoutRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeSessionLogout_Call) Return(_a0 error) *Initializer_RegisterBeforeSessionLogout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeSessionLogout_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SessionLogoutRequest) (*api.SessionLogoutRequest, error)) error) *Initializer_RegisterBeforeSessionLogout_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeSessionRefresh provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeSessionRefresh(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SessionRefreshRequest) (*api.SessionRefreshRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeSessionRefresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SessionRefreshRequest) (*api.SessionRefreshRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeSessionRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeSessionRefresh'
type Initializer_RegisterBeforeSessionRefresh_Call struct {
	*mock.Call
}

// RegisterBeforeSessionRefresh is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.SessionRefreshRequest)(*api.SessionRefreshRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeSessionRefresh(fn interface{}) *Initializer_RegisterBeforeSessionRefresh_Call {
	return &Initializer_RegisterBeforeSessionRefresh_Call{Call: _e.mock.On("RegisterBeforeSessionRefresh", fn)}
}

func (_c *Initializer_RegisterBeforeSessionRefresh_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SessionRefreshRequest) (*api.SessionRefreshRequest, error))) *Initializer_RegisterBeforeSessionRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SessionRefreshRequest) (*api.SessionRefreshRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeSessionRefresh_Call) Return(_a0 error) *Initializer_RegisterBeforeSessionRefresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeSessionRefresh_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SessionRefreshRequest) (*api.SessionRefreshRequest, error)) error) *Initializer_RegisterBeforeSessionRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeUnlinkApple provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeUnlinkApple(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) (*api.AccountApple, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeUnlinkApple")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) (*api.AccountApple, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeUnlinkApple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeUnlinkApple'
type Initializer_RegisterBeforeUnlinkApple_Call struct {
	*mock.Call
}

// RegisterBeforeUnlinkApple is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountApple)(*api.AccountApple , error)
func (_e *Initializer_Expecter) RegisterBeforeUnlinkApple(fn interface{}) *Initializer_RegisterBeforeUnlinkApple_Call {
	return &Initializer_RegisterBeforeUnlinkApple_Call{Call: _e.mock.On("RegisterBeforeUnlinkApple", fn)}
}

func (_c *Initializer_RegisterBeforeUnlinkApple_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) (*api.AccountApple, error))) *Initializer_RegisterBeforeUnlinkApple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) (*api.AccountApple, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeUnlinkApple_Call) Return(_a0 error) *Initializer_RegisterBeforeUnlinkApple_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeUnlinkApple_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) (*api.AccountApple, error)) error) *Initializer_RegisterBeforeUnlinkApple_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeUnlinkCustom provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeUnlinkCustom(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) (*api.AccountCustom, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeUnlinkCustom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) (*api.AccountCustom, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeUnlinkCustom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeUnlinkCustom'
type Initializer_RegisterBeforeUnlinkCustom_Call struct {
	*mock.Call
}

// RegisterBeforeUnlinkCustom is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountCustom)(*api.AccountCustom , error)
func (_e *Initializer_Expecter) RegisterBeforeUnlinkCustom(fn interface{}) *Initializer_RegisterBeforeUnlinkCustom_Call {
	return &Initializer_RegisterBeforeUnlinkCustom_Call{Call: _e.mock.On("RegisterBeforeUnlinkCustom", fn)}
}

func (_c *Initializer_RegisterBeforeUnlinkCustom_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) (*api.AccountCustom, error))) *Initializer_RegisterBeforeUnlinkCustom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) (*api.AccountCustom, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeUnlinkCustom_Call) Return(_a0 error) *Initializer_RegisterBeforeUnlinkCustom_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeUnlinkCustom_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) (*api.AccountCustom, error)) error) *Initializer_RegisterBeforeUnlinkCustom_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeUnlinkDevice provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeUnlinkDevice(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) (*api.AccountDevice, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeUnlinkDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) (*api.AccountDevice, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeUnlinkDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeUnlinkDevice'
type Initializer_RegisterBeforeUnlinkDevice_Call struct {
	*mock.Call
}

// RegisterBeforeUnlinkDevice is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountDevice)(*api.AccountDevice , error)
func (_e *Initializer_Expecter) RegisterBeforeUnlinkDevice(fn interface{}) *Initializer_RegisterBeforeUnlinkDevice_Call {
	return &Initializer_RegisterBeforeUnlinkDevice_Call{Call: _e.mock.On("RegisterBeforeUnlinkDevice", fn)}
}

func (_c *Initializer_RegisterBeforeUnlinkDevice_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) (*api.AccountDevice, error))) *Initializer_RegisterBeforeUnlinkDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) (*api.AccountDevice, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeUnlinkDevice_Call) Return(_a0 error) *Initializer_RegisterBeforeUnlinkDevice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeUnlinkDevice_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) (*api.AccountDevice, error)) error) *Initializer_RegisterBeforeUnlinkDevice_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeUnlinkEmail provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeUnlinkEmail(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) (*api.AccountEmail, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeUnlinkEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) (*api.AccountEmail, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeUnlinkEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeUnlinkEmail'
type Initializer_RegisterBeforeUnlinkEmail_Call struct {
	*mock.Call
}

// RegisterBeforeUnlinkEmail is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountEmail)(*api.AccountEmail , error)
func (_e *Initializer_Expecter) RegisterBeforeUnlinkEmail(fn interface{}) *Initializer_RegisterBeforeUnlinkEmail_Call {
	return &Initializer_RegisterBeforeUnlinkEmail_Call{Call: _e.mock.On("RegisterBeforeUnlinkEmail", fn)}
}

func (_c *Initializer_RegisterBeforeUnlinkEmail_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) (*api.AccountEmail, error))) *Initializer_RegisterBeforeUnlinkEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) (*api.AccountEmail, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeUnlinkEmail_Call) Return(_a0 error) *Initializer_RegisterBeforeUnlinkEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeUnlinkEmail_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) (*api.AccountEmail, error)) error) *Initializer_RegisterBeforeUnlinkEmail_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeUnlinkFacebook provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeUnlinkFacebook(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebook) (*api.AccountFacebook, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeUnlinkFacebook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebook) (*api.AccountFacebook, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeUnlinkFacebook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeUnlinkFacebook'
type Initializer_RegisterBeforeUnlinkFacebook_Call struct {
	*mock.Call
}

// RegisterBeforeUnlinkFacebook is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountFacebook)(*api.AccountFacebook , error)
func (_e *Initializer_Expecter) RegisterBeforeUnlinkFacebook(fn interface{}) *Initializer_RegisterBeforeUnlinkFacebook_Call {
	return &Initializer_RegisterBeforeUnlinkFacebook_Call{Call: _e.mock.On("RegisterBeforeUnlinkFacebook", fn)}
}

func (_c *Initializer_RegisterBeforeUnlinkFacebook_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebook) (*api.AccountFacebook, error))) *Initializer_RegisterBeforeUnlinkFacebook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebook) (*api.AccountFacebook, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeUnlinkFacebook_Call) Return(_a0 error) *Initializer_RegisterBeforeUnlinkFacebook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeUnlinkFacebook_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebook) (*api.AccountFacebook, error)) error) *Initializer_RegisterBeforeUnlinkFacebook_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeUnlinkFacebookInstantGame provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeUnlinkFacebookInstantGame(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) (*api.AccountFacebookInstantGame, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeUnlinkFacebookInstantGame")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) (*api.AccountFacebookInstantGame, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeUnlinkFacebookInstantGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeUnlinkFacebookInstantGame'
type Initializer_RegisterBeforeUnlinkFacebookInstantGame_Call struct {
	*mock.Call
}

// RegisterBeforeUnlinkFacebookInstantGame is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountFacebookInstantGame)(*api.AccountFacebookInstantGame , error)
func (_e *Initializer_Expecter) RegisterBeforeUnlinkFacebookInstantGame(fn interface{}) *Initializer_RegisterBeforeUnlinkFacebookInstantGame_Call {
	return &Initializer_RegisterBeforeUnlinkFacebookInstantGame_Call{Call: _e.mock.On("RegisterBeforeUnlinkFacebookInstantGame", fn)}
}

func (_c *Initializer_RegisterBeforeUnlinkFacebookInstantGame_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) (*api.AccountFacebookInstantGame, error))) *Initializer_RegisterBeforeUnlinkFacebookInstantGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) (*api.AccountFacebookInstantGame, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeUnlinkFacebookInstantGame_Call) Return(_a0 error) *Initializer_RegisterBeforeUnlinkFacebookInstantGame_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeUnlinkFacebookInstantGame_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) (*api.AccountFacebookInstantGame, error)) error) *Initializer_RegisterBeforeUnlinkFacebookInstantGame_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeUnlinkGameCenter provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeUnlinkGameCenter(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) (*api.AccountGameCenter, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeUnlinkGameCenter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) (*api.AccountGameCenter, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeUnlinkGameCenter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeUnlinkGameCenter'
type Initializer_RegisterBeforeUnlinkGameCenter_Call struct {
	*mock.Call
}

// RegisterBeforeUnlinkGameCenter is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountGameCenter)(*api.AccountGameCenter , error)
func (_e *Initializer_Expecter) RegisterBeforeUnlinkGameCenter(fn interface{}) *Initializer_RegisterBeforeUnlinkGameCenter_Call {
	return &Initializer_RegisterBeforeUnlinkGameCenter_Call{Call: _e.mock.On("RegisterBeforeUnlinkGameCenter", fn)}
}

func (_c *Initializer_RegisterBeforeUnlinkGameCenter_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) (*api.AccountGameCenter, error))) *Initializer_RegisterBeforeUnlinkGameCenter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) (*api.AccountGameCenter, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeUnlinkGameCenter_Call) Return(_a0 error) *Initializer_RegisterBeforeUnlinkGameCenter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeUnlinkGameCenter_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) (*api.AccountGameCenter, error)) error) *Initializer_RegisterBeforeUnlinkGameCenter_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeUnlinkGoogle provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeUnlinkGoogle(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) (*api.AccountGoogle, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeUnlinkGoogle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) (*api.AccountGoogle, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeUnlinkGoogle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeUnlinkGoogle'
type Initializer_RegisterBeforeUnlinkGoogle_Call struct {
	*mock.Call
}

// RegisterBeforeUnlinkGoogle is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountGoogle)(*api.AccountGoogle , error)
func (_e *Initializer_Expecter) RegisterBeforeUnlinkGoogle(fn interface{}) *Initializer_RegisterBeforeUnlinkGoogle_Call {
	return &Initializer_RegisterBeforeUnlinkGoogle_Call{Call: _e.mock.On("RegisterBeforeUnlinkGoogle", fn)}
}

func (_c *Initializer_RegisterBeforeUnlinkGoogle_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) (*api.AccountGoogle, error))) *Initializer_RegisterBeforeUnlinkGoogle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) (*api.AccountGoogle, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeUnlinkGoogle_Call) Return(_a0 error) *Initializer_RegisterBeforeUnlinkGoogle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeUnlinkGoogle_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) (*api.AccountGoogle, error)) error) *Initializer_RegisterBeforeUnlinkGoogle_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeUnlinkSteam provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeUnlinkSteam(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountSteam) (*api.AccountSteam, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeUnlinkSteam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountSteam) (*api.AccountSteam, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeUnlinkSteam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeUnlinkSteam'
type Initializer_RegisterBeforeUnlinkSteam_Call struct {
	*mock.Call
}

// RegisterBeforeUnlinkSteam is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.AccountSteam)(*api.AccountSteam , error)
func (_e *Initializer_Expecter) RegisterBeforeUnlinkSteam(fn interface{}) *Initializer_RegisterBeforeUnlinkSteam_Call {
	return &Initializer_RegisterBeforeUnlinkSteam_Call{Call: _e.mock.On("RegisterBeforeUnlinkSteam", fn)}
}

func (_c *Initializer_RegisterBeforeUnlinkSteam_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountSteam) (*api.AccountSteam, error))) *Initializer_RegisterBeforeUnlinkSteam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountSteam) (*api.AccountSteam, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeUnlinkSteam_Call) Return(_a0 error) *Initializer_RegisterBeforeUnlinkSteam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeUnlinkSteam_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountSteam) (*api.AccountSteam, error)) error) *Initializer_RegisterBeforeUnlinkSteam_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeUpdateAccount provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeUpdateAccount(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateAccountRequest) (*api.UpdateAccountRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeUpdateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateAccountRequest) (*api.UpdateAccountRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeUpdateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeUpdateAccount'
type Initializer_RegisterBeforeUpdateAccount_Call struct {
	*mock.Call
}

// RegisterBeforeUpdateAccount is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.UpdateAccountRequest)(*api.UpdateAccountRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeUpdateAccount(fn interface{}) *Initializer_RegisterBeforeUpdateAccount_Call {
	return &Initializer_RegisterBeforeUpdateAccount_Call{Call: _e.mock.On("RegisterBeforeUpdateAccount", fn)}
}

func (_c *Initializer_RegisterBeforeUpdateAccount_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateAccountRequest) (*api.UpdateAccountRequest, error))) *Initializer_RegisterBeforeUpdateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateAccountRequest) (*api.UpdateAccountRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeUpdateAccount_Call) Return(_a0 error) *Initializer_RegisterBeforeUpdateAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeUpdateAccount_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateAccountRequest) (*api.UpdateAccountRequest, error)) error) *Initializer_RegisterBeforeUpdateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeUpdateGroup provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeUpdateGroup(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateGroupRequest) (*api.UpdateGroupRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeUpdateGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateGroupRequest) (*api.UpdateGroupRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeUpdateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeUpdateGroup'
type Initializer_RegisterBeforeUpdateGroup_Call struct {
	*mock.Call
}

// RegisterBeforeUpdateGroup is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.UpdateGroupRequest)(*api.UpdateGroupRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeUpdateGroup(fn interface{}) *Initializer_RegisterBeforeUpdateGroup_Call {
	return &Initializer_RegisterBeforeUpdateGroup_Call{Call: _e.mock.On("RegisterBeforeUpdateGroup", fn)}
}

func (_c *Initializer_RegisterBeforeUpdateGroup_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateGroupRequest) (*api.UpdateGroupRequest, error))) *Initializer_RegisterBeforeUpdateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateGroupRequest) (*api.UpdateGroupRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeUpdateGroup_Call) Return(_a0 error) *Initializer_RegisterBeforeUpdateGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeUpdateGroup_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateGroupRequest) (*api.UpdateGroupRequest, error)) error) *Initializer_RegisterBeforeUpdateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeValidatePurchaseApple provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeValidatePurchaseApple(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseAppleRequest) (*api.ValidatePurchaseAppleRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeValidatePurchaseApple")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseAppleRequest) (*api.ValidatePurchaseAppleRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeValidatePurchaseApple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeValidatePurchaseApple'
type Initializer_RegisterBeforeValidatePurchaseApple_Call struct {
	*mock.Call
}

// RegisterBeforeValidatePurchaseApple is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ValidatePurchaseAppleRequest)(*api.ValidatePurchaseAppleRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeValidatePurchaseApple(fn interface{}) *Initializer_RegisterBeforeValidatePurchaseApple_Call {
	return &Initializer_RegisterBeforeValidatePurchaseApple_Call{Call: _e.mock.On("RegisterBeforeValidatePurchaseApple", fn)}
}

func (_c *Initializer_RegisterBeforeValidatePurchaseApple_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseAppleRequest) (*api.ValidatePurchaseAppleRequest, error))) *Initializer_RegisterBeforeValidatePurchaseApple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseAppleRequest) (*api.ValidatePurchaseAppleRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeValidatePurchaseApple_Call) Return(_a0 error) *Initializer_RegisterBeforeValidatePurchaseApple_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeValidatePurchaseApple_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseAppleRequest) (*api.ValidatePurchaseAppleRequest, error)) error) *Initializer_RegisterBeforeValidatePurchaseApple_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeValidatePurchaseGoogle provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeValidatePurchaseGoogle(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseGoogleRequest) (*api.ValidatePurchaseGoogleRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeValidatePurchaseGoogle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseGoogleRequest) (*api.ValidatePurchaseGoogleRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeValidatePurchaseGoogle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeValidatePurchaseGoogle'
type Initializer_RegisterBeforeValidatePurchaseGoogle_Call struct {
	*mock.Call
}

// RegisterBeforeValidatePurchaseGoogle is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ValidatePurchaseGoogleRequest)(*api.ValidatePurchaseGoogleRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeValidatePurchaseGoogle(fn interface{}) *Initializer_RegisterBeforeValidatePurchaseGoogle_Call {
	return &Initializer_RegisterBeforeValidatePurchaseGoogle_Call{Call: _e.mock.On("RegisterBeforeValidatePurchaseGoogle", fn)}
}

func (_c *Initializer_RegisterBeforeValidatePurchaseGoogle_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseGoogleRequest) (*api.ValidatePurchaseGoogleRequest, error))) *Initializer_RegisterBeforeValidatePurchaseGoogle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseGoogleRequest) (*api.ValidatePurchaseGoogleRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeValidatePurchaseGoogle_Call) Return(_a0 error) *Initializer_RegisterBeforeValidatePurchaseGoogle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeValidatePurchaseGoogle_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseGoogleRequest) (*api.ValidatePurchaseGoogleRequest, error)) error) *Initializer_RegisterBeforeValidatePurchaseGoogle_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeValidatePurchaseHuawei provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeValidatePurchaseHuawei(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseHuaweiRequest) (*api.ValidatePurchaseHuaweiRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeValidatePurchaseHuawei")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseHuaweiRequest) (*api.ValidatePurchaseHuaweiRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeValidatePurchaseHuawei_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeValidatePurchaseHuawei'
type Initializer_RegisterBeforeValidatePurchaseHuawei_Call struct {
	*mock.Call
}

// RegisterBeforeValidatePurchaseHuawei is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ValidatePurchaseHuaweiRequest)(*api.ValidatePurchaseHuaweiRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeValidatePurchaseHuawei(fn interface{}) *Initializer_RegisterBeforeValidatePurchaseHuawei_Call {
	return &Initializer_RegisterBeforeValidatePurchaseHuawei_Call{Call: _e.mock.On("RegisterBeforeValidatePurchaseHuawei", fn)}
}

func (_c *Initializer_RegisterBeforeValidatePurchaseHuawei_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseHuaweiRequest) (*api.ValidatePurchaseHuaweiRequest, error))) *Initializer_RegisterBeforeValidatePurchaseHuawei_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseHuaweiRequest) (*api.ValidatePurchaseHuaweiRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeValidatePurchaseHuawei_Call) Return(_a0 error) *Initializer_RegisterBeforeValidatePurchaseHuawei_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeValidatePurchaseHuawei_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseHuaweiRequest) (*api.ValidatePurchaseHuaweiRequest, error)) error) *Initializer_RegisterBeforeValidatePurchaseHuawei_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeValidateSubscriptionApple provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeValidateSubscriptionApple(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionAppleRequest) (*api.ValidateSubscriptionAppleRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeValidateSubscriptionApple")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionAppleRequest) (*api.ValidateSubscriptionAppleRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeValidateSubscriptionApple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeValidateSubscriptionApple'
type Initializer_RegisterBeforeValidateSubscriptionApple_Call struct {
	*mock.Call
}

// RegisterBeforeValidateSubscriptionApple is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ValidateSubscriptionAppleRequest)(*api.ValidateSubscriptionAppleRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeValidateSubscriptionApple(fn interface{}) *Initializer_RegisterBeforeValidateSubscriptionApple_Call {
	return &Initializer_RegisterBeforeValidateSubscriptionApple_Call{Call: _e.mock.On("RegisterBeforeValidateSubscriptionApple", fn)}
}

func (_c *Initializer_RegisterBeforeValidateSubscriptionApple_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionAppleRequest) (*api.ValidateSubscriptionAppleRequest, error))) *Initializer_RegisterBeforeValidateSubscriptionApple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionAppleRequest) (*api.ValidateSubscriptionAppleRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeValidateSubscriptionApple_Call) Return(_a0 error) *Initializer_RegisterBeforeValidateSubscriptionApple_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeValidateSubscriptionApple_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionAppleRequest) (*api.ValidateSubscriptionAppleRequest, error)) error) *Initializer_RegisterBeforeValidateSubscriptionApple_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeValidateSubscriptionGoogle provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeValidateSubscriptionGoogle(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionGoogleRequest) (*api.ValidateSubscriptionGoogleRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeValidateSubscriptionGoogle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionGoogleRequest) (*api.ValidateSubscriptionGoogleRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeValidateSubscriptionGoogle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeValidateSubscriptionGoogle'
type Initializer_RegisterBeforeValidateSubscriptionGoogle_Call struct {
	*mock.Call
}

// RegisterBeforeValidateSubscriptionGoogle is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ValidateSubscriptionGoogleRequest)(*api.ValidateSubscriptionGoogleRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeValidateSubscriptionGoogle(fn interface{}) *Initializer_RegisterBeforeValidateSubscriptionGoogle_Call {
	return &Initializer_RegisterBeforeValidateSubscriptionGoogle_Call{Call: _e.mock.On("RegisterBeforeValidateSubscriptionGoogle", fn)}
}

func (_c *Initializer_RegisterBeforeValidateSubscriptionGoogle_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionGoogleRequest) (*api.ValidateSubscriptionGoogleRequest, error))) *Initializer_RegisterBeforeValidateSubscriptionGoogle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionGoogleRequest) (*api.ValidateSubscriptionGoogleRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeValidateSubscriptionGoogle_Call) Return(_a0 error) *Initializer_RegisterBeforeValidateSubscriptionGoogle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeValidateSubscriptionGoogle_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionGoogleRequest) (*api.ValidateSubscriptionGoogleRequest, error)) error) *Initializer_RegisterBeforeValidateSubscriptionGoogle_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeWriteLeaderboardRecord provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeWriteLeaderboardRecord(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.WriteLeaderboardRecordRequest) (*api.WriteLeaderboardRecordRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeWriteLeaderboardRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.WriteLeaderboardRecordRequest) (*api.WriteLeaderboardRecordRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeWriteLeaderboardRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeWriteLeaderboardRecord'
type Initializer_RegisterBeforeWriteLeaderboardRecord_Call struct {
	*mock.Call
}

// RegisterBeforeWriteLeaderboardRecord is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.WriteLeaderboardRecordRequest)(*api.WriteLeaderboardRecordRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeWriteLeaderboardRecord(fn interface{}) *Initializer_RegisterBeforeWriteLeaderboardRecord_Call {
	return &Initializer_RegisterBeforeWriteLeaderboardRecord_Call{Call: _e.mock.On("RegisterBeforeWriteLeaderboardRecord", fn)}
}

func (_c *Initializer_RegisterBeforeWriteLeaderboardRecord_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.WriteLeaderboardRecordRequest) (*api.WriteLeaderboardRecordRequest, error))) *Initializer_RegisterBeforeWriteLeaderboardRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.WriteLeaderboardRecordRequest) (*api.WriteLeaderboardRecordRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeWriteLeaderboardRecord_Call) Return(_a0 error) *Initializer_RegisterBeforeWriteLeaderboardRecord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeWriteLeaderboardRecord_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.WriteLeaderboardRecordRequest) (*api.WriteLeaderboardRecordRequest, error)) error) *Initializer_RegisterBeforeWriteLeaderboardRecord_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeWriteStorageObjects provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeWriteStorageObjects(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.WriteStorageObjectsRequest) (*api.WriteStorageObjectsRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeWriteStorageObjects")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.WriteStorageObjectsRequest) (*api.WriteStorageObjectsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeWriteStorageObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeWriteStorageObjects'
type Initializer_RegisterBeforeWriteStorageObjects_Call struct {
	*mock.Call
}

// RegisterBeforeWriteStorageObjects is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.WriteStorageObjectsRequest)(*api.WriteStorageObjectsRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeWriteStorageObjects(fn interface{}) *Initializer_RegisterBeforeWriteStorageObjects_Call {
	return &Initializer_RegisterBeforeWriteStorageObjects_Call{Call: _e.mock.On("RegisterBeforeWriteStorageObjects", fn)}
}

func (_c *Initializer_RegisterBeforeWriteStorageObjects_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.WriteStorageObjectsRequest) (*api.WriteStorageObjectsRequest, error))) *Initializer_RegisterBeforeWriteStorageObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.WriteStorageObjectsRequest) (*api.WriteStorageObjectsRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeWriteStorageObjects_Call) Return(_a0 error) *Initializer_RegisterBeforeWriteStorageObjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeWriteStorageObjects_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.WriteStorageObjectsRequest) (*api.WriteStorageObjectsRequest, error)) error) *Initializer_RegisterBeforeWriteStorageObjects_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterBeforeWriteTournamentRecord provides a mock function with given fields: fn
func (_m *Initializer) RegisterBeforeWriteTournamentRecord(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.WriteTournamentRecordRequest) (*api.WriteTournamentRecordRequest, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterBeforeWriteTournamentRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.WriteTournamentRecordRequest) (*api.WriteTournamentRecordRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterBeforeWriteTournamentRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterBeforeWriteTournamentRecord'
type Initializer_RegisterBeforeWriteTournamentRecord_Call struct {
	*mock.Call
}

// RegisterBeforeWriteTournamentRecord is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.WriteTournamentRecordRequest)(*api.WriteTournamentRecordRequest , error)
func (_e *Initializer_Expecter) RegisterBeforeWriteTournamentRecord(fn interface{}) *Initializer_RegisterBeforeWriteTournamentRecord_Call {
	return &Initializer_RegisterBeforeWriteTournamentRecord_Call{Call: _e.mock.On("RegisterBeforeWriteTournamentRecord", fn)}
}

func (_c *Initializer_RegisterBeforeWriteTournamentRecord_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.WriteTournamentRecordRequest) (*api.WriteTournamentRecordRequest, error))) *Initializer_RegisterBeforeWriteTournamentRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.WriteTournamentRecordRequest) (*api.WriteTournamentRecordRequest, error)))
	})
	return _c
}

func (_c *Initializer_RegisterBeforeWriteTournamentRecord_Call) Return(_a0 error) *Initializer_RegisterBeforeWriteTournamentRecord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterBeforeWriteTournamentRecord_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.WriteTournamentRecordRequest) (*api.WriteTournamentRecordRequest, error)) error) *Initializer_RegisterBeforeWriteTournamentRecord_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterEvent provides a mock function with given fields: fn
func (_m *Initializer) RegisterEvent(fn func(context.Context, runtime.Logger, *api.Event)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *api.Event)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterEvent'
type Initializer_RegisterEvent_Call struct {
	*mock.Call
}

// RegisterEvent is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *api.Event)
func (_e *Initializer_Expecter) RegisterEvent(fn interface{}) *Initializer_RegisterEvent_Call {
	return &Initializer_RegisterEvent_Call{Call: _e.mock.On("RegisterEvent", fn)}
}

func (_c *Initializer_RegisterEvent_Call) Run(run func(fn func(context.Context, runtime.Logger, *api.Event))) *Initializer_RegisterEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *api.Event)))
	})
	return _c
}

func (_c *Initializer_RegisterEvent_Call) Return(_a0 error) *Initializer_RegisterEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterEvent_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *api.Event)) error) *Initializer_RegisterEvent_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterEventSessionEnd provides a mock function with given fields: fn
func (_m *Initializer) RegisterEventSessionEnd(fn func(context.Context, runtime.Logger, *api.Event)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterEventSessionEnd")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *api.Event)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterEventSessionEnd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterEventSessionEnd'
type Initializer_RegisterEventSessionEnd_Call struct {
	*mock.Call
}

// RegisterEventSessionEnd is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *api.Event)
func (_e *Initializer_Expecter) RegisterEventSessionEnd(fn interface{}) *Initializer_RegisterEventSessionEnd_Call {
	return &Initializer_RegisterEventSessionEnd_Call{Call: _e.mock.On("RegisterEventSessionEnd", fn)}
}

func (_c *Initializer_RegisterEventSessionEnd_Call) Run(run func(fn func(context.Context, runtime.Logger, *api.Event))) *Initializer_RegisterEventSessionEnd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *api.Event)))
	})
	return _c
}

func (_c *Initializer_RegisterEventSessionEnd_Call) Return(_a0 error) *Initializer_RegisterEventSessionEnd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterEventSessionEnd_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *api.Event)) error) *Initializer_RegisterEventSessionEnd_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterEventSessionStart provides a mock function with given fields: fn
func (_m *Initializer) RegisterEventSessionStart(fn func(context.Context, runtime.Logger, *api.Event)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterEventSessionStart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *api.Event)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterEventSessionStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterEventSessionStart'
type Initializer_RegisterEventSessionStart_Call struct {
	*mock.Call
}

// RegisterEventSessionStart is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *api.Event)
func (_e *Initializer_Expecter) RegisterEventSessionStart(fn interface{}) *Initializer_RegisterEventSessionStart_Call {
	return &Initializer_RegisterEventSessionStart_Call{Call: _e.mock.On("RegisterEventSessionStart", fn)}
}

func (_c *Initializer_RegisterEventSessionStart_Call) Run(run func(fn func(context.Context, runtime.Logger, *api.Event))) *Initializer_RegisterEventSessionStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *api.Event)))
	})
	return _c
}

func (_c *Initializer_RegisterEventSessionStart_Call) Return(_a0 error) *Initializer_RegisterEventSessionStart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterEventSessionStart_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *api.Event)) error) *Initializer_RegisterEventSessionStart_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterLeaderboardReset provides a mock function with given fields: fn
func (_m *Initializer) RegisterLeaderboardReset(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Leaderboard, int64) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterLeaderboardReset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Leaderboard, int64) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterLeaderboardReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterLeaderboardReset'
type Initializer_RegisterLeaderboardReset_Call struct {
	*mock.Call
}

// RegisterLeaderboardReset is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.Leaderboard , int64) error
func (_e *Initializer_Expecter) RegisterLeaderboardReset(fn interface{}) *Initializer_RegisterLeaderboardReset_Call {
	return &Initializer_RegisterLeaderboardReset_Call{Call: _e.mock.On("RegisterLeaderboardReset", fn)}
}

func (_c *Initializer_RegisterLeaderboardReset_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Leaderboard, int64) error)) *Initializer_RegisterLeaderboardReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Leaderboard, int64) error))
	})
	return _c
}

func (_c *Initializer_RegisterLeaderboardReset_Call) Return(_a0 error) *Initializer_RegisterLeaderboardReset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterLeaderboardReset_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Leaderboard, int64) error) error) *Initializer_RegisterLeaderboardReset_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterMatch provides a mock function with given fields: name, fn
func (_m *Initializer) RegisterMatch(name string, fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) (runtime.Match, error)) error {
	ret := _m.Called(name, fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterMatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) (runtime.Match, error)) error); ok {
		r0 = rf(name, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterMatch'
type Initializer_RegisterMatch_Call struct {
	*mock.Call
}

// RegisterMatch is a helper method to define mock.On call
//   - name string
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule)(runtime.Match , error)
func (_e *Initializer_Expecter) RegisterMatch(name interface{}, fn interface{}) *Initializer_RegisterMatch_Call {
	return &Initializer_RegisterMatch_Call{Call: _e.mock.On("RegisterMatch", name, fn)}
}

func (_c *Initializer_RegisterMatch_Call) Run(run func(name string, fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) (runtime.Match, error))) *Initializer_RegisterMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) (runtime.Match, error)))
	})
	return _c
}

func (_c *Initializer_RegisterMatch_Call) Return(_a0 error) *Initializer_RegisterMatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterMatch_Call) RunAndReturn(run func(string, func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) (runtime.Match, error)) error) *Initializer_RegisterMatch_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterMatchmakerMatched provides a mock function with given fields: fn
func (_m *Initializer) RegisterMatchmakerMatched(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, []runtime.MatchmakerEntry) (string, error)) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterMatchmakerMatched")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, []runtime.MatchmakerEntry) (string, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterMatchmakerMatched_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterMatchmakerMatched'
type Initializer_RegisterMatchmakerMatched_Call struct {
	*mock.Call
}

// RegisterMatchmakerMatched is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , []runtime.MatchmakerEntry)(string , error)
func (_e *Initializer_Expecter) RegisterMatchmakerMatched(fn interface{}) *Initializer_RegisterMatchmakerMatched_Call {
	return &Initializer_RegisterMatchmakerMatched_Call{Call: _e.mock.On("RegisterMatchmakerMatched", fn)}
}

func (_c *Initializer_RegisterMatchmakerMatched_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, []runtime.MatchmakerEntry) (string, error))) *Initializer_RegisterMatchmakerMatched_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, []runtime.MatchmakerEntry) (string, error)))
	})
	return _c
}

func (_c *Initializer_RegisterMatchmakerMatched_Call) Return(_a0 error) *Initializer_RegisterMatchmakerMatched_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterMatchmakerMatched_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, []runtime.MatchmakerEntry) (string, error)) error) *Initializer_RegisterMatchmakerMatched_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterMatchmakerOverride provides a mock function with given fields: fn
func (_m *Initializer) RegisterMatchmakerOverride(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, [][]runtime.MatchmakerEntry) [][]runtime.MatchmakerEntry) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterMatchmakerOverride")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, [][]runtime.MatchmakerEntry) [][]runtime.MatchmakerEntry) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterMatchmakerOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterMatchmakerOverride'
type Initializer_RegisterMatchmakerOverride_Call struct {
	*mock.Call
}

// RegisterMatchmakerOverride is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , [][]runtime.MatchmakerEntry) [][]runtime.MatchmakerEntry
func (_e *Initializer_Expecter) RegisterMatchmakerOverride(fn interface{}) *Initializer_RegisterMatchmakerOverride_Call {
	return &Initializer_RegisterMatchmakerOverride_Call{Call: _e.mock.On("RegisterMatchmakerOverride", fn)}
}

func (_c *Initializer_RegisterMatchmakerOverride_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, [][]runtime.MatchmakerEntry) [][]runtime.MatchmakerEntry)) *Initializer_RegisterMatchmakerOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, [][]runtime.MatchmakerEntry) [][]runtime.MatchmakerEntry))
	})
	return _c
}

func (_c *Initializer_RegisterMatchmakerOverride_Call) Return(_a0 error) *Initializer_RegisterMatchmakerOverride_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterMatchmakerOverride_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, [][]runtime.MatchmakerEntry) [][]runtime.MatchmakerEntry) error) *Initializer_RegisterMatchmakerOverride_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterPurchaseNotificationApple provides a mock function with given fields: fn
func (_m *Initializer) RegisterPurchaseNotificationApple(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedPurchase, string) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterPurchaseNotificationApple")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedPurchase, string) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterPurchaseNotificationApple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterPurchaseNotificationApple'
type Initializer_RegisterPurchaseNotificationApple_Call struct {
	*mock.Call
}

// RegisterPurchaseNotificationApple is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ValidatedPurchase , string) error
func (_e *Initializer_Expecter) RegisterPurchaseNotificationApple(fn interface{}) *Initializer_RegisterPurchaseNotificationApple_Call {
	return &Initializer_RegisterPurchaseNotificationApple_Call{Call: _e.mock.On("RegisterPurchaseNotificationApple", fn)}
}

func (_c *Initializer_RegisterPurchaseNotificationApple_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedPurchase, string) error)) *Initializer_RegisterPurchaseNotificationApple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedPurchase, string) error))
	})
	return _c
}

func (_c *Initializer_RegisterPurchaseNotificationApple_Call) Return(_a0 error) *Initializer_RegisterPurchaseNotificationApple_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterPurchaseNotificationApple_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedPurchase, string) error) error) *Initializer_RegisterPurchaseNotificationApple_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterPurchaseNotificationGoogle provides a mock function with given fields: fn
func (_m *Initializer) RegisterPurchaseNotificationGoogle(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedPurchase, string) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterPurchaseNotificationGoogle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedPurchase, string) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterPurchaseNotificationGoogle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterPurchaseNotificationGoogle'
type Initializer_RegisterPurchaseNotificationGoogle_Call struct {
	*mock.Call
}

// RegisterPurchaseNotificationGoogle is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ValidatedPurchase , string) error
func (_e *Initializer_Expecter) RegisterPurchaseNotificationGoogle(fn interface{}) *Initializer_RegisterPurchaseNotificationGoogle_Call {
	return &Initializer_RegisterPurchaseNotificationGoogle_Call{Call: _e.mock.On("RegisterPurchaseNotificationGoogle", fn)}
}

func (_c *Initializer_RegisterPurchaseNotificationGoogle_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedPurchase, string) error)) *Initializer_RegisterPurchaseNotificationGoogle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedPurchase, string) error))
	})
	return _c
}

func (_c *Initializer_RegisterPurchaseNotificationGoogle_Call) Return(_a0 error) *Initializer_RegisterPurchaseNotificationGoogle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterPurchaseNotificationGoogle_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedPurchase, string) error) error) *Initializer_RegisterPurchaseNotificationGoogle_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterRpc provides a mock function with given fields: id, fn
func (_m *Initializer) RegisterRpc(id string, fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, string) (string, error)) error {
	ret := _m.Called(id, fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterRpc")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, string) (string, error)) error); ok {
		r0 = rf(id, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterRpc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterRpc'
type Initializer_RegisterRpc_Call struct {
	*mock.Call
}

// RegisterRpc is a helper method to define mock.On call
//   - id string
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , string)(string , error)
func (_e *Initializer_Expecter) RegisterRpc(id interface{}, fn interface{}) *Initializer_RegisterRpc_Call {
	return &Initializer_RegisterRpc_Call{Call: _e.mock.On("RegisterRpc", id, fn)}
}

func (_c *Initializer_RegisterRpc_Call) Run(run func(id string, fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, string) (string, error))) *Initializer_RegisterRpc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, string) (string, error)))
	})
	return _c
}

func (_c *Initializer_RegisterRpc_Call) Return(_a0 error) *Initializer_RegisterRpc_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterRpc_Call) RunAndReturn(run func(string, func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, string) (string, error)) error) *Initializer_RegisterRpc_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterSubscriptionNotificationApple provides a mock function with given fields: fn
func (_m *Initializer) RegisterSubscriptionNotificationApple(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedSubscription, string) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterSubscriptionNotificationApple")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedSubscription, string) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterSubscriptionNotificationApple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterSubscriptionNotificationApple'
type Initializer_RegisterSubscriptionNotificationApple_Call struct {
	*mock.Call
}

// RegisterSubscriptionNotificationApple is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ValidatedSubscription , string) error
func (_e *Initializer_Expecter) RegisterSubscriptionNotificationApple(fn interface{}) *Initializer_RegisterSubscriptionNotificationApple_Call {
	return &Initializer_RegisterSubscriptionNotificationApple_Call{Call: _e.mock.On("RegisterSubscriptionNotificationApple", fn)}
}

func (_c *Initializer_RegisterSubscriptionNotificationApple_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedSubscription, string) error)) *Initializer_RegisterSubscriptionNotificationApple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedSubscription, string) error))
	})
	return _c
}

func (_c *Initializer_RegisterSubscriptionNotificationApple_Call) Return(_a0 error) *Initializer_RegisterSubscriptionNotificationApple_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterSubscriptionNotificationApple_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedSubscription, string) error) error) *Initializer_RegisterSubscriptionNotificationApple_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterSubscriptionNotificationGoogle provides a mock function with given fields: fn
func (_m *Initializer) RegisterSubscriptionNotificationGoogle(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedSubscription, string) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterSubscriptionNotificationGoogle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedSubscription, string) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterSubscriptionNotificationGoogle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterSubscriptionNotificationGoogle'
type Initializer_RegisterSubscriptionNotificationGoogle_Call struct {
	*mock.Call
}

// RegisterSubscriptionNotificationGoogle is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.ValidatedSubscription , string) error
func (_e *Initializer_Expecter) RegisterSubscriptionNotificationGoogle(fn interface{}) *Initializer_RegisterSubscriptionNotificationGoogle_Call {
	return &Initializer_RegisterSubscriptionNotificationGoogle_Call{Call: _e.mock.On("RegisterSubscriptionNotificationGoogle", fn)}
}

func (_c *Initializer_RegisterSubscriptionNotificationGoogle_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedSubscription, string) error)) *Initializer_RegisterSubscriptionNotificationGoogle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedSubscription, string) error))
	})
	return _c
}

func (_c *Initializer_RegisterSubscriptionNotificationGoogle_Call) Return(_a0 error) *Initializer_RegisterSubscriptionNotificationGoogle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterSubscriptionNotificationGoogle_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedSubscription, string) error) error) *Initializer_RegisterSubscriptionNotificationGoogle_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterTournamentEnd provides a mock function with given fields: fn
func (_m *Initializer) RegisterTournamentEnd(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Tournament, int64, int64) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterTournamentEnd")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Tournament, int64, int64) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterTournamentEnd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterTournamentEnd'
type Initializer_RegisterTournamentEnd_Call struct {
	*mock.Call
}

// RegisterTournamentEnd is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.Tournament , int64 , int64) error
func (_e *Initializer_Expecter) RegisterTournamentEnd(fn interface{}) *Initializer_RegisterTournamentEnd_Call {
	return &Initializer_RegisterTournamentEnd_Call{Call: _e.mock.On("RegisterTournamentEnd", fn)}
}

func (_c *Initializer_RegisterTournamentEnd_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Tournament, int64, int64) error)) *Initializer_RegisterTournamentEnd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Tournament, int64, int64) error))
	})
	return _c
}

func (_c *Initializer_RegisterTournamentEnd_Call) Return(_a0 error) *Initializer_RegisterTournamentEnd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterTournamentEnd_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Tournament, int64, int64) error) error) *Initializer_RegisterTournamentEnd_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterTournamentReset provides a mock function with given fields: fn
func (_m *Initializer) RegisterTournamentReset(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Tournament, int64, int64) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterTournamentReset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Tournament, int64, int64) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Initializer_RegisterTournamentReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterTournamentReset'
type Initializer_RegisterTournamentReset_Call struct {
	*mock.Call
}

// RegisterTournamentReset is a helper method to define mock.On call
//   - fn func(context.Context , runtime.Logger , *sql.DB , runtime.NakamaModule , *api.Tournament , int64 , int64) error
func (_e *Initializer_Expecter) RegisterTournamentReset(fn interface{}) *Initializer_RegisterTournamentReset_Call {
	return &Initializer_RegisterTournamentReset_Call{Call: _e.mock.On("RegisterTournamentReset", fn)}
}

func (_c *Initializer_RegisterTournamentReset_Call) Run(run func(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Tournament, int64, int64) error)) *Initializer_RegisterTournamentReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Tournament, int64, int64) error))
	})
	return _c
}

func (_c *Initializer_RegisterTournamentReset_Call) Return(_a0 error) *Initializer_RegisterTournamentReset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Initializer_RegisterTournamentReset_Call) RunAndReturn(run func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Tournament, int64, int64) error) error) *Initializer_RegisterTournamentReset_Call {
	_c.Call.Return(run)
	return _c
}

// NewInitializer creates a new instance of Initializer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInitializer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Initializer {
	mock := &Initializer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
