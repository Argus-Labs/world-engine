// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/heroiclabs/nakama-common/api"

	mock "github.com/stretchr/testify/mock"

	rtapi "github.com/heroiclabs/nakama-common/rtapi"

	runtime "github.com/heroiclabs/nakama-common/runtime"

	sql "database/sql"
)

// MockInitializer is an autogenerated mock type for the Initializer type
type MockInitializer struct {
	mock.Mock
}

// RegisterAfterAddFriends provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterAddFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddFriendsRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddFriendsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterAddGroupUsers provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterAddGroupUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddGroupUsersRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddGroupUsersRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterAuthenticateApple provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterAuthenticateApple(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateAppleRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateAppleRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterAuthenticateCustom provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterAuthenticateCustom(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateCustomRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateCustomRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterAuthenticateDevice provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterAuthenticateDevice(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateDeviceRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateDeviceRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterAuthenticateEmail provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterAuthenticateEmail(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateEmailRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateEmailRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterAuthenticateFacebook provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterAuthenticateFacebook(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateFacebookRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateFacebookRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterAuthenticateFacebookInstantGame provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterAuthenticateFacebookInstantGame(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateFacebookInstantGameRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateFacebookInstantGameRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterAuthenticateGameCenter provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterAuthenticateGameCenter(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateGameCenterRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateGameCenterRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterAuthenticateGoogle provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterAuthenticateGoogle(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateGoogleRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateGoogleRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterAuthenticateSteam provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterAuthenticateSteam(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateSteamRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.AuthenticateSteamRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterBanGroupUsers provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterBanGroupUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BanGroupUsersRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BanGroupUsersRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterBlockFriends provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterBlockFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BlockFriendsRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BlockFriendsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterCreateGroup provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterCreateGroup(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Group, *api.CreateGroupRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Group, *api.CreateGroupRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterDeleteAccount provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterDeleteAccount(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterDeleteFriends provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterDeleteFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteFriendsRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteFriendsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterDeleteGroup provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterDeleteGroup(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteGroupRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteGroupRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterDeleteLeaderboardRecord provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterDeleteLeaderboardRecord(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteLeaderboardRecordRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteLeaderboardRecordRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterDeleteNotifications provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterDeleteNotifications(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteNotificationsRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteNotificationsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterDeleteStorageObjects provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterDeleteStorageObjects(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteStorageObjectsRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteStorageObjectsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterDeleteTournamentRecord provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterDeleteTournamentRecord(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteTournamentRecordRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteTournamentRecordRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterDemoteGroupUsers provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterDemoteGroupUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DemoteGroupUsersRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DemoteGroupUsersRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterGetAccount provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterGetAccount(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Account) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Account) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterGetSubscription provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterGetSubscription(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedSubscription, *api.GetSubscriptionRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedSubscription, *api.GetSubscriptionRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterGetUsers provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterGetUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Users, *api.GetUsersRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Users, *api.GetUsersRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterImportFacebookFriends provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterImportFacebookFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportFacebookFriendsRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportFacebookFriendsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterImportSteamFriends provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterImportSteamFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportSteamFriendsRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportSteamFriendsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterJoinGroup provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterJoinGroup(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinGroupRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinGroupRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterJoinTournament provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterJoinTournament(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinTournamentRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinTournamentRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterKickGroupUsers provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterKickGroupUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.KickGroupUsersRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.KickGroupUsersRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterLeaveGroup provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterLeaveGroup(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaveGroupRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaveGroupRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterLinkApple provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterLinkApple(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterLinkCustom provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterLinkCustom(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterLinkDevice provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterLinkDevice(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterLinkEmail provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterLinkEmail(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterLinkFacebook provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterLinkFacebook(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkFacebookRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkFacebookRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterLinkFacebookInstantGame provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterLinkFacebookInstantGame(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterLinkGameCenter provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterLinkGameCenter(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterLinkGoogle provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterLinkGoogle(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterLinkSteam provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterLinkSteam(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkSteamRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkSteamRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterListChannelMessages provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterListChannelMessages(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ChannelMessageList, *api.ListChannelMessagesRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ChannelMessageList, *api.ListChannelMessagesRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterListFriends provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterListFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.FriendList) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.FriendList) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterListFriendsOfFriends provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterListFriendsOfFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.FriendsOfFriendsList) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.FriendsOfFriendsList) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterListGroupUsers provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterListGroupUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GroupUserList, *api.ListGroupUsersRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GroupUserList, *api.ListGroupUsersRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterListGroups provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterListGroups(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GroupList, *api.ListGroupsRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GroupList, *api.ListGroupsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterListLeaderboardRecords provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterListLeaderboardRecords(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecordList, *api.ListLeaderboardRecordsRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecordList, *api.ListLeaderboardRecordsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterListLeaderboardRecordsAroundOwner provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterListLeaderboardRecordsAroundOwner(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecordList, *api.ListLeaderboardRecordsAroundOwnerRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecordList, *api.ListLeaderboardRecordsAroundOwnerRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterListMatches provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterListMatches(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.MatchList, *api.ListMatchesRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.MatchList, *api.ListMatchesRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterListNotifications provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterListNotifications(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.NotificationList, *api.ListNotificationsRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.NotificationList, *api.ListNotificationsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterListStorageObjects provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterListStorageObjects(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.StorageObjectList, *api.ListStorageObjectsRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.StorageObjectList, *api.ListStorageObjectsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterListSubscriptions provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterListSubscriptions(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SubscriptionList, *api.ListSubscriptionsRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SubscriptionList, *api.ListSubscriptionsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterListTournamentRecords provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterListTournamentRecords(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.TournamentRecordList, *api.ListTournamentRecordsRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.TournamentRecordList, *api.ListTournamentRecordsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterListTournamentRecordsAroundOwner provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterListTournamentRecordsAroundOwner(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.TournamentRecordList, *api.ListTournamentRecordsAroundOwnerRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.TournamentRecordList, *api.ListTournamentRecordsAroundOwnerRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterListTournaments provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterListTournaments(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.TournamentList, *api.ListTournamentsRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.TournamentList, *api.ListTournamentsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterListUserGroups provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterListUserGroups(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UserGroupList, *api.ListUserGroupsRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UserGroupList, *api.ListUserGroupsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterPromoteGroupUsers provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterPromoteGroupUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.PromoteGroupUsersRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.PromoteGroupUsersRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterReadStorageObjects provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterReadStorageObjects(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.StorageObjects, *api.ReadStorageObjectsRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.StorageObjects, *api.ReadStorageObjectsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterRt provides a mock function with given fields: id, fn
func (_m *MockInitializer) RegisterAfterRt(id string, fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *rtapi.Envelope, *rtapi.Envelope) error) error {
	ret := _m.Called(id, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *rtapi.Envelope, *rtapi.Envelope) error) error); ok {
		r0 = rf(id, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterSessionLogout provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterSessionLogout(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SessionLogoutRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SessionLogoutRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterSessionRefresh provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterSessionRefresh(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.SessionRefreshRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Session, *api.SessionRefreshRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterUnlinkApple provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterUnlinkApple(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterUnlinkCustom provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterUnlinkCustom(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterUnlinkDevice provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterUnlinkDevice(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterUnlinkEmail provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterUnlinkEmail(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterUnlinkFacebook provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterUnlinkFacebook(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebook) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebook) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterUnlinkFacebookInstantGame provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterUnlinkFacebookInstantGame(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterUnlinkGameCenter provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterUnlinkGameCenter(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterUnlinkGoogle provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterUnlinkGoogle(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterUnlinkSteam provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterUnlinkSteam(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountSteam) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountSteam) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterUpdateAccount provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterUpdateAccount(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateAccountRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateAccountRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterUpdateGroup provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterUpdateGroup(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateGroupRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateGroupRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterValidatePurchaseApple provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterValidatePurchaseApple(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseResponse, *api.ValidatePurchaseAppleRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseResponse, *api.ValidatePurchaseAppleRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterValidatePurchaseFacebookInstant provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterValidatePurchaseFacebookInstant(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseResponse, *api.ValidatePurchaseFacebookInstantRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseResponse, *api.ValidatePurchaseFacebookInstantRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterValidatePurchaseGoogle provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterValidatePurchaseGoogle(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseResponse, *api.ValidatePurchaseGoogleRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseResponse, *api.ValidatePurchaseGoogleRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterValidatePurchaseHuawei provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterValidatePurchaseHuawei(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseResponse, *api.ValidatePurchaseHuaweiRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseResponse, *api.ValidatePurchaseHuaweiRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterValidateSubscriptionApple provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterValidateSubscriptionApple(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionResponse, *api.ValidateSubscriptionAppleRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionResponse, *api.ValidateSubscriptionAppleRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterValidateSubscriptionGoogle provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterValidateSubscriptionGoogle(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionResponse, *api.ValidateSubscriptionGoogleRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionResponse, *api.ValidateSubscriptionGoogleRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterWriteLeaderboardRecord provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterWriteLeaderboardRecord(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecord, *api.WriteLeaderboardRecordRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecord, *api.WriteLeaderboardRecordRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterWriteStorageObjects provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterWriteStorageObjects(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.StorageObjectAcks, *api.WriteStorageObjectsRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.StorageObjectAcks, *api.WriteStorageObjectsRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterAfterWriteTournamentRecord provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterAfterWriteTournamentRecord(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecord, *api.WriteTournamentRecordRequest) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaderboardRecord, *api.WriteTournamentRecordRequest) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeAddFriends provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeAddFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddFriendsRequest) (*api.AddFriendsRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddFriendsRequest) (*api.AddFriendsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeAddGroupUsers provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeAddGroupUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddGroupUsersRequest) (*api.AddGroupUsersRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AddGroupUsersRequest) (*api.AddGroupUsersRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeAuthenticateApple provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeAuthenticateApple(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateAppleRequest) (*api.AuthenticateAppleRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateAppleRequest) (*api.AuthenticateAppleRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeAuthenticateCustom provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeAuthenticateCustom(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateCustomRequest) (*api.AuthenticateCustomRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateCustomRequest) (*api.AuthenticateCustomRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeAuthenticateDevice provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeAuthenticateDevice(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateDeviceRequest) (*api.AuthenticateDeviceRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateDeviceRequest) (*api.AuthenticateDeviceRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeAuthenticateEmail provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeAuthenticateEmail(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateEmailRequest) (*api.AuthenticateEmailRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateEmailRequest) (*api.AuthenticateEmailRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeAuthenticateFacebook provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeAuthenticateFacebook(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateFacebookRequest) (*api.AuthenticateFacebookRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateFacebookRequest) (*api.AuthenticateFacebookRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeAuthenticateFacebookInstantGame provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeAuthenticateFacebookInstantGame(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateFacebookInstantGameRequest) (*api.AuthenticateFacebookInstantGameRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateFacebookInstantGameRequest) (*api.AuthenticateFacebookInstantGameRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeAuthenticateGameCenter provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeAuthenticateGameCenter(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateGameCenterRequest) (*api.AuthenticateGameCenterRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateGameCenterRequest) (*api.AuthenticateGameCenterRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeAuthenticateGoogle provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeAuthenticateGoogle(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateGoogleRequest) (*api.AuthenticateGoogleRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateGoogleRequest) (*api.AuthenticateGoogleRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeAuthenticateSteam provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeAuthenticateSteam(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateSteamRequest) (*api.AuthenticateSteamRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AuthenticateSteamRequest) (*api.AuthenticateSteamRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeBanGroupUsers provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeBanGroupUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BanGroupUsersRequest) (*api.BanGroupUsersRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BanGroupUsersRequest) (*api.BanGroupUsersRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeBlockFriends provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeBlockFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BlockFriendsRequest) (*api.BlockFriendsRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.BlockFriendsRequest) (*api.BlockFriendsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeCreateGroup provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeCreateGroup(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.CreateGroupRequest) (*api.CreateGroupRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.CreateGroupRequest) (*api.CreateGroupRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeDeleteAccount provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeDeleteAccount(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeDeleteFriends provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeDeleteFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteFriendsRequest) (*api.DeleteFriendsRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteFriendsRequest) (*api.DeleteFriendsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeDeleteGroup provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeDeleteGroup(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteGroupRequest) (*api.DeleteGroupRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteGroupRequest) (*api.DeleteGroupRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeDeleteLeaderboardRecord provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeDeleteLeaderboardRecord(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteLeaderboardRecordRequest) (*api.DeleteLeaderboardRecordRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteLeaderboardRecordRequest) (*api.DeleteLeaderboardRecordRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeDeleteNotifications provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeDeleteNotifications(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteNotificationsRequest) (*api.DeleteNotificationsRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteNotificationsRequest) (*api.DeleteNotificationsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeDeleteStorageObjects provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeDeleteStorageObjects(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteStorageObjectsRequest) (*api.DeleteStorageObjectsRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteStorageObjectsRequest) (*api.DeleteStorageObjectsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeDeleteTournamentRecord provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeDeleteTournamentRecord(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteTournamentRecordRequest) (*api.DeleteTournamentRecordRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DeleteTournamentRecordRequest) (*api.DeleteTournamentRecordRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeDemoteGroupUsers provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeDemoteGroupUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DemoteGroupUsersRequest) (*api.DemoteGroupUsersRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.DemoteGroupUsersRequest) (*api.DemoteGroupUsersRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeGetAccount provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeGetAccount(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeGetSubscription provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeGetSubscription(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GetSubscriptionRequest) (*api.GetSubscriptionRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GetSubscriptionRequest) (*api.GetSubscriptionRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeGetUsers provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeGetUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GetUsersRequest) (*api.GetUsersRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.GetUsersRequest) (*api.GetUsersRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeImportFacebookFriends provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeImportFacebookFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportFacebookFriendsRequest) (*api.ImportFacebookFriendsRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportFacebookFriendsRequest) (*api.ImportFacebookFriendsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeImportSteamFriends provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeImportSteamFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportSteamFriendsRequest) (*api.ImportSteamFriendsRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ImportSteamFriendsRequest) (*api.ImportSteamFriendsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeJoinGroup provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeJoinGroup(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinGroupRequest) (*api.JoinGroupRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinGroupRequest) (*api.JoinGroupRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeJoinTournament provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeJoinTournament(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinTournamentRequest) (*api.JoinTournamentRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.JoinTournamentRequest) (*api.JoinTournamentRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeKickGroupUsers provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeKickGroupUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.KickGroupUsersRequest) (*api.KickGroupUsersRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.KickGroupUsersRequest) (*api.KickGroupUsersRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeLeaveGroup provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeLeaveGroup(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaveGroupRequest) (*api.LeaveGroupRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LeaveGroupRequest) (*api.LeaveGroupRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeLinkApple provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeLinkApple(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) (*api.AccountApple, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) (*api.AccountApple, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeLinkCustom provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeLinkCustom(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) (*api.AccountCustom, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) (*api.AccountCustom, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeLinkDevice provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeLinkDevice(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) (*api.AccountDevice, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) (*api.AccountDevice, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeLinkEmail provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeLinkEmail(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) (*api.AccountEmail, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) (*api.AccountEmail, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeLinkFacebook provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeLinkFacebook(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkFacebookRequest) (*api.LinkFacebookRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkFacebookRequest) (*api.LinkFacebookRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeLinkFacebookInstantGame provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeLinkFacebookInstantGame(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) (*api.AccountFacebookInstantGame, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) (*api.AccountFacebookInstantGame, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeLinkGameCenter provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeLinkGameCenter(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) (*api.AccountGameCenter, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) (*api.AccountGameCenter, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeLinkGoogle provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeLinkGoogle(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) (*api.AccountGoogle, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) (*api.AccountGoogle, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeLinkSteam provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeLinkSteam(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkSteamRequest) (*api.LinkSteamRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.LinkSteamRequest) (*api.LinkSteamRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeListChannelMessages provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeListChannelMessages(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListChannelMessagesRequest) (*api.ListChannelMessagesRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListChannelMessagesRequest) (*api.ListChannelMessagesRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeListFriends provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeListFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListFriendsRequest) (*api.ListFriendsRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListFriendsRequest) (*api.ListFriendsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeListFriendsOfFriends provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeListFriendsOfFriends(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListFriendsOfFriendsRequest) (*api.ListFriendsOfFriendsRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListFriendsOfFriendsRequest) (*api.ListFriendsOfFriendsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeListGroupUsers provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeListGroupUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListGroupUsersRequest) (*api.ListGroupUsersRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListGroupUsersRequest) (*api.ListGroupUsersRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeListGroups provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeListGroups(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListGroupsRequest) (*api.ListGroupsRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListGroupsRequest) (*api.ListGroupsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeListLeaderboardRecords provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeListLeaderboardRecords(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListLeaderboardRecordsRequest) (*api.ListLeaderboardRecordsRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListLeaderboardRecordsRequest) (*api.ListLeaderboardRecordsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeListLeaderboardRecordsAroundOwner provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeListLeaderboardRecordsAroundOwner(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListLeaderboardRecordsAroundOwnerRequest) (*api.ListLeaderboardRecordsAroundOwnerRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListLeaderboardRecordsAroundOwnerRequest) (*api.ListLeaderboardRecordsAroundOwnerRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeListMatches provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeListMatches(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListMatchesRequest) (*api.ListMatchesRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListMatchesRequest) (*api.ListMatchesRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeListNotifications provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeListNotifications(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListNotificationsRequest) (*api.ListNotificationsRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListNotificationsRequest) (*api.ListNotificationsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeListStorageObjects provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeListStorageObjects(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListStorageObjectsRequest) (*api.ListStorageObjectsRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListStorageObjectsRequest) (*api.ListStorageObjectsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeListSubscriptions provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeListSubscriptions(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListSubscriptionsRequest) (*api.ListSubscriptionsRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListSubscriptionsRequest) (*api.ListSubscriptionsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeListTournamentRecords provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeListTournamentRecords(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListTournamentRecordsRequest) (*api.ListTournamentRecordsRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListTournamentRecordsRequest) (*api.ListTournamentRecordsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeListTournamentRecordsAroundOwner provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeListTournamentRecordsAroundOwner(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListTournamentRecordsAroundOwnerRequest) (*api.ListTournamentRecordsAroundOwnerRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListTournamentRecordsAroundOwnerRequest) (*api.ListTournamentRecordsAroundOwnerRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeListTournaments provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeListTournaments(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListTournamentsRequest) (*api.ListTournamentsRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListTournamentsRequest) (*api.ListTournamentsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeListUserGroups provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeListUserGroups(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListUserGroupsRequest) (*api.ListUserGroupsRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ListUserGroupsRequest) (*api.ListUserGroupsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforePromoteGroupUsers provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforePromoteGroupUsers(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.PromoteGroupUsersRequest) (*api.PromoteGroupUsersRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.PromoteGroupUsersRequest) (*api.PromoteGroupUsersRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeReadStorageObjects provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeReadStorageObjects(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ReadStorageObjectsRequest) (*api.ReadStorageObjectsRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ReadStorageObjectsRequest) (*api.ReadStorageObjectsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeRt provides a mock function with given fields: id, fn
func (_m *MockInitializer) RegisterBeforeRt(id string, fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *rtapi.Envelope) (*rtapi.Envelope, error)) error {
	ret := _m.Called(id, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *rtapi.Envelope) (*rtapi.Envelope, error)) error); ok {
		r0 = rf(id, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeSessionLogout provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeSessionLogout(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SessionLogoutRequest) (*api.SessionLogoutRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SessionLogoutRequest) (*api.SessionLogoutRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeSessionRefresh provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeSessionRefresh(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SessionRefreshRequest) (*api.SessionRefreshRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.SessionRefreshRequest) (*api.SessionRefreshRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeUnlinkApple provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeUnlinkApple(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) (*api.AccountApple, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountApple) (*api.AccountApple, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeUnlinkCustom provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeUnlinkCustom(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) (*api.AccountCustom, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountCustom) (*api.AccountCustom, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeUnlinkDevice provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeUnlinkDevice(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) (*api.AccountDevice, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountDevice) (*api.AccountDevice, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeUnlinkEmail provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeUnlinkEmail(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) (*api.AccountEmail, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountEmail) (*api.AccountEmail, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeUnlinkFacebook provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeUnlinkFacebook(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebook) (*api.AccountFacebook, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebook) (*api.AccountFacebook, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeUnlinkFacebookInstantGame provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeUnlinkFacebookInstantGame(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) (*api.AccountFacebookInstantGame, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountFacebookInstantGame) (*api.AccountFacebookInstantGame, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeUnlinkGameCenter provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeUnlinkGameCenter(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) (*api.AccountGameCenter, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGameCenter) (*api.AccountGameCenter, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeUnlinkGoogle provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeUnlinkGoogle(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) (*api.AccountGoogle, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountGoogle) (*api.AccountGoogle, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeUnlinkSteam provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeUnlinkSteam(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountSteam) (*api.AccountSteam, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.AccountSteam) (*api.AccountSteam, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeUpdateAccount provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeUpdateAccount(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateAccountRequest) (*api.UpdateAccountRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateAccountRequest) (*api.UpdateAccountRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeUpdateGroup provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeUpdateGroup(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateGroupRequest) (*api.UpdateGroupRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.UpdateGroupRequest) (*api.UpdateGroupRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeValidatePurchaseApple provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeValidatePurchaseApple(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseAppleRequest) (*api.ValidatePurchaseAppleRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseAppleRequest) (*api.ValidatePurchaseAppleRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeValidatePurchaseFacebookInstant provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeValidatePurchaseFacebookInstant(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseFacebookInstantRequest) (*api.ValidatePurchaseFacebookInstantRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseFacebookInstantRequest) (*api.ValidatePurchaseFacebookInstantRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeValidatePurchaseGoogle provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeValidatePurchaseGoogle(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseGoogleRequest) (*api.ValidatePurchaseGoogleRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseGoogleRequest) (*api.ValidatePurchaseGoogleRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeValidatePurchaseHuawei provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeValidatePurchaseHuawei(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseHuaweiRequest) (*api.ValidatePurchaseHuaweiRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatePurchaseHuaweiRequest) (*api.ValidatePurchaseHuaweiRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeValidateSubscriptionApple provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeValidateSubscriptionApple(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionAppleRequest) (*api.ValidateSubscriptionAppleRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionAppleRequest) (*api.ValidateSubscriptionAppleRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeValidateSubscriptionGoogle provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeValidateSubscriptionGoogle(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionGoogleRequest) (*api.ValidateSubscriptionGoogleRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidateSubscriptionGoogleRequest) (*api.ValidateSubscriptionGoogleRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeWriteLeaderboardRecord provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeWriteLeaderboardRecord(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.WriteLeaderboardRecordRequest) (*api.WriteLeaderboardRecordRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.WriteLeaderboardRecordRequest) (*api.WriteLeaderboardRecordRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeWriteStorageObjects provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeWriteStorageObjects(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.WriteStorageObjectsRequest) (*api.WriteStorageObjectsRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.WriteStorageObjectsRequest) (*api.WriteStorageObjectsRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBeforeWriteTournamentRecord provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterBeforeWriteTournamentRecord(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.WriteTournamentRecordRequest) (*api.WriteTournamentRecordRequest, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.WriteTournamentRecordRequest) (*api.WriteTournamentRecordRequest, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterEvent provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterEvent(fn func(context.Context, runtime.Logger, *api.Event)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *api.Event)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterEventSessionEnd provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterEventSessionEnd(fn func(context.Context, runtime.Logger, *api.Event)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *api.Event)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterEventSessionStart provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterEventSessionStart(fn func(context.Context, runtime.Logger, *api.Event)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *api.Event)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterFleetManager provides a mock function with given fields: fleetManagerInit
func (_m *MockInitializer) RegisterFleetManager(fleetManagerInit runtime.FleetManagerInitializer) error {
	ret := _m.Called(fleetManagerInit)

	var r0 error
	if rf, ok := ret.Get(0).(func(runtime.FleetManagerInitializer) error); ok {
		r0 = rf(fleetManagerInit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterLeaderboardReset provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterLeaderboardReset(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Leaderboard, int64) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Leaderboard, int64) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterMatch provides a mock function with given fields: name, fn
func (_m *MockInitializer) RegisterMatch(name string, fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) (runtime.Match, error)) error {
	ret := _m.Called(name, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule) (runtime.Match, error)) error); ok {
		r0 = rf(name, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterMatchmakerMatched provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterMatchmakerMatched(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, []runtime.MatchmakerEntry) (string, error)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, []runtime.MatchmakerEntry) (string, error)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterMatchmakerOverride provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterMatchmakerOverride(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, [][]runtime.MatchmakerEntry) [][]runtime.MatchmakerEntry) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, [][]runtime.MatchmakerEntry) [][]runtime.MatchmakerEntry) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterPurchaseNotificationApple provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterPurchaseNotificationApple(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedPurchase, string) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedPurchase, string) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterPurchaseNotificationGoogle provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterPurchaseNotificationGoogle(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedPurchase, string) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedPurchase, string) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterRpc provides a mock function with given fields: id, fn
func (_m *MockInitializer) RegisterRpc(id string, fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, string) (string, error)) error {
	ret := _m.Called(id, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, string) (string, error)) error); ok {
		r0 = rf(id, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterShutdown provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterShutdown(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule)) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule)) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterStorageIndex provides a mock function with given fields: name, collection, key, fields, sortableFields, maxEntries, indexOnly
func (_m *MockInitializer) RegisterStorageIndex(name string, collection string, key string, fields []string, sortableFields []string, maxEntries int, indexOnly bool) error {
	ret := _m.Called(name, collection, key, fields, sortableFields, maxEntries, indexOnly)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, []string, []string, int, bool) error); ok {
		r0 = rf(name, collection, key, fields, sortableFields, maxEntries, indexOnly)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterStorageIndexFilter provides a mock function with given fields: indexName, fn
func (_m *MockInitializer) RegisterStorageIndexFilter(indexName string, fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *runtime.StorageWrite) bool) error {
	ret := _m.Called(indexName, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *runtime.StorageWrite) bool) error); ok {
		r0 = rf(indexName, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterSubscriptionNotificationApple provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterSubscriptionNotificationApple(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedSubscription, string) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedSubscription, string) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterSubscriptionNotificationGoogle provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterSubscriptionNotificationGoogle(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedSubscription, string) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.ValidatedSubscription, string) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterTournamentEnd provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterTournamentEnd(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Tournament, int64, int64) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Tournament, int64, int64) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterTournamentReset provides a mock function with given fields: fn
func (_m *MockInitializer) RegisterTournamentReset(fn func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Tournament, int64, int64) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, runtime.Logger, *sql.DB, runtime.NakamaModule, *api.Tournament, int64, int64) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockInitializer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockInitializer creates a new instance of MockInitializer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockInitializer(t mockConstructorTestingTNewMockInitializer) *MockInitializer {
	mock := &MockInitializer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
