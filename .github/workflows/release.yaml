name: Release

## workflow will trigger on below condition,
## except image release that have jobs condition to trigger only on tagging
on:
  push:
    tags:
      - 'evm/v*.*.*'
      - 'relay/nakama/v*.*.*'

env:
  GOOGLE_REGISTRY_URL: us-docker.pkg.dev
  GITHUB_REGISTRY_URL: ghcr.io

jobs:
  evm-release:
    name: EVM Image Release
    if: startsWith(github.ref, 'refs/tags/evm/v')
    runs-on: namespace-profile-default
    defaults:
      run:
        shell: bash
        working-directory: evm
    # Add "id-token" with the intended permissions.
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache Docker images
        uses: ScribeMD/docker-cache@0.3.4
        with:
          key: docker-${{ runner.os }}-${{ hashFiles('evm/Dockerfile') }}
      - name: GCP auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_WIF_SERVICE_ACCOUNT }}
      - name: GCP - Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GCP_PROJECT_ID_PACKAGES }}
      - name: Docker - Auth to artifact registry
        run: |
          gcloud auth configure-docker ${{ env.GOOGLE_REGISTRY_URL }}
      - name: Docker - Auth to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GITHUB_REGISTRY_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker - Build
        run: |
          docker build -t evm-local-build:latest .
      - name: Docker - Publish Image Google Artifact Registry
        run: |
          ## Construct image_id
          IMAGE_ID_EVM=${{ env.GOOGLE_REGISTRY_URL }}/${{ github.repository_owner }}/${{ github.event.repository.name }}/evm
          IMAGE_ID_EVM=$(echo $IMAGE_ID_EVM | tr '[A-Z]' '[a-z]')

          ## Get version from tag name (ex: evm/v0.0.0 --> registry/evm:v0.0.0)
          ## Or use 'latest' when on main branch
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [ "$VERSION" == "main" ] && VERSION=latest
          echo "Image to push: $IMAGE_ID_EVM:$VERSION"

          docker tag evm-local-build:latest $IMAGE_ID_EVM:$VERSION
          docker push $IMAGE_ID_EVM:$VERSION
      - name: Docker - Publish Image to Github Container Registry
        run: |
          ## Construct image_id
          IMAGE_ID_EVM=${{ env.GITHUB_REGISTRY_URL }}/${{ github.repository_owner }}/evm
          IMAGE_ID_EVM=$(echo $IMAGE_ID_EVM | tr '[A-Z]' '[a-z]')

          ## Get version from tag name (ex: evm/v0.0.0 --> registry/evm:v0.0.0)
          ## Or use 'latest' when on main branch
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [ "$VERSION" == "main" ] && VERSION=latest
          echo "Image to push: $IMAGE_ID_EVM:$VERSION"

          docker tag evm-local-build:latest $IMAGE_ID_EVM:$VERSION
          docker push $IMAGE_ID_EVM:$VERSION
  nakama-release:
    name: Nakama Image Release
    if: startsWith(github.ref, 'refs/tags/relay/nakama/v')
    runs-on: namespace-profile-default
    defaults:
      run:
        shell: bash
        working-directory: relay/nakama
    # Add "id-token" with the intended permissions.
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker images
        uses: ScribeMD/docker-cache@0.3.7
        with:
          key: docker-${{ runner.os }}-${{ hashFiles('relay/nakama/Dockerfile') }}
      - name: GCP auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_WIF_SERVICE_ACCOUNT }}
      - name: GCP - Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GCP_PROJECT_ID_PACKAGES }}
      - name: Docker - Auth to Google Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.GOOGLE_REGISTRY_URL }}
      - name: Docker - Auth to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GITHUB_REGISTRY_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker - Build
        run: |
          docker build -t nakama-local-build:latest .
      - name: Docker - Publish Image to Google Artifact Registry
        run: |
          ## Construct image_id
          IMAGE_ID_NAKAMA=${{ env.GOOGLE_REGISTRY_URL }}/${{ github.repository_owner }}/${{ github.event.repository.name }}/relay/nakama
          IMAGE_ID_NAKAMA=$(echo $IMAGE_ID_NAKAMA | tr '[A-Z]' '[a-z]')

          ## Get version from tag name (ex: relay/nakama/v0.0.0 --> registry/relay/nakama:v0.0.0)
          ## Or use 'latest' when on main branch
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [ "$VERSION" == "main" ] && VERSION=latest
          echo "Image to push: $IMAGE_ID_NAKAMA:$VERSION"

          docker tag nakama-local-build:latest $IMAGE_ID_NAKAMA:$VERSION
          docker push $IMAGE_ID_NAKAMA:$VERSION
      - name: Docker - Publish Image to Github Container Registry
        run: |
          ## Construct image_id
          IMAGE_ID_NAKAMA=${{ env.GITHUB_REGISTRY_URL }}/${{ github.repository_owner }}/nakama
          IMAGE_ID_NAKAMA=$(echo $IMAGE_ID_NAKAMA | tr '[A-Z]' '[a-z]')

          ## Get version from tag name (ex: relay/nakama/v0.0.0 --> registry/relay/nakama:v0.0.0)
          ## Or use 'latest' when on main branch
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [ "$VERSION" == "main" ] && VERSION=latest
          echo "Image to push: $IMAGE_ID_NAKAMA:$VERSION"

          docker tag nakama-local-build:latest $IMAGE_ID_NAKAMA:$VERSION
          docker push $IMAGE_ID_NAKAMA:$VERSION
