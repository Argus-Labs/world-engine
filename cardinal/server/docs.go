// Package server Code generated by swaggo/swag. DO NOT EDIT
package server

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/events": {
            "get": {
                "description": "websocket connection for events.",
                "produces": [
                    "application/json"
                ],
                "summary": "Endpoint for events",
                "responses": {
                    "101": {
                        "description": "switch protocol to ws",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Displays information on http server and world game loop",
                "produces": [
                    "application/json"
                ],
                "summary": "Get information on status of world-engine",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.GetHealthResponse"
                        }
                    }
                }
            }
        },
        "/query/debug/state": {
            "post": {
                "description": "Displays the entire game state.",
                "produces": [
                    "application/json"
                ],
                "summary": "Get information on all entities and components in world-engine",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ecs.debugStateElement"
                            }
                        }
                    }
                }
            }
        },
        "/query/game/cql": {
            "post": {
                "description": "Query the ecs with CQL (cardinal query language)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Query the ecs with CQL (cardinal query language)",
                "parameters": [
                    {
                        "description": "cql (cardinal query language)",
                        "name": "cql",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ecs.CQLQueryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ecs.CQLQueryResponse"
                        }
                    }
                }
            }
        },
        "/query/game/{queryType}": {
            "post": {
                "description": "Query the ecs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Query the ecs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The query type",
                        "name": "queryType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Query Body",
                        "name": "queryBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "query response",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Invalid query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/query/http/endpoints": {
            "get": {
                "description": "Get all http endpoints from cardinal",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get all http endpoints from cardinal",
                "responses": {
                    "200": {
                        "description": "list of query endpoints",
                        "schema": {
                            "$ref": "#/definitions/handler.GetEndpointsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/query/persona/signer": {
            "post": {
                "description": "Get persona data from cardinal",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get persona data from cardinal",
                "parameters": [
                    {
                        "description": "Query Request",
                        "name": "QueryPersonaSignerRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ecs.QueryPersonaSignerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ecs.QueryPersonaSignerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/query/receipts/list": {
            "post": {
                "description": "Get transaction receipts from Cardinal",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get transaction receipts from Cardinal",
                "parameters": [
                    {
                        "description": "List Transaction Receipts Request",
                        "name": "ListTxReceiptsRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ecs.ListTxReceiptsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ecs.ListTxReceiptsReply"
                        }
                    },
                    "400": {
                        "description": "Invalid transaction request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tx/game/{txType}": {
            "post": {
                "description": "Submit a transaction to Cardinal\nCreate a Persona transaction to Cardinal",
                "consumes": [
                    "application/json",
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/json"
                ],
                "summary": "Create a Persona transaction to Cardinal",
                "parameters": [
                    {
                        "type": "string",
                        "description": "label of the transaction that wants to be submitted",
                        "name": "txType",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Transaction details",
                        "name": "txBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.Transaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.PostTransactionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid transaction request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tx/persona/create-persona": {
            "post": {
                "description": "Submit a transaction to Cardinal\nCreate a Persona transaction to Cardinal",
                "consumes": [
                    "application/json",
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/json"
                ],
                "summary": "Create a Persona transaction to Cardinal",
                "parameters": [
                    {
                        "description": "Transaction details",
                        "name": "txBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.Transaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.PostTransactionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid transaction request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ecs.CQLQueryRequest": {
            "type": "object",
            "properties": {
                "cql": {
                    "type": "string"
                }
            }
        },
        "ecs.CQLQueryResponse": {
            "type": "object",
            "properties": {
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ecs.cqlData"
                    }
                }
            }
        },
        "ecs.ListTxReceiptsReply": {
            "type": "object",
            "properties": {
                "endTick": {
                    "type": "integer"
                },
                "receipts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ecs.Receipt"
                    }
                },
                "startTick": {
                    "type": "integer"
                }
            }
        },
        "ecs.ListTxReceiptsRequest": {
            "type": "object",
            "properties": {
                "startTick": {
                    "type": "integer"
                }
            }
        },
        "ecs.QueryPersonaSignerRequest": {
            "type": "object",
            "properties": {
                "personaTag": {
                    "type": "string"
                },
                "tick": {
                    "type": "integer"
                }
            }
        },
        "ecs.QueryPersonaSignerResponse": {
            "type": "object",
            "properties": {
                "signerAddress": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "ecs.Receipt": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "result": {},
                "tick": {
                    "type": "integer"
                },
                "txHash": {
                    "type": "string"
                }
            }
        },
        "ecs.cqlData": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "ecs.debugStateElement": {
            "type": "object",
            "properties": {
                "components": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "handler.GetEndpointsResponse": {
            "type": "object",
            "properties": {
                "queryEndpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "txEndpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "handler.GetHealthResponse": {
            "type": "object",
            "properties": {
                "isGameLoopRunning": {
                    "type": "boolean"
                },
                "isServerRunning": {
                    "type": "boolean"
                }
            }
        },
        "handler.PostTransactionResponse": {
            "type": "object",
            "properties": {
                "tick": {
                    "type": "integer"
                },
                "txHash": {
                    "type": "string"
                }
            }
        },
        "handler.Transaction": {
            "type": "object",
            "properties": {
                "body": {
                    "description": "json string",
                    "type": "object"
                },
                "hash": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "nonce": {
                    "type": "integer"
                },
                "personaTag": {
                    "type": "string"
                },
                "signature": {
                    "description": "hex encoded string",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.0.1",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{"http", "ws"},
	Title:            "Cardinal",
	Description:      "Backend server for World Engine",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
