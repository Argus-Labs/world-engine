// CODE GENERATED BY BEAM. DO NOT EDIT.

package main

import (
	"fmt"
	"reflect"

	abi "github.com/ethereum/go-ethereum/accounts/abi"
)

type SendEnergyTxAbiWrapper abi.Type

var SendEnergyTxAbiType SendEnergyTxAbiWrapper

type ClaimPlanetTxAbiWrapper abi.Type

var ClaimPlanetTxAbiType ClaimPlanetTxAbiWrapper

type FooBarTxAbiWrapper abi.Type

var FooBarTxAbiType FooBarTxAbiWrapper

func init() {

	sendenergytxabi, err := abi.NewType("tuple", "", []abi.ArgumentMarshaling{abi.ArgumentMarshaling{
		Name: "To",
		Type: "string",
	}, abi.ArgumentMarshaling{
		Name: "From",
		Type: "string",
	}, abi.ArgumentMarshaling{
		Name: "Amount",
		Type: "uint64",
	}})
	if err != nil {
		panic(fmt.Errorf("could not build abi type for SendEnergyTx %w", err))
	}
	sendenergytxabi.TupleType = reflect.TypeOf(SendEnergyTx{})
	SendEnergyTxAbiType = SendEnergyTxAbiWrapper{Elem: &sendenergytxabi}

	claimplanettxabi, err := abi.NewType("tuple", "", []abi.ArgumentMarshaling{abi.ArgumentMarshaling{
		Name: "UserId",
		Type: "string",
	}, abi.ArgumentMarshaling{
		Name: "PlanetId",
		Type: "uint64",
	}, abi.ArgumentMarshaling{
		Name: "Healthy",
		Type: "bool",
	}})
	if err != nil {
		panic(fmt.Errorf("could not build abi type for ClaimPlanetTx %w", err))
	}
	claimplanettxabi.TupleType = reflect.TypeOf(ClaimPlanetTx{})
	ClaimPlanetTxAbiType = ClaimPlanetTxAbiWrapper{Elem: &claimplanettxabi}

	foobartxabi, err := abi.NewType("tuple", "", []abi.ArgumentMarshaling{abi.ArgumentMarshaling{
		Name: "Memes",
		Type: "int64[]",
	}, abi.ArgumentMarshaling{
		Name: "Stories",
		Type: "string[]",
	}, abi.ArgumentMarshaling{
		Name: "Okays",
		Type: "bool[]",
	}, abi.ArgumentMarshaling{
		Name: "ManyLargeNums",
		Type: "uint256[]",
	}, abi.ArgumentMarshaling{
		Name: "ManyAddrs",
		Type: "address[]",
	}, abi.ArgumentMarshaling{
		Name: "Okay",
		Type: "bool",
	}, abi.ArgumentMarshaling{
		Name: "SmolNum",
		Type: "int8",
	}, abi.ArgumentMarshaling{
		Name: "SmolUNum",
		Type: "uint8",
	}, abi.ArgumentMarshaling{
		Name: "LargeNum",
		Type: "uint256",
	}, abi.ArgumentMarshaling{
		Name: "Addr",
		Type: "address",
	}, abi.ArgumentMarshaling{
		Name: "Bytes",
		Type: "bytes",
	}})
	if err != nil {
		panic(fmt.Errorf("could not build abi type for FooBarTx %w", err))
	}
	foobartxabi.TupleType = reflect.TypeOf(FooBarTx{})
	FooBarTxAbiType = FooBarTxAbiWrapper{Elem: &foobartxabi}
}

func (w SendEnergyTxAbiWrapper) unmarshal(bz []byte) (*SendEnergyTx, error) {
	arg := abi.Arguments{{Type: abi.Type(w)}}
	unpacked, err := arg.Unpack(bz)
	if err != nil {
		return nil, fmt.Errorf("could not unpack bytes into SendEnergyTx")
	}
	msg, ok := unpacked[0].(SendEnergyTx)
	if !ok {
		return nil, fmt.Errorf("could not cast type to SendEnergyTx")
	}
	return &msg, nil
}

func (w SendEnergyTxAbiWrapper) UnmarshalAndSubmit(bz []byte, submitFn func(name string, v any)) error {
	msg, err := w.unmarshal(bz)
	if err != nil {
		return err
	}
	submitFn(reflect.TypeOf(*msg).Name(), msg)
	return nil
}

func (w ClaimPlanetTxAbiWrapper) unmarshal(bz []byte) (*ClaimPlanetTx, error) {
	arg := abi.Arguments{{Type: abi.Type(w)}}
	unpacked, err := arg.Unpack(bz)
	if err != nil {
		return nil, fmt.Errorf("could not unpack bytes into ClaimPlanetTx")
	}
	msg, ok := unpacked[0].(ClaimPlanetTx)
	if !ok {
		return nil, fmt.Errorf("could not cast type to ClaimPlanetTx")
	}
	return &msg, nil
}

func (w ClaimPlanetTxAbiWrapper) UnmarshalAndSubmit(bz []byte, submitFn func(name string, v any)) error {
	msg, err := w.unmarshal(bz)
	if err != nil {
		return err
	}
	submitFn(reflect.TypeOf(*msg).Name(), msg)
	return nil
}

func (w FooBarTxAbiWrapper) unmarshal(bz []byte) (*FooBarTx, error) {
	arg := abi.Arguments{{Type: abi.Type(w)}}
	unpacked, err := arg.Unpack(bz)
	if err != nil {
		return nil, fmt.Errorf("could not unpack bytes into FooBarTx")
	}
	msg, ok := unpacked[0].(FooBarTx)
	if !ok {
		return nil, fmt.Errorf("could not cast type to FooBarTx")
	}
	return &msg, nil
}

func (w FooBarTxAbiWrapper) UnmarshalAndSubmit(bz []byte, submitFn func(name string, v any)) error {
	msg, err := w.unmarshal(bz)
	if err != nil {
		return err
	}
	submitFn(reflect.TypeOf(*msg).Name(), msg)
	return nil
}
