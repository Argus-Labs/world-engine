/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type EntityStateElement = {
    data?: Array<{ [k: string]: any }> | undefined;
    id?: number | undefined;
};

/** @internal */
export const EntityStateElement$inboundSchema: z.ZodType<
    EntityStateElement,
    z.ZodTypeDef,
    unknown
> = z.object({
    data: z.array(z.record(z.any())).optional(),
    id: z.number().int().optional(),
});

/** @internal */
export type EntityStateElement$Outbound = {
    data?: Array<{ [k: string]: any }> | undefined;
    id?: number | undefined;
};

/** @internal */
export const EntityStateElement$outboundSchema: z.ZodType<
    EntityStateElement$Outbound,
    z.ZodTypeDef,
    EntityStateElement
> = z.object({
    data: z.array(z.record(z.any())).optional(),
    id: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityStateElement$ {
    /** @deprecated use `EntityStateElement$inboundSchema` instead. */
    export const inboundSchema = EntityStateElement$inboundSchema;
    /** @deprecated use `EntityStateElement$outboundSchema` instead. */
    export const outboundSchema = EntityStateElement$outboundSchema;
    /** @deprecated use `EntityStateElement$Outbound` instead. */
    export type Outbound = EntityStateElement$Outbound;
}
