/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type Result = {};

export type ReceiptEntry = {
    errors?: Array<string> | null | undefined;
    result?: Result | undefined;
    tick?: number | undefined;
    txHash?: string | undefined;
};

/** @internal */
export const Result$inboundSchema: z.ZodType<Result, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type Result$Outbound = {};

/** @internal */
export const Result$outboundSchema: z.ZodType<Result$Outbound, z.ZodTypeDef, Result> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Result$ {
    /** @deprecated use `Result$inboundSchema` instead. */
    export const inboundSchema = Result$inboundSchema;
    /** @deprecated use `Result$outboundSchema` instead. */
    export const outboundSchema = Result$outboundSchema;
    /** @deprecated use `Result$Outbound` instead. */
    export type Outbound = Result$Outbound;
}

/** @internal */
export const ReceiptEntry$inboundSchema: z.ZodType<ReceiptEntry, z.ZodTypeDef, unknown> = z.object({
    errors: z.nullable(z.array(z.string())).optional(),
    result: z.lazy(() => Result$inboundSchema).optional(),
    tick: z.number().int().optional(),
    txHash: z.string().optional(),
});

/** @internal */
export type ReceiptEntry$Outbound = {
    errors?: Array<string> | null | undefined;
    result?: Result$Outbound | undefined;
    tick?: number | undefined;
    txHash?: string | undefined;
};

/** @internal */
export const ReceiptEntry$outboundSchema: z.ZodType<
    ReceiptEntry$Outbound,
    z.ZodTypeDef,
    ReceiptEntry
> = z.object({
    errors: z.nullable(z.array(z.string())).optional(),
    result: z.lazy(() => Result$outboundSchema).optional(),
    tick: z.number().int().optional(),
    txHash: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReceiptEntry$ {
    /** @deprecated use `ReceiptEntry$inboundSchema` instead. */
    export const inboundSchema = ReceiptEntry$inboundSchema;
    /** @deprecated use `ReceiptEntry$outboundSchema` instead. */
    export const outboundSchema = ReceiptEntry$outboundSchema;
    /** @deprecated use `ReceiptEntry$Outbound` instead. */
    export type Outbound = ReceiptEntry$Outbound;
}
