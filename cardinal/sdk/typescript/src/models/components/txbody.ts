/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type TxBody = {
    /**
     * json string
     */
    body?: { [k: string]: any } | undefined;
    hash?: string | undefined;
    namespace?: string | undefined;
    nonce?: number | undefined;
    personaTag?: string | undefined;
    /**
     * hex encoded string
     */
    signature?: string | undefined;
};

/** @internal */
export const TxBody$inboundSchema: z.ZodType<TxBody, z.ZodTypeDef, unknown> = z.object({
    body: z.record(z.any()).optional(),
    hash: z.string().optional(),
    namespace: z.string().optional(),
    nonce: z.number().int().optional(),
    personaTag: z.string().optional(),
    signature: z.string().optional(),
});

/** @internal */
export type TxBody$Outbound = {
    body?: { [k: string]: any } | undefined;
    hash?: string | undefined;
    namespace?: string | undefined;
    nonce?: number | undefined;
    personaTag?: string | undefined;
    signature?: string | undefined;
};

/** @internal */
export const TxBody$outboundSchema: z.ZodType<TxBody$Outbound, z.ZodTypeDef, TxBody> = z.object({
    body: z.record(z.any()).optional(),
    hash: z.string().optional(),
    namespace: z.string().optional(),
    nonce: z.number().int().optional(),
    personaTag: z.string().optional(),
    signature: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TxBody$ {
    /** @deprecated use `TxBody$inboundSchema` instead. */
    export const inboundSchema = TxBody$inboundSchema;
    /** @deprecated use `TxBody$outboundSchema` instead. */
    export const outboundSchema = TxBody$outboundSchema;
    /** @deprecated use `TxBody$Outbound` instead. */
    export type Outbound = TxBody$Outbound;
}
