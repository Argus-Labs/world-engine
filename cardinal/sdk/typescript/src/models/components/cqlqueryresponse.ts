/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    EntityStateElement,
    EntityStateElement$inboundSchema,
    EntityStateElement$Outbound,
    EntityStateElement$outboundSchema,
} from "./entitystateelement.js";
import * as z from "zod";

export type CQLQueryResponse = {
    results?: Array<EntityStateElement> | undefined;
};

/** @internal */
export const CQLQueryResponse$inboundSchema: z.ZodType<CQLQueryResponse, z.ZodTypeDef, unknown> =
    z.object({
        results: z.array(EntityStateElement$inboundSchema).optional(),
    });

/** @internal */
export type CQLQueryResponse$Outbound = {
    results?: Array<EntityStateElement$Outbound> | undefined;
};

/** @internal */
export const CQLQueryResponse$outboundSchema: z.ZodType<
    CQLQueryResponse$Outbound,
    z.ZodTypeDef,
    CQLQueryResponse
> = z.object({
    results: z.array(EntityStateElement$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CQLQueryResponse$ {
    /** @deprecated use `CQLQueryResponse$inboundSchema` instead. */
    export const inboundSchema = CQLQueryResponse$inboundSchema;
    /** @deprecated use `CQLQueryResponse$outboundSchema` instead. */
    export const outboundSchema = CQLQueryResponse$outboundSchema;
    /** @deprecated use `CQLQueryResponse$Outbound` instead. */
    export type Outbound = CQLQueryResponse$Outbound;
}
