/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type DebugStateElement = {
    components?: { [k: string]: any } | undefined;
    id?: number | undefined;
};

/** @internal */
export const DebugStateElement$inboundSchema: z.ZodType<DebugStateElement, z.ZodTypeDef, unknown> =
    z.object({
        components: z.record(z.any()).optional(),
        id: z.number().int().optional(),
    });

/** @internal */
export type DebugStateElement$Outbound = {
    components?: { [k: string]: any } | undefined;
    id?: number | undefined;
};

/** @internal */
export const DebugStateElement$outboundSchema: z.ZodType<
    DebugStateElement$Outbound,
    z.ZodTypeDef,
    DebugStateElement
> = z.object({
    components: z.record(z.any()).optional(),
    id: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DebugStateElement$ {
    /** @deprecated use `DebugStateElement$inboundSchema` instead. */
    export const inboundSchema = DebugStateElement$inboundSchema;
    /** @deprecated use `DebugStateElement$outboundSchema` instead. */
    export const outboundSchema = DebugStateElement$outboundSchema;
    /** @deprecated use `DebugStateElement$Outbound` instead. */
    export type Outbound = DebugStateElement$Outbound;
}
