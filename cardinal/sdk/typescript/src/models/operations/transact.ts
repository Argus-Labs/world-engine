/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type TransactGlobals = {
    privateKey?: string | undefined;
    namespace?: string | undefined;
};

export type TransactRequest = {
    /**
     * Name of a registered message
     */
    txName: string;
    /**
     * Transaction details & message to be submitted
     */
    txBody: components.TxBody;
};

/** @internal */
export const TransactGlobals$inboundSchema: z.ZodType<TransactGlobals, z.ZodTypeDef, unknown> = z
    .object({
        _privateKey: z.string().optional(),
        _namespace: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            _privateKey: "privateKey",
            _namespace: "namespace",
        });
    });

/** @internal */
export type TransactGlobals$Outbound = {
    _privateKey?: string | undefined;
    _namespace?: string | undefined;
};

/** @internal */
export const TransactGlobals$outboundSchema: z.ZodType<
    TransactGlobals$Outbound,
    z.ZodTypeDef,
    TransactGlobals
> = z
    .object({
        privateKey: z.string().optional(),
        namespace: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            privateKey: "_privateKey",
            namespace: "_namespace",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactGlobals$ {
    /** @deprecated use `TransactGlobals$inboundSchema` instead. */
    export const inboundSchema = TransactGlobals$inboundSchema;
    /** @deprecated use `TransactGlobals$outboundSchema` instead. */
    export const outboundSchema = TransactGlobals$outboundSchema;
    /** @deprecated use `TransactGlobals$Outbound` instead. */
    export type Outbound = TransactGlobals$Outbound;
}

/** @internal */
export const TransactRequest$inboundSchema: z.ZodType<TransactRequest, z.ZodTypeDef, unknown> = z
    .object({
        txName: z.string(),
        TxBody: components.TxBody$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            TxBody: "txBody",
        });
    });

/** @internal */
export type TransactRequest$Outbound = {
    txName: string;
    TxBody: components.TxBody$Outbound;
};

/** @internal */
export const TransactRequest$outboundSchema: z.ZodType<
    TransactRequest$Outbound,
    z.ZodTypeDef,
    TransactRequest
> = z
    .object({
        txName: z.string(),
        txBody: components.TxBody$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            txBody: "TxBody",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactRequest$ {
    /** @deprecated use `TransactRequest$inboundSchema` instead. */
    export const inboundSchema = TransactRequest$inboundSchema;
    /** @deprecated use `TransactRequest$outboundSchema` instead. */
    export const outboundSchema = TransactRequest$outboundSchema;
    /** @deprecated use `TransactRequest$Outbound` instead. */
    export type Outbound = TransactRequest$Outbound;
}
