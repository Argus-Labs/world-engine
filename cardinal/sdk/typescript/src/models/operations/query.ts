/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type QueryRequest = {
    /**
     * Name of a registered query
     */
    queryName: string;
    /**
     * Query to be executed
     */
    requestBody: { [k: string]: any };
};

/** @internal */
export const QueryRequest$inboundSchema: z.ZodType<QueryRequest, z.ZodTypeDef, unknown> = z
    .object({
        queryName: z.string(),
        RequestBody: z.record(z.any()),
    })
    .transform((v) => {
        return remap$(v, {
            RequestBody: "requestBody",
        });
    });

/** @internal */
export type QueryRequest$Outbound = {
    queryName: string;
    RequestBody: { [k: string]: any };
};

/** @internal */
export const QueryRequest$outboundSchema: z.ZodType<
    QueryRequest$Outbound,
    z.ZodTypeDef,
    QueryRequest
> = z
    .object({
        queryName: z.string(),
        requestBody: z.record(z.any()),
    })
    .transform((v) => {
        return remap$(v, {
            requestBody: "RequestBody",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryRequest$ {
    /** @deprecated use `QueryRequest$inboundSchema` instead. */
    export const inboundSchema = QueryRequest$inboundSchema;
    /** @deprecated use `QueryRequest$outboundSchema` instead. */
    export const outboundSchema = QueryRequest$outboundSchema;
    /** @deprecated use `QueryRequest$Outbound` instead. */
    export type Outbound = QueryRequest$Outbound;
}
