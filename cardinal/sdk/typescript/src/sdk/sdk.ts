/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { createPersona } from "../funcs/createPersona.js";
import { getDebugState } from "../funcs/getDebugState.js";
import { getHealth } from "../funcs/getHealth.js";
import { getReceipts } from "../funcs/getReceipts.js";
import { getWorld } from "../funcs/getWorld.js";
import { query } from "../funcs/query.js";
import { queryCql } from "../funcs/queryCql.js";
import { transact } from "../funcs/transact.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Cardinal extends ClientSDK {
    /**
     * Executes a CQL (Cardinal Query Language) query
     *
     * @remarks
     * Executes a CQL (Cardinal Query Language) query
     */
    async queryCql(
        request: components.CardinalServerHandlerCQLQueryRequest,
        options?: RequestOptions
    ): Promise<components.CardinalServerHandlerCQLQueryResponse> {
        return unwrapAsync(queryCql(this, request, options));
    }

    /**
     * Retrieves a list of all entities in the game state
     *
     * @remarks
     * Retrieves a list of all entities in the game state
     */
    async getDebugState(
        options?: RequestOptions
    ): Promise<Array<components.PkgWorldDevWorldEngineCardinalTypesDebugStateElement>> {
        return unwrapAsync(getDebugState(this, options));
    }

    /**
     * Retrieves the status of the server and game loop
     *
     * @remarks
     * Retrieves the status of the server and game loop
     */
    async getHealth(
        options?: RequestOptions
    ): Promise<components.CardinalServerHandlerGetHealthResponse> {
        return unwrapAsync(getHealth(this, options));
    }

    /**
     * Executes a query
     *
     * @remarks
     * Executes a query
     */
    async query(
        request: operations.PostQueryGameQueryNameRequest,
        options?: RequestOptions
    ): Promise<{ [k: string]: any }> {
        return unwrapAsync(query(this, request, options));
    }

    /**
     * Retrieves all transaction receipts
     *
     * @remarks
     * Retrieves all transaction receipts
     */
    async getReceipts(
        request: components.CardinalServerHandlerListTxReceiptsRequest,
        options?: RequestOptions
    ): Promise<components.CardinalServerHandlerListTxReceiptsResponse> {
        return unwrapAsync(getReceipts(this, request, options));
    }

    /**
     * Submits a transaction
     *
     * @remarks
     * Submits a transaction
     */
    async transact(
        request: operations.PostTxGameTxNameRequest,
        options?: RequestOptions
    ): Promise<components.CardinalServerHandlerPostTransactionResponse> {
        return unwrapAsync(transact(this, request, options));
    }

    /**
     * Creates a persona
     *
     * @remarks
     * Creates a persona
     */
    async createPersona(
        request: components.TxBody,
        options?: RequestOptions
    ): Promise<components.CardinalServerHandlerPostTransactionResponse> {
        return unwrapAsync(createPersona(this, request, options));
    }

    /**
     * Retrieves details of the game world
     *
     * @remarks
     * Contains the registered components, messages, queries, and namespace
     */
    async getWorld(
        options?: RequestOptions
    ): Promise<components.CardinalServerHandlerGetWorldResponse> {
        return unwrapAsync(getWorld(this, options));
    }
}
