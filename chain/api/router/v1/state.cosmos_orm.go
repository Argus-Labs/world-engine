// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package routerv1

import (
	context "context"

	ormlist "cosmossdk.io/orm/model/ormlist"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

type NamespaceTable interface {
	Insert(ctx context.Context, namespace *Namespace) error
	Update(ctx context.Context, namespace *Namespace) error
	Save(ctx context.Context, namespace *Namespace) error
	Delete(ctx context.Context, namespace *Namespace) error
	Has(ctx context.Context, shard_name string) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, shard_name string) (*Namespace, error)
	List(ctx context.Context, prefixKey NamespaceIndexKey, opts ...ormlist.Option) (NamespaceIterator, error)
	ListRange(ctx context.Context, from, to NamespaceIndexKey, opts ...ormlist.Option) (NamespaceIterator, error)
	DeleteBy(ctx context.Context, prefixKey NamespaceIndexKey) error
	DeleteRange(ctx context.Context, from, to NamespaceIndexKey) error

	doNotImplement()
}

type NamespaceIterator struct {
	ormtable.Iterator
}

func (i NamespaceIterator) Value() (*Namespace, error) {
	var namespace Namespace
	err := i.UnmarshalMessage(&namespace)
	return &namespace, err
}

type NamespaceIndexKey interface {
	id() uint32
	values() []interface{}
	namespaceIndexKey()
}

// primary key starting index..
type NamespacePrimaryKey = NamespaceShardNameIndexKey

type NamespaceShardNameIndexKey struct {
	vs []interface{}
}

func (x NamespaceShardNameIndexKey) id() uint32            { return 0 }
func (x NamespaceShardNameIndexKey) values() []interface{} { return x.vs }
func (x NamespaceShardNameIndexKey) namespaceIndexKey()    {}

func (this NamespaceShardNameIndexKey) WithShardName(shard_name string) NamespaceShardNameIndexKey {
	this.vs = []interface{}{shard_name}
	return this
}

type namespaceTable struct {
	table ormtable.Table
}

func (this namespaceTable) Insert(ctx context.Context, namespace *Namespace) error {
	return this.table.Insert(ctx, namespace)
}

func (this namespaceTable) Update(ctx context.Context, namespace *Namespace) error {
	return this.table.Update(ctx, namespace)
}

func (this namespaceTable) Save(ctx context.Context, namespace *Namespace) error {
	return this.table.Save(ctx, namespace)
}

func (this namespaceTable) Delete(ctx context.Context, namespace *Namespace) error {
	return this.table.Delete(ctx, namespace)
}

func (this namespaceTable) Has(ctx context.Context, shard_name string) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, shard_name)
}

func (this namespaceTable) Get(ctx context.Context, shard_name string) (*Namespace, error) {
	var namespace Namespace
	found, err := this.table.PrimaryKey().Get(ctx, &namespace, shard_name)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &namespace, nil
}

func (this namespaceTable) List(ctx context.Context, prefixKey NamespaceIndexKey, opts ...ormlist.Option) (NamespaceIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return NamespaceIterator{it}, err
}

func (this namespaceTable) ListRange(ctx context.Context, from, to NamespaceIndexKey, opts ...ormlist.Option) (NamespaceIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return NamespaceIterator{it}, err
}

func (this namespaceTable) DeleteBy(ctx context.Context, prefixKey NamespaceIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this namespaceTable) DeleteRange(ctx context.Context, from, to NamespaceIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this namespaceTable) doNotImplement() {}

var _ NamespaceTable = namespaceTable{}

func NewNamespaceTable(db ormtable.Schema) (NamespaceTable, error) {
	table := db.GetTable(&Namespace{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Namespace{}).ProtoReflect().Descriptor().FullName()))
	}
	return namespaceTable{table}, nil
}

type StateStore interface {
	NamespaceTable() NamespaceTable

	doNotImplement()
}

type stateStore struct {
	namespace NamespaceTable
}

func (x stateStore) NamespaceTable() NamespaceTable {
	return x.namespace
}

func (stateStore) doNotImplement() {}

var _ StateStore = stateStore{}

func NewStateStore(db ormtable.Schema) (StateStore, error) {
	namespaceTable, err := NewNamespaceTable(db)
	if err != nil {
		return nil, err
	}

	return stateStore{
		namespaceTable,
	}, nil
}
