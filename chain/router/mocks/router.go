// Code generated by MockGen. DO NOT EDIT.
// Source: router.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "pkg.berachain.dev/polaris/eth/core"
	types "pkg.berachain.dev/polaris/eth/core/types"
	router "pkg.world.dev/world-engine/chain/router"
)

// MockRouter is a mock of Router interface.
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *MockRouterMockRecorder
}

// MockRouterMockRecorder is the mock recorder for MockRouter.
type MockRouterMockRecorder struct {
	mock *MockRouter
}

// NewMockRouter creates a new mock instance.
func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &MockRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter) EXPECT() *MockRouterMockRecorder {
	return m.recorder
}

// DispatchOrDequeue mocks base method.
func (m *MockRouter) HandleDispatch(arg0 *types.Transaction, result *core.ExecutionResult) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleDispatch", arg0, result)
}

// DispatchOrDequeue indicates an expected call of DispatchOrDequeue.
func (mr *MockRouterMockRecorder) DispatchOrDequeue(arg0, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDispatch", reflect.TypeOf((*MockRouter)(nil).HandleDispatch), arg0, result)
}

// Query mocks base method.
func (m *MockRouter) Query(ctx context.Context, request []byte, resource, namespace string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, request, resource, namespace)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockRouterMockRecorder) Query(ctx, request, resource, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockRouter)(nil).Query), ctx, request, resource, namespace)
}

// SendMessage mocks base method.
func (m *MockRouter) SendMessage(ctx context.Context, namespace, sender string, msgID uint64, msg []byte) (*router.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, namespace, sender, msgID, msg)
	ret0, _ := ret[0].(*router.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockRouterMockRecorder) SendMessage(ctx, namespace, sender, msgID, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockRouter)(nil).SendMessage), ctx, namespace, sender, msgID, msg)
}
