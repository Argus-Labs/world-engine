version: '3'
services:
  cockroachdb:
    container_name: cockroachdb
    # Only use cockroachdb single-node clusters for non-production environment
    image: cockroachdb/cockroach:latest-v23.1
    command: start-single-node --insecure --store=attrs=ssd,path=/var/lib/cockroach/,size=20%
    restart: unless-stopped
    environment:
      - COCKROACH_DATABASE=nakama
      - COCKROACH_USER=root
      - COCKROACH_PASSWORD=${DB_PASSWORD:-development}
    volumes:
      - data:/var/lib/cockroach
    expose:
      - "8080"
      - "26257"
    ports:
      - "26257:26257"
      - "8080:8080"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health?ready=1" ]
      interval: 3s
      timeout: 3s
      retries: 5
    networks:
      - world-engine

  nakama:
    container_name: relay_nakama # Do not change this without changing the e2e-nakama makescript or e2e test will fail
    platform: linux/amd64
    build: ./relay/nakama
    depends_on:
      cockroachdb:
        condition: service_healthy
      game:
        condition: service_started
    environment:
      - CARDINAL_ADDR=game:4040
      - ENABLE_DEBUG=TRUE
      - CARDINAL_NAMESPACE=testgame
      - ENABLE_ALLOWLIST=${ENABLE_ALLOWLIST:-false}
      - DB_PASSWORD=${DB_PASSWORD:-development}
    entrypoint:
      - "/bin/sh"
      - "-ecx"
      - >
        /nakama/nakama migrate up --database.address root:$DB_PASSWORD@cockroachdb:26257/nakama &&
        exec /nakama/nakama --config /nakama/data/local.yml --database.address root:$DB_PASSWORD@cockroachdb:26257/nakama --socket.outgoing_queue_size=${OUTGOING_QUEUE_SIZE:-64}
    expose:
      - "7349"
      - "7350"
      - "7351"
    healthcheck:
      test: [ "CMD", "/nakama/nakama", "healthcheck" ]
      interval: 20s
      timeout: 10s
      retries: 5
    ports:
      - "7349:7349"
      - "7350:7350"
      - "7351:7351"
    restart: unless-stopped
    networks:
      - world-engine

  chain:
    container_name: evm_base_shard
    environment:
      ## Env vars reference: https://github.com/Argus-Labs/world-engine/blob/main/evm/README.md
      ## Get AUTH_TOKEN from celestia_devnet container: `$(docker exec $(docker ps -q) celestia bridge auth admin --node.store /home/celestia/bridge`
      - DA_BASE_URL=${DA_BASE_URL:-http://celestia_devnet}
      - DA_AUTH_TOKEN=${DA_AUTH_TOKEN:-}
      - FAUCET_ENABLED=${FAUCET_ENABLED:-"true"}
      - FAUCET_ADDRESS=${FAUCET_ADDRESS:-"aa9288F88233Eb887d194fF2215Cf1776a6FEE41"} # ETH address without leading 0x (Default: account 0 of CHAIN_KEY_MNEMONIC)
      - FAUCET_AMOUNT=${FAUCET_AMOUNT:-"0x56BC75E2D63100000"} # ETH in wei unit, encoded as hexadecimal. (Default: 100 ETH)
      - BASE_SHARD_ROUTER_KEY=${BASE_SHARD_ROUTER_KEY:-abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ01} # Secure auth token for game shard
    build:
      context: evm
      dockerfile: Dockerfile
    restart: unless-stopped
    expose:
      - "1317"
      - "26657"
      - "9090"
      - "9601"
    ports:
      - "1317:1317"
      - "26657:26657"
      - "9090:9090"
      - "9601:9601"
      - "8545:8545"
    networks:
      - world-engine
    depends_on:
      - celestia-devnet

  celestia-devnet:
    container_name: celestia_devnet
    image: ghcr.io/rollkit/local-celestia-devnet:latest
    networks:
      - world-engine
    restart: on-failure
    ports:
      - "26657"
      - "26658:26658"
      - "26659:26659"
      - "9090"

  game:
    container_name: test_game
    environment:
      - CARDINAL_NAMESPACE=${CARDINAL_NAMESPACE:-testgame}
      - CARDINAL_ROLLUP_ENABLED=${CARDINAL_ROLLUP_ENABLED:-false}
      - CARDINAL_LOG_LEVEL=${CARDINAL_LOG_LEVEL:-info}
      - CARDINAL_LOG_PRETTY=${CARDINAL_LOG_PRETTY:-true}
      - REDIS_ADDRESS=${REDIS_ADDRESS:-redis:6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - BASE_SHARD_SEQUENCER_ADDRESS=${BASE_SHARD_SEQUENCER_ADDRESS:-chain:9601}
      - BASE_SHARD_ROUTER_KEY=${BASE_SHARD_ROUTER_KEY:-abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ01}
      - TELEMETRY_ENABLED=${TELEMETRY_ENABLED:-false}
      - TELEMETRY_STATSD_ADDRESS=${TELEMETRY_STATSD_ADDRESS}
      - TELEMETRY_TRACE_ADDRESS=${TELEMETRY_TRACE_ADDRESS}
    build:
      context: ./
      dockerfile: e2e/testgames/game/Dockerfile
    restart: unless-stopped
    expose:
      - "4040"
    ports:
      - "4040:4040"
      - "9020:9020"
    depends_on:
      - redis
    networks:
      - world-engine

  redis:
    container_name: redis
    image: redis:latest
    command: redis-server --save ""
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    expose:
      - "6379"
    ports:
      - "6379:6379"
    networks:
      - world-engine
    restart: unless-stopped

  test_nakama:
    container_name: test_nakama
    build:
      context: ./e2e/tests
      dockerfile: nakama/Dockerfile
    depends_on:
      nakama:
        condition: service_healthy
    environment:
      - NAKAMA_ADDRESS=http://nakama:7350
    networks:
      - world-engine

volumes:
  data:

networks:
  world-engine:
    driver: bridge
