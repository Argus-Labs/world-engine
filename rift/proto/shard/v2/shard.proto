syntax = "proto3";

package world.engine.shard.v2;

option go_package = "github.com/argus-labs/world-engine/shard/v2";

// service TransactionHandler deals with transactions coming from game shards.
service TransactionHandler {
  // RegisterGameShard registers a game shard to be used in the Router system.
  rpc RegisterGameShard(RegisterGameShardRequest) returns (RegisterGameShardResponse);
  // SubmitCardinalBatch handles receiving transactions from a game shard and persisting them to the chain.
  rpc Submit(SubmitTransactionsRequest) returns (SubmitTransactionsResponse);
  // QueryTransactions queries the base shard for sequenced transactions.
  rpc QueryTransactions(QueryTransactionsRequest) returns (QueryTransactionsResponse);
}

message RegisterGameShardRequest {
  // namespace is the namespace of the game shard.
  string namespace = 1;

  // router_address is the address of the game shard's router service.
  string router_address = 2;
}

message RegisterGameShardResponse {}

message SubmitTransactionsRequest {
  // epoch is the period in which the transactions occurred. For loop driven runtimes, such as cardinal,
  // this is often referred to as "tick number".
  uint64 epoch = 1;
  uint64 unix_timestamp = 2;
  // namespace is the namespace of the game shard in which the transactions were executed in.
  string namespace = 3;
  // transactions is a mapping of game shard transaction ID's to the transactions themselves.
  //  NOTE: if this message is being consumed via Golang, the transaction mapping MUST be converted to a
  // slice with the transaction ID's sorted. Maps in Golang are NOT deterministic.
  map<uint64, Transactions> transactions = 4;
}

message SubmitTransactionsResponse {}

message Transactions {
  repeated Transaction txs = 1;
}

message Transaction {
  string PersonaTag = 1;
  string Namespace = 2;
  uint64 Nonce = 3;
  string Signature = 4;
  bytes Body = 5;
}

message QueryTransactionsRequest {
  string namespace = 1;
  PageRequest page = 2;
}

message QueryTransactionsResponse {
  // epochs contains the transactions. Each entry contains an epoch, and a list of txs that occurred in that epoch.
  repeated Epoch epochs = 1;

  // page contains information on how to query the next items in the collection, if any.
  // when page is nil/empty, there is nothing left to query.
  PageResponse page = 2;
}

// PageRequest represents a request for a paged query.
message PageRequest {
  // key is the cosmos SDK store key to begin the iteration on.
  bytes key = 1;
  // limit is the amount of items we want to limit in our return.
  // example, if the collection we are interested has 10 items,
  // and we set limit to 5, the query will only return 5 items.
  uint32  limit = 2;
}

// PageResponse represents a response to a paged query.
message PageResponse {
  // if a key is present, that means there are more items from the collection to query, and the given key is the key for
  // the item after the last one returned. if key is nil, that means there are no more items in the collection to query.
  bytes key = 1;
}


message TxData {
  // tx_id is the ID associated with the payloads below. This is needed so we know which transaction struct
  // to unmarshal the payload.Body into.
  uint64 tx_id = 1;

  // game_shard_transaction is an encoded game shard transaction.
  bytes game_shard_transaction = 2;
}

// Epoch contains an epoch number, and the transactions that occurred in that epoch.
message Epoch {
  uint64 epoch = 1;
  uint64 unix_timestamp = 2;
  repeated TxData txs = 3;
}