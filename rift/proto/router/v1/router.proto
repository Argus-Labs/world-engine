syntax = "proto3";

package world.engine.router.v1;

option go_package = "github.com/argus-labs/world-engine/router/v1";

service Msg {
  rpc SendMessage(stream SendMessageRequest) returns (stream SendMessageResponse);
  rpc QueryShard(QueryShardRequest) returns (QueryShardResponse);
}

message SendMessageRequest {
  // sender is the identifier of the message sender.
  string sender = 1;

  // message contains the underlying bytes of the message. typically, this is an abi encoded solidity struct.
  bytes message = 2;

  // message_id is the id of the message. this is needed to indicate to the server which concrete type to deserialize
  // the message bytes into.
  uint64 message_id = 3;

  // evm_tx_hash is the tx hash of the evm transaction that triggered the request.
  string evm_tx_hash = 4;
}

message SendMessageResponse {
  // errs contain any errors that occurred during the transaction execution.
  string errs = 1;

  // result is an ABI encoded struct of the transaction type's result.
  bytes result = 2;

  // evm_tx_hash is the tx hash of the evm transaction that triggered the request.
  string evm_tx_hash = 3;
}

message QueryShardRequest {
  // resource is the resource to query for.
  string resource = 1;

  // request is an ABI encoded request struct.
  bytes request = 2;
}

message QueryShardResponse {
  // response is an ABI encoded response struct.
  bytes response = 1;
}
